[{"path":"/articles/biplotEZ.html","id":"what-is-a-pca-biplot","dir":"Articles","previous_headings":"","what":"What is a PCA biplot","title":"biplotEZ","text":"Consider data matrix 𝐗*:n×p\\mathbf{X}^{*}:n \\times p containing data nn objects pp variables. produce 2D biplot, need optimally approximate 𝐗=(𝐈n−1n𝟏𝟏′)𝐗*\\mathbf{X} = (\\mathbf{}_n-\\frac{1}{n}\\mathbf{11}')\\mathbf{X}^{*} (typically rank pp p<np<n) rank 22 matrix. terms least squares error, want min∥𝐗̂−𝐗∥2 min \\| \\hat{\\mathbf{X}}-\\mathbf{X} \\|^2  rank(𝐗̂)=2rank(\\hat{\\mathbf{X}})=2. shown Eckart Young (1936) singular value decomposition 𝐗=𝐔𝐃𝐕′\\mathbf{X} = \\mathbf{UDV'} 𝐗̂=𝐔𝐉𝐃𝐉𝐕′ \\hat{\\mathbf{X}} = \\mathbf{UJDJV'}  𝐉=[𝐈2𝟎𝟎𝟎] \\mathbf{J} = \\begin{bmatrix}               \\mathbf{}_2 & \\mathbf{0}\\\\               \\mathbf{0} & \\mathbf{0}              \\end{bmatrix}  essentially selecting first two columns 𝐔\\mathbf{U}, diagonal matrix first (largest) two singular values first two rows 𝐕′\\mathbf{V}'. Define 𝐉2=[𝐈2𝟎] \\mathbf{J}_2 = \\begin{bmatrix}                 \\mathbf{}_2\\\\                 \\mathbf{0}                \\end{bmatrix}  𝐉2𝐉2′=𝐉\\mathbf{J}_2\\mathbf{J}_2' = \\mathbf{J} can write 𝐗̂=(𝐔𝐃𝐉2)(𝐕𝐉2)′\\hat{\\mathbf{X}} = (\\mathbf{UDJ}_2)(\\mathbf{VJ}_2)'. Gabriel (1971) shows rank 22 matrix can written 𝐗̂=𝐆𝐇′\\begin{equation}   \\hat{\\mathbf{X}} = \\mathbf{G} \\mathbf{H}' \\tag{1} \\end{equation} 𝐆:n×2\\mathbf{G}:n \\times 2 𝐇:p×2\\mathbf{H}:p \\times 2.nn rows 𝐆\\mathbf{G} provide nn pairs 2D coordinates representing rows 𝐗̂\\hat{\\mathbf{X}} pp rows 𝐇\\mathbf{H} provide pp pairs 2D coordinates representing columns 𝐗̂\\hat{\\mathbf{X}}. Since 𝐗̂=(𝐔𝐃𝐉2)(𝐕𝐉2)′\\hat{\\mathbf{X}} = (\\mathbf{UDJ}_2)(\\mathbf{VJ}_2)', setting 𝐆=𝐔𝐃𝐉2\\mathbf{G}=\\mathbf{UDJ}_2 𝐇=𝐕𝐉2\\mathbf{H}=\\mathbf{VJ}_2 obtains best least squares approximation 𝐗\\mathbf{X}. Gabriel (1971) shows approximation distances rows optimal, approximation correlations cosines angles rows 𝐇\\mathbf{H} sub-optimal. rows 𝐆\\mathbf{G} plotted points, representing samples. rows 𝐇\\mathbf{H} provide directions axes variables. Since xij*−x‾j=xij≈x̂ij=𝐠()′𝐡(j) x^{*}_{ij}-\\bar{x}_j = x_{ij} \\approx \\hat{x}_{ij} = \\mathbf{g}_{()}'\\mathbf{h}_{(j)}  values predict μ\\mu variable jj form μ=𝐠′μ𝐡(j) \\mu = \\mathbf{g}'_{\\mu}\\mathbf{h}_{(j)}  defines straight line orthogonal 𝐡(j)\\mathbf{h}_{(j)} biplot space (see dotted red line Figure 1()). find intersection prediction line 𝐡(j)\\mathbf{h}_{(j)} note 𝐠′()𝐡(j)=∥𝐠()∥∥𝐡(j)∥cos(𝐠(),𝐡(j))=∥𝐩∥∥𝐡(j)∥ \\mathbf{g}'_{()}\\mathbf{h}_{(j)} = \\| \\mathbf{g}_{()} \\| \\| \\mathbf{h}_{(j)} \\| cos(\\mathbf{g}_{()},\\mathbf{h}_{(j)}) =  \\| \\mathbf{p} \\| \\| \\mathbf{h}_{(j)} \\|   𝐩\\mathbf{p} length orthogonal projection 𝐠()\\mathbf{g}_{()} 𝐡(j)\\mathbf{h}_{(j)}. illustrated Figure 1(b) triangle ABC: cos(θ)=ACABcos(\\theta) = \\frac{AC}{AB} AC=ABcos(θ)AC = AB cos(\\theta) length ACAC, written ∥𝐩∥\\| \\mathbf{p} \\| equal cosine times length ABAB, .e. cos(𝐠(),𝐡(j))∥𝐠()∥cos(\\mathbf{g}_{()},\\mathbf{h}_{(j)}) \\| \\mathbf{g}_{()} \\|. Figure 1: Calibration biplot axes. Since 𝐩\\mathbf{p} along 𝐡(j)\\mathbf{h}_{(j)} can write 𝐩=c𝐡(j)\\mathbf{p} = c\\mathbf{h}_{(j)} points prediction line μ=𝐠′μ𝐡(j)\\mu = \\mathbf{g}'_{\\mu}\\mathbf{h}_{(j)} project point cμ𝐡(j)c_{\\mu}\\mathbf{h}_{(j)}. solve cμc_{\\mu} μ=𝐠′μ𝐡(j)=∥𝐩∥∥𝐡(j)∥=∥cμ𝐡(j)∥∥𝐡(j)∥ \\mu = \\mathbf{g}'_{\\mu}\\mathbf{h}_{(j)}=\\| \\mathbf{p} \\| \\| \\mathbf{h}_{(j)} \\| =  \\| c_{\\mu}\\mathbf{h}_{(j)} \\| \\| \\mathbf{h}_{(j)} \\| cμ=μ𝐡(j)′𝐡(j). c_{\\mu} = \\frac{\\mu}{\\mathbf{h}_{(j)}'\\mathbf{h}_{(j)}}.  select ‘nice’ scale markers τ1,τ2,⋯τk\\tau_{1}, \\tau_{2}, \\cdots \\tau_{k} variable jj, τh−x‾j=μh\\tau_{h}-\\bar{x}_j = \\mu_{h} positions scale markers 𝐡(j)\\mathbf{h}_{(j)} given pμ1,pμ2,⋯pμkp_{\\mu_{1}}, p_{\\mu_{2}}, \\cdots p_{\\mu_{k}} pμh=cμh𝐡(j)=μh𝐡(j)′𝐡(j)𝐡(j) p_{\\mu_h} = c_{\\mu_h}\\mathbf{h}_{(j)} =  \\frac{\\mu_h}{\\mathbf{h}_{(j)}'\\mathbf{h}_{(j)}}\\mathbf{h}_{(j)} \\tag{2}  obtain PCA biplot 48×448\\times 4 rock data R call","code":"biplot(rock, scale = TRUE) |> PCA() |> plot()"},{"path":"/articles/biplotEZ.html","id":"the-function-biplot","dir":"Articles","previous_headings":"","what":"The function biplot()","title":"biplotEZ","text":"function biplot() takes data set (usually) outputs object class biplot. Apart specifying data set, can specify single variable classification purposes. want use variable state.region formatting, say colour coding samples according region, instead specify grouping.aes indicate pertains aesthetics, rather data structure. can include exclude aestethics variable data set. Next, look centring scaling numeric data matrix. saw section 1 , PCA computed centred data matrix. methods, centring either required effect methodology, therefore default center = TRUE. Since centring usually assumed, get warning message, explicitly choose set center = FALSE. default scaled FALSE, often variables different units measurement, advisable divide variable standard deviation accomplished setting `scale = TRUE’. final optional argument function specifying title plot. notice output , centring / scaling effect print method. however effect components object class biplot output. Note components means sd contain sample means sample sds either/center scaled TRUE. values FALSE, components contain zeros means /ones sd ensure back transformation affect.","code":"state.data <- data.frame (state.region, state.x77) biplot(state.data) #> Object of class biplot, based on 50 samples and 9 variables. #> 8 numeric variables. #> 1 categorical variable. biplot(state.x77, classes=state.region) #> Object of class biplot, based on 50 samples and 8 variables. #> 8 numeric variables. #> 4 classes: Northeast South North Central West biplot(state.x77, group.aes=state.region) #> Object of class biplot, based on 50 samples and 8 variables. #> 8 numeric variables. biplot(state.data)                 # centred, but no scaling #> Object of class biplot, based on 50 samples and 9 variables. #> 8 numeric variables. #> 1 categorical variable. biplot(state.data, scale = TRUE)   # centered and scaled #> Object of class biplot, based on 50 samples and 9 variables. #> 8 numeric variables. #> 1 categorical variable. biplot(state.data, center = FALSE) # no centring (usually not recommended) or scaling #> Object of class biplot, based on 50 samples and 9 variables. #> 8 numeric variables. #> 1 categorical variable. out <- biplot(state.data)                 # centred, but no scaling out$center #> [1] TRUE out$scaled #> [1] FALSE out$means #> Population     Income Illiteracy   Life.Exp     Murder    HS.Grad      Frost  #>  4246.4200  4435.8000     1.1700    70.8786     7.3780    53.1080   104.4600  #>       Area  #> 70735.8800 out$sd #> [1] 1 1 1 1 1 1 1 1 out <- biplot(state.data, scale = TRUE)   # centered and scaled out$center #> [1] TRUE out$scaled #> [1] TRUE out$means #> Population     Income Illiteracy   Life.Exp     Murder    HS.Grad      Frost  #>  4246.4200  4435.8000     1.1700    70.8786     7.3780    53.1080   104.4600  #>       Area  #> 70735.8800 out$sd #>   Population       Income   Illiteracy     Life.Exp       Murder      HS.Grad  #> 4.464491e+03 6.144699e+02 6.095331e-01 1.342394e+00 3.691540e+00 8.076998e+00  #>        Frost         Area  #> 5.198085e+01 8.532730e+04 out <- biplot(state.data, center = FALSE) # no centring (usually not recommended) or scaling out$center #> [1] FALSE out$scaled #> [1] FALSE out$means #> [1] 0 0 0 0 0 0 0 0 out$sd #> [1] 1 1 1 1 1 1 1 1"},{"path":"/articles/biplotEZ.html","id":"using-biplot-with-princomp-or-prcomp","dir":"Articles","previous_headings":"The function biplot()","what":"Using biplot() with princomp() or prcomp()","title":"biplotEZ","text":"user wish construct PCA biplot performing principal component analysis via built functions stats package, output either functions can piped biplot function, piping implies argument data now takes value object class prcomp princomp.","code":"princomp(state.x77) |> biplot() #> Object of class biplot, based on 50 samples and 8 variables. #> 8 numeric variables. out <- prcomp(state.x77, scale.=TRUE) |> biplot() rbind (head(out$raw.X,3),tail(out$raw.X,3)) #>               Population Income Illiteracy Life Exp Murder HS Grad Frost   Area #> Alabama             3615   3624        2.1    69.05   15.1    41.3    20  50708 #> Alaska               365   6315        1.5    69.31   11.3    66.7   152 566432 #> Arizona             2212   4530        1.8    70.55    7.8    58.1    15 113417 #> West Virginia       1799   3617        1.4    69.48    6.7    41.6   100  24070 #> Wisconsin           4589   4468        0.7    72.48    3.0    54.5   149  54464 #> Wyoming              376   4566        0.6    70.29    6.9    62.9   173  97203 rbind (head(out$X,3),tail(out$X,3)) #>                Population      Income Illiteracy   Life Exp     Murder #> Alabama       -0.14143156 -1.32113867   1.525758 -1.3621937  2.0918101 #> Alaska        -0.86939802  3.05824562   0.541398 -1.1685098  1.0624293 #> Arizona       -0.45568908  0.15330286   1.033578 -0.2447866  0.1143154 #> West Virginia -0.54819682 -1.33253061   0.377338 -1.0418703 -0.1836632 #> Wisconsin      0.07673438  0.05240289  -0.771082  1.1929438 -1.1859550 #> Wyoming       -0.86693413  0.21188994  -0.935142 -0.4384705 -0.1294853 #>                  HS Grad       Frost       Area #> Alabama       -1.4619293 -1.62482920 -0.2347183 #> Alaska         1.6828035  0.91456761  5.8093497 #> Arizona        0.6180514 -1.72101848  0.5002047 #> West Virginia -1.4247868 -0.08580083 -0.5469045 #> Wisconsin      0.1723413  0.85685405 -0.1906996 #> Wyoming        1.2123316  1.31856256  0.3101835 out$center #> [1] TRUE out$scaled #> [1] TRUE out$means #> Population     Income Illiteracy   Life Exp     Murder    HS Grad      Frost  #>  4246.4200  4435.8000     1.1700    70.8786     7.3780    53.1080   104.4600  #>       Area  #> 70735.8800 out$sd #>   Population       Income   Illiteracy     Life Exp       Murder      HS Grad  #> 4.464491e+03 6.144699e+02 6.095331e-01 1.342394e+00 3.691540e+00 8.076998e+00  #>        Frost         Area  #> 5.198085e+01 8.532730e+04"},{"path":"/articles/biplotEZ.html","id":"the-functions-pca-plot-and-legend-type","dir":"Articles","previous_headings":"","what":"The functions PCA(), plot() and legend.type()","title":"biplotEZ","text":"first argument function PCA() object class biplot, .e. output biplot() function. default construct 2D biplot (argument dim.biplot = 2) first two principal components (argument e.vects = 1:2). group.aes argument, specified function biplot(), allows grouping argument sample aesthetics. PCA biplot state.x77 data colouring according state.region obtained follows:  output PCA() object class PCA inherits class biplot. Four additional components present PCA object. matrix Z contains coordinates sample points, matrix Vr contains “coordinates” variables. notation equation (1), Z=𝐆:n×2\\mathbf{G}:n \\times 2 Vr=𝐇:p×2\\mathbf{H}:p \\times 2. component Xhat matrix 𝐗̂\\hat{\\mathbf{X}} left hand side equation (1). final component ax.one.unit contains rows expression equation (2) μh=1\\mu_h=1, words, one unit positive direction biplot axis. piping PCA class object (inheriting class biplot) generic plot() function, plot.biplot() function constructs biplot graphical device. add legend biplot, call  mentioned section 1 default choice 𝐆=𝐔𝐃𝐉2\\mathbf{G}=\\mathbf{UDJ}_2 𝐇=𝐕𝐉2\\mathbf{H}=\\mathbf{VJ}_2 provides exact representation distances rows 𝐗̂\\mathbf{\\hat{X}} optimal approximation least squares sense distances rows 𝐗\\mathbf{X} (samples). Alternatively, correlations variables (columns 𝐗\\mathbf{X}) can optimally approximated cosines angles axes, leaving approximation distances samples suboptimal. case 𝐆=𝐔𝐉2\\mathbf{G}=\\mathbf{UJ}_2 𝐇=𝐕𝐃𝐉2\\mathbf{H}=\\mathbf{VDJ}_2 biplot obtained setting argument correlation.biplot = TRUE.","code":"biplot(state.x77, scaled = TRUE) |>    PCA(group.aes = state.region) |> plot() biplot(state.x77, scaled = TRUE) |>    PCA(group.aes = state.region) |>    legend.type(samples = TRUE) |> plot() biplot(state.x77, scaled = TRUE) |>    PCA(group.aes = state.region, correlation.biplot = TRUE) |>    legend.type(samples = TRUE) |> plot()"},{"path":"/articles/biplotEZ.html","id":"the-function-samples","dir":"Articles","previous_headings":"","what":"The function samples()","title":"biplotEZ","text":"function controls aesthetics sample points biplot. function accepts first argument object class biplot aesthetics applied. Let us first construct PCA biplot state.x77 data samples coloured according state.division.  Since legend interferes sample points, choose place legend new page, setting new = TRUE legend.type function. Furthermore, wish select colours, defaults, divisions. can also change opacity sample colours argument opacity default 1.  Furthermore want use different plotting character central regions. want use pch = 15 first three final two divisions pch = 1 remaining four divisions.  increase size plotting characters eastern states, add following:  choose show samples central states, argument used either indicating number(s) sequence levels (= 4:7), shown , levels :  Note since four regions selected, colour (aesthetics) applied regions order specified . add sample names, label argument set TRUE. large sample sizes, recommended, overplotting render plot unusable. size labels controlled label.cex can specified either single value (samples) vector indicating size values individual sample. colour labels defaults colour(s) samples. However, individual label colours can spesified label.col, similar label.cex either single value vector length equal number samples.  can use arguments label.cex, label.side label.offset make plot legible little effort.  can also make use functionality ggrepel package place labels.  Additionally, user can add customised label names samples biplot. , label must set TRUE (\"ggrepel\") label.name set vector size n specifying label names samples. case, label name set first three characters state name (row names data).  data plotted biplot multivariate time series, can make sense connect data points order. Let us consider four quarters UKgas data set four variables represent years sample points PCA biplot.","code":"biplot(state.x77, scaled = TRUE) |>    PCA(group.aes = state.division) |>    legend.type(samples = TRUE) |> plot() biplot(state.x77, scaled = TRUE) |>    PCA(group.aes = state.division) |>    samples (col = c(\"red\", \"darkorange\", \"gold\", \"chartreuse4\",                     \"green\", \"salmon\", \"magenta\", \"#000000\", \"blue\"),opacity = 0.65,pch=19) |>   legend.type(samples = TRUE, new = TRUE) |> plot() levels (state.division) #> [1] \"New England\"        \"Middle Atlantic\"    \"South Atlantic\"     #> [4] \"East South Central\" \"West South Central\" \"East North Central\" #> [7] \"West North Central\" \"Mountain\"           \"Pacific\" biplot(state.x77, scaled = TRUE) |>    PCA(group.aes = state.division) |>    samples (col = c(\"red\", \"darkorange\", \"gold\", \"chartreuse4\",                     \"green\", \"salmon\", \"magenta\", \"black\", \"blue\"),            pch = c(15, 15, 15, 1, 1, 1, 1, 15, 15)) |>   legend.type(samples = TRUE, new = TRUE) |> plot() biplot(state.x77, scaled = TRUE) |>    PCA(group.aes = state.division) |>    samples (col = c(\"red\", \"darkorange\", \"gold\", \"chartreuse4\",                     \"green\", \"salmon\", \"magenta\", \"black\", \"blue\"),            pch = c(15, 15, 15, 1, 1, 1, 1, 15, 15),            cex = c(rep(1.5,4), c(1,1.5,1,1.5))) |>   legend.type(samples = TRUE, new = TRUE)  |> plot() biplot(state.x77, scaled = TRUE) |>    PCA(group.aes = state.division) |>    samples (col = c(\"red\", \"darkorange\", \"gold\", \"chartreuse4\",                     \"green\", \"salmon\", \"magenta\", \"black\", \"blue\"),            which = c(\"West North Central\", \"West South Central\", \"East South Central\",                       \"East North Central\")) |>   legend.type(samples = TRUE, new = TRUE)  |> plot() biplot(state.x77, scaled = TRUE) |> PCA() |>    samples (label = TRUE) |> plot() rownames(state.x77)[match(c(\"Pennsylvania\", \"New Jersey\", \"Massachusetts\",                             \"Minnesota\"), rownames(state.x77))] <- c(\"PA\", \"NJ\", \"MA\", \"MN\") above <- match(c(\"Alaska\", \"California\", \"Texas\", \"New York\", \"Nevada\", \"Georgia\", \"Alabama\",                  \"North Carolina\", \"Colorado\", \"Washington\", \"Illinois\", \"Michigan\", \"Arizon\",                  \"Florida\", \"Ohio\", \"NJ\", \"Kansas\"), rownames(state.x77)) right.side <- match(c(\"South Carolina\", \"Kentucky\", \"Rhode Island\", \"New Hampshire\", \"Virginia\",                       \"Missouri\", \"Delaware\", \"Hawaii\", \"Oregon\", \"PA\", \"Nebraska\", \"Montana\",                       \"Maryland\", \"Indiana\", \"Idaho\"), rownames(state.x77)) left.side <- match(c(\"Wyoming\", \"Iowa\", \"MN\", \"Connecticut\"), rownames(state.x77)) label.offset <- rep(0.3, nrow(state.x77)) label.offset[match(c(\"Colorado\", \"Kansas\", \"Idaho\"), rownames(state.x77))] <- c(0.8, 0.5, 0.8) label.side <- rep(\"bottom\", nrow(state.x77)) label.side[above] <- \"top\" label.side[right.side] <- \"right\" label.side[left.side] <- \"left\" biplot (state.x77, scaled=TRUE) |> PCA() |>   samples (label=TRUE, label.cex=0.6, label.side=label.side, label.offset=label.offset) |>   plot() biplot(state.x77, scaled = TRUE) |> PCA() |>    samples (label = \"ggrepel\") |> plot() #> Warning: Use of `df$x` is discouraged. #> ℹ Use `x` instead. #> Warning: Use of `df$y` is discouraged. #> ℹ Use `y` instead. #> Warning: Use of `df$z` is discouraged. #> ℹ Use `z` instead. #> Warning: Use of `df$x` is discouraged. #> ℹ Use `x` instead. #> Warning: Use of `df$y` is discouraged. #> ℹ Use `y` instead. #> Warning: Use of `df$z` is discouraged. #> ℹ Use `z` instead. #> Warning: Use of `df$x` is discouraged. #> ℹ Use `x` instead. #> Warning: Use of `df$y` is discouraged. #> ℹ Use `y` instead. #> Warning: Use of `df$z` is discouraged. #> ℹ Use `z` instead. #> Warning: Use of `df$x` is discouraged. #> ℹ Use `x` instead. #> Warning: Use of `df$y` is discouraged. #> ℹ Use `y` instead. #> Warning: Use of `df$z` is discouraged. #> ℹ Use `z` instead. #> Warning: Use of `df$x` is discouraged. #> ℹ Use `x` instead. #> Warning: Use of `df$y` is discouraged. #> ℹ Use `y` instead. #> Warning: Use of `df$z` is discouraged. #> ℹ Use `z` instead. #> Warning: Use of `df$x` is discouraged. #> ℹ Use `x` instead. #> Warning: Use of `df$y` is discouraged. #> ℹ Use `y` instead. #> Warning: Use of `df$z` is discouraged. #> ℹ Use `z` instead. biplot(state.x77, scaled = TRUE) |> PCA() |>    samples (label = \"TRUE\",label.name=strtrim(row.names(state.x77),3)) |> plot() gas.data <- matrix (UKgas, ncol=4, byrow=T) colnames(gas.data) <- paste(\"Q\", 1:4, sep=\"\") rownames(gas.data) <- 60:86 even.labels <- rep(c(TRUE, FALSE), 14) biplot(gas.data, scaled = TRUE) |> PCA() |>    samples (connected = TRUE, connect.col=\"red\", label = even.labels, label.cex=0.6) |>    plot()"},{"path":"/articles/biplotEZ.html","id":"the-function-means","dir":"Articles","previous_headings":"","what":"The function means()","title":"biplotEZ","text":"function means() allow changing aesthetics group means specified group.aes, argument show.class.means = TRUE call function PCA(). functionality means() mirrors samples() discussed detail vignette Class separation class means prominent PCA biplots.","code":""},{"path":"/articles/biplotEZ.html","id":"the-function-axes","dir":"Articles","previous_headings":"","what":"The function axes()","title":"biplotEZ","text":"Similar samples() function, function allows changing aestethics biplot axes. first argument axes() object class biplot. X.names argument typically specified user, required function allow specifying axes display argument, either speficying column numbers column names. arguments col, lwd lty pertains axes can specified either scaler value (recycled) vector length equal . construct PCA biplot rock data, displaying axes peri shape different colours two axes, different line widths line type 2, need following code:  following four arguments deal axis labels. argument label.dir based graphics parameter las allows labels either orthogonal axis direction (Orthog), horisontal (Hor) parallel plot Paral. argument label.line fulfills role line argument mtext() determine margin line (far plot) label placed label.col label.cex self-explanatory defaults axis colour size 0.75. Note illustration code colour vector three components, recycling applied.  function pretty() finds ‘nice’ tick marks value specified argument ticks determine desired number tick marks, although observed number different. tick.* arguments similar naming counterparts par() text(). Since tick labels important follow direction increasing values axes, setting tick.label = FALSE remove tick marks completely, limits labels smallest largest value visible plot. user like specify alternative names axes, can done argument ax.names.","code":"biplot(rock, scaled = TRUE) |> PCA() |>                                 axes(which = c(\"shape\",\"peri\"),                                      col=c(\"lightskyblue\",\"slategrey\"),                                     lwd = c(1,2), lty=2) |>                                plot() biplot(rock, scaled = TRUE) |> PCA() |>                                 axes(col=c(\"lightskyblue\",\"slategrey\",\"blue\"),                                     label.dir=\"Hor\", label.line=c(0,0.5,1,1.5)) |>                                plot() biplot(rock, scaled = TRUE) |> PCA() |>                                 axes(label.dir=\"Paral\",                                     ticks = c(3, 5, 5, 10), tick.label=c(F, F, T, T),                                     ax.names = c(\"area\", \"perimeter\", \"shape\",                                                   \"permeability in milli-Darcies\")) |>                                plot()"},{"path":"/articles/biplotEZ.html","id":"the-functions-fit-measures-and-summary","dir":"Articles","previous_headings":"","what":"The functions fit.measures() and summary()","title":"biplotEZ","text":"print method provides short summary biplot object. output summary() similar. Additional information biplot object added fit.measures() function.","code":"obj <- biplot(airquality) #> Warning in biplot(airquality): 42 rows deleted due to missing values   obj #> Object of class biplot, based on 111 samples and 6 variables. #> 6 numeric variables. #>  #> The following 42 sample-rows where removed due to missing values #>  5 6 10 11 25 26 27 32 33 34 35 36 37 39 42 43 45 46 52 53 54 55 56 57 58 59 60 61 65 72 75 83 84 96 97 98 102 103 107 115 119 150 summary(obj) #> Object of class biplot, based on 111 samples and 6 variables. #> 6 numeric variables. #>  #> The following 42 sample-rows were removed due to missing values #>  5 6 10 11 25 26 27 32 33 34 35 36 37 39 42 43 45 46 52 53 54 55 56 57 58 59 60 61 65 72 75 83 84 96 97 98 102 103 107 115 119 150"},{"path":"/articles/biplotEZ.html","id":"quality-of-approximation","dir":"Articles","previous_headings":"The functions fit.measures() and summary()","what":"Quality of approximation","title":"biplotEZ","text":"start identity 𝐗=𝐗̂+𝐗−𝐗̂ \\mathbf{X} = \\mathbf{\\hat{X}} + \\mathbf{X-\\hat{X}}  decomposes 𝐗\\mathbf{X} fitted part 𝐗̂=𝐔𝐉𝐃𝐉𝐕′=𝐔𝐃𝐉2(𝐕𝐉2)′=𝐔𝐃𝐕′𝐕𝐉2(𝐕𝐉2)′=𝐗𝐕𝐉𝐕′ \\mathbf{\\hat{X}} = \\mathbf{UJDJV'} = \\mathbf{UDJ}_2(\\mathbf{VJ}_2)' = \\mathbf{UDV'VJ}_2(\\mathbf{VJ}_2)' = \\mathbf{XVJV'} residual part 𝐗−𝐗̂\\mathbf{X-\\hat{X}}. lack fit quantified quantity minimising ∥𝐗̂−𝐗∥2 \\| \\hat{\\mathbf{X}}-\\mathbf{X} \\|^2  orthogonal decomposition ∥𝐗∥2=∥𝐗̂∥2+∥𝐗̂−𝐗∥2. \\|\\mathbf{X}\\|^2 = \\|\\hat{\\mathbf{X}}\\|^2 + \\|\\hat{\\mathbf{X}}-\\mathbf{X} \\|^2.  overall quality fit therefore defined quality=∥𝐗̂∥2∥𝐗∥2=tr(𝐗𝐗′)tr(𝐗̂𝐗̂′)=tr(𝐗′𝐗)tr(𝐗̂′𝐗̂)=tr(𝐕𝐃2𝐕′)tr(𝐕𝐃2𝐉𝐕′). quality = \\frac{\\|\\hat{\\mathbf{X}}\\|^2}{\\|\\mathbf{X}\\|^2} = \\frac{tr(\\mathbf{XX}')}{tr(\\mathbf{\\hat{X}\\hat{X}'})} = \\frac{tr(\\mathbf{X'X})}{tr(\\mathbf{\\hat{X}'\\hat{X}})} = \\frac{tr(\\mathbf{VD}^2\\mathbf{V'})}{tr(\\mathbf{VD}^2\\mathbf{JV'})}.  biplotEZ overall quality displayed percentage: quality=d12+d22d12+…+dp2100%. quality =\\frac{d_1^2+d_2^2}{d_1^2+\\dots+d_p^2}100\\%.","code":""},{"path":"/articles/biplotEZ.html","id":"adequacy-of-representation-of-the-variables","dir":"Articles","previous_headings":"The functions fit.measures() and summary()","what":"Adequacy of representation of the variables","title":"biplotEZ","text":"Researchers construct PCA biplot representing columns arrows (vectors) often fit biplot unit circle. rationale perfect representation variable unit length length arrow vs distance unit circle represent adequacy variable represented. fitting biplot calibrated axes, much easier read values variables, adequacy values can still computed diag(𝐕r𝐕r′)diag(𝐕𝐕′)=diag(𝐕r𝐕r′) \\frac{diag(\\mathbf{V}_r\\mathbf{V}_r')}{diag(\\mathbf{VV}')}= diag(\\mathbf{V}_r\\mathbf{V}_r') due orthogonality matrix 𝐕:p×p\\mathbf{V}:p \\times p.","code":""},{"path":"/articles/biplotEZ.html","id":"predictivities","dir":"Articles","previous_headings":"The functions fit.measures() and summary()","what":"Predictivities","title":"biplotEZ","text":"predictivity provides measure well original values recovered biplot. element well represented predictivity close one, indicating sample variable values prediction close observed values. element poorly represented, predicted values different original values predictivity value close zero.","code":""},{"path":"/articles/biplotEZ.html","id":"axis-predictivity","dir":"Articles","previous_headings":"The functions fit.measures() and summary() > Predictivities","what":"Axis predictivity","title":"biplotEZ","text":"predictivity pp variables computed elementwise ratios axispredictivity=diag(𝐗̂′𝐗̂)diag(𝐗′𝐗) axis \\: predictivity = \\frac{diag(\\mathbf{\\hat{X}'\\hat{X}})}{diag(\\mathbf{X'X})}","code":""},{"path":"/articles/biplotEZ.html","id":"sample-predictivity","dir":"Articles","previous_headings":"The functions fit.measures() and summary() > Predictivities","what":"Sample predictivity","title":"biplotEZ","text":"predictivity nn samples computed elementwise ratios samplepredictivity=diag(𝐗̂𝐗̂′)diag(𝐗𝐗′) sample \\: predictivity = \\frac{diag(\\mathbf{\\hat{X}\\hat{X}'})}{diag(\\mathbf{XX'})}  calling function fit.measures() quantities computed specific biplot object. values displayed summary() function.  necessary call plot() function obtain fit measures, one biplot methods, PCA() required, since measures differ depending type biplot constructed. suppress output fit measures, instance interest axis predictivity many samples result long output, can set call summary(). default measures set TRUE. axis predictivities sample predictivities can represented biplot two ways: setting either axis.predictivity / sample.predictivity TRUE, applies shading axes shrinking samples according predictivity values.  Comparing plot summary output clear variables Population Frost well represented can expected predictions variables less accurate. Furthermore, samples located close origin well represented located towards bottom right. typically case samples nearly orthogonal PCA plane projected close origin due orthogonality, poorly represented.","code":"obj <- biplot(state.x77, scale = TRUE) |> PCA() |>    fit.measures() |> plot() summary (obj) #> Object of class biplot, based on 50 samples and 8 variables. #> 8 numeric variables. #>  #> Quality of fit in 2 dimension(s) = 65.4%  #> Adequacy of variables in 2 dimension(s): #> Population     Income Illiteracy   Life Exp     Murder    HS Grad      Frost  #>  0.1848016  0.3586383  0.2215201  0.1760908  0.2915819  0.2696184  0.1513317  #>       Area  #>  0.3464170  #> Axis predictivity in 2 dimension(s): #> Population     Income Illiteracy   Life Exp     Murder    HS Grad      Frost  #>  0.3330216  0.7609185  0.7917091  0.6206172  0.8640485  0.7947530  0.4982299  #>       Area  #>  0.5675169  #> Sample predictivity in 2 dimension(s): #>        Alabama         Alaska        Arizona       Arkansas     California  #>     0.95126856     0.61373919     0.26327256     0.86308539     0.57062754  #>       Colorado    Connecticut       Delaware        Florida        Georgia  #>     0.83358779     0.59003002     0.18284712     0.49725356     0.94461052  #>         Hawaii          Idaho       Illinois        Indiana           Iowa  #>     0.01984127     0.70337480     0.33405270     0.30082350     0.96367113  #>         Kansas       Kentucky      Louisiana          Maine       Maryland  #>     0.86554676     0.87758262     0.93717163     0.66553856     0.06362508  #>             MA       Michigan             MN    Mississippi       Missouri  #>     0.47386267     0.26050188     0.89207404     0.93073099     0.11321791  #>        Montana       Nebraska         Nevada  New Hampshire             NJ  #>     0.44603781     0.93570441     0.22393876     0.87499561     0.15979033  #>     New Mexico       New York North Carolina   North Dakota           Ohio  #>     0.29304145     0.40609063     0.93004841     0.69011551     0.08810179  #>       Oklahoma         Oregon             PA   Rhode Island South Carolina  #>     0.37520943     0.36273523     0.02176080     0.58625617     0.93187284  #>   South Dakota      Tennessee          Texas           Utah        Vermont  #>     0.83804787     0.96006357     0.73748654     0.66209083     0.80365601  #>       Virginia     Washington  West Virginia      Wisconsin        Wyoming  #>     0.58564755     0.33877314     0.85231725     0.82519206     0.42499724 obj <- biplot(state.x77, scale = TRUE) |> PCA() |>    fit.measures()  summary (obj, adequacy = FALSE, sample.predictivity = FALSE) #> Object of class biplot, based on 50 samples and 8 variables. #> 8 numeric variables. #>  #> Quality of fit in 2 dimension(s) = 65.4%  #> Axis predictivity in 2 dimension(s): #> Population     Income Illiteracy   Life Exp     Murder    HS Grad      Frost  #>  0.3330216  0.7609185  0.7917091  0.6206172  0.8640485  0.7947530  0.4982299  #>       Area  #>  0.5675169 biplot(state.x77, scale = TRUE) |> PCA(group.aes = state.region) |>   samples (which = \"South\", pch = 15, label = T, label.cex=0.5) |>    axes (col = \"black\") |>   fit.measures() |> plot (sample.predictivity = TRUE,                           axis.predictivity = TRUE)"},{"path":"/articles/biplotEZ.html","id":"axes-represented-as-vectors","dir":"Articles","previous_headings":"The functions fit.measures() and summary() > Predictivities","what":"Axes represented as vectors","title":"biplotEZ","text":"user wishes view variables arrows biplot give information adequacy variables, can done axes() function, setting vectors = TRUE unit.circle = TRUE. adequacy value given squared length arrow.","code":"biplot(state.x77, scale = TRUE) |> PCA(group.aes = state.region) |>   axes (vectors = TRUE,unit.circle = TRUE) |>   fit.measures() |> plot ()"},{"path":[]},{"path":"/articles/biplotEZ_enhancements.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"biplotEZ enhancements","text":"enhancing biplot, various additional features can significantly improve interpretability utility. Introducing alpha bags helps visualize central region variability within group, providing robust measure data concentration. Adding confidence ellipses can illustrate spread correlation data points, making underlying structure evident. Including capability add new samples axes facilitates dynamic exploration comparison data sets. option predict samples means allows projection data points onto biplot display, aiding predictive analysis. Moreover, tools reflecting rotating biplot display can enhance visual representation aligning plot user’s analytical needs, offering clearer perspective relationships dimensions within data.","code":""},{"path":"/articles/biplotEZ_enhancements.html","id":"the-function-alpha-bags","dir":"Articles","previous_headings":"","what":"The function alpha.bags()","title":"biplotEZ enhancements","text":"α\\alpha-bag encloses α100%\\alpha100\\% inner data points cloud points. based concept halfspace location depth defined Tukey (1975). Rousseeuw, Ruts, Tukey (1999) generalised boxplot two-dimensional bagplot box replaced bag containing inner 50%50\\% observations. Gower, Lubbe, Roux (2011) replaces 50%50\\%-bag contour general α100%\\alpha100\\% contour referred α\\alpha-bag. number samples biplot larger, becomes difficult isolate individual observations. Often, grouping variable present, interest much individual samples, rather location spread groups. plot , enclose century’s number sunspots 95%95\\%-bag months used 12 different variables year (sample point). Note legend displays α\\alpha-bags samples = FALSE left default. can displayed, since α\\alpha-bags’ colour defaults colour sample points, necessary .  default one 95%95\\%-bag constructed group. general, alpha.bags() function accepts object class biplot first argument. next argument alpha can specified single value, construct series α\\alpha-bags group, alpha can vector argument. argument specifies groups fitted α\\alpha-bags. default opacity argument set 0.250.25, setting opacity = 0 removes fill α\\alpha-bags.  biplot , colours recycled alpha value. specify differential colours, can use col argument similarly lty lwd arguments. Since mostly interested location overlap clouds points can remove indivdiual samples setting samples (= NULL). default colours still used α\\alpha-bags chose specify different line types different α\\alpha values. opacity set 0.050.05 plots lighter shade inside α\\alpha-bags.  completely custom combination α\\alpha-bags, rely recycling specify arguments alpha, , col, lty, lwd vector. Since calculation halfspace location depth computationally intensive, random sample size 2500 chosen group construct α\\alpha-bag. sample size can changed argument max. Setting trace = FALSE suppress message “Computing α\\alpha” -bag groupX.”  function alpha.bags provides option plot samples sit outside α\\alpha-bags. done setting argument outlying=TRUE. Note argument may overwritten outlying set TRUE. happens particular samples() function differs alpha_bags() function.","code":"sunspots <- matrix (sunspot.month[1:(264*12)], ncol = 12, byrow = TRUE) years <- 1749:2012 rownames(sunspots) <- years colnames(sunspots) <- c(\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\",                         \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\") century <-paste(floor((years-1)/100)+1, ifelse (floor((years-1)/100)+1<21, \"th\",\"st\"), sep = \"-\") biplot(sunspots, group.aes=century) |> PCA() |>         axes (label.dir = \"Hor\", label.line = c(0.8, rep(0,10), 0.8)) |>         alpha.bags () |>          legend.type(bags = TRUE)  |> plot() #> Computing 0.95 -bag for 18-th  #> Computing 0.95 -bag for 19-th  #> Computing 0.95 -bag for 20-th  #> Computing 0.95 -bag for 21-st biplot(sunspots, group.aes=century) |> PCA() |>         axes (label.dir = \"Hor\", label.line = c(0.8, rep(0,10), 0.8)) |>         alpha.bags (alpha = c(0.9, 0.95, 0.99), which = c(1,4), opacity = 0) |>          legend.type(bags = TRUE)  |> plot() #> Computing 0.9 -bag for 18-th  #> Computing 0.9 -bag for 21-st  #> Computing 0.95 -bag for 18-th  #> Computing 0.95 -bag for 21-st  #> Computing 0.99 -bag for 18-th  #> Computing 0.99 -bag for 21-st biplot(sunspots, group.aes=century) |> PCA() |>         axes (label.dir = \"Hor\", label.line = c(0.8, rep(0,10), 0.8)) |>         samples (which = NULL) |>         alpha.bags (alpha = c(0.9, 0.95, 0.99), lty = c(1,3,5), opacity=0.05) |>          legend.type(bags = TRUE, new = TRUE)  |> plot() #> Computing 0.9 -bag for 18-th  #> Computing 0.9 -bag for 19-th  #> Computing 0.9 -bag for 20-th  #> Computing 0.9 -bag for 21-st  #> Computing 0.95 -bag for 18-th  #> Computing 0.95 -bag for 19-th  #> Computing 0.95 -bag for 20-th  #> Computing 0.95 -bag for 21-st  #> Computing 0.99 -bag for 18-th  #> Computing 0.99 -bag for 19-th  #> Computing 0.99 -bag for 20-th  #> Computing 0.99 -bag for 21-st biplot(sunspots, group.aes=century) |> PCA() |>         axes (label.dir = \"Hor\", label.line = c(0.8, rep(0,10), 0.8)) |>         samples (which = NULL) |>         alpha.bags (alpha = c(   0.9,   0.95,   0.99,             0.5,         0.6,     0.7),                      which = c(     1,      1,      2,               3,           3,      3),                     col   = c(\"brown\", \"red\", \"gold\",  \"deepskyblue2\", \"steelblue3\",\"blue\"),                     lty   = c(     1,      2,     10,               2,           2,      0),                     lwd   = c(     1,      1,      3,               1,           2,      1),                     opacity = 0.1) |> plot() #> Computing 0.9 -bag for 18-th  #> Computing 0.95 -bag for 18-th  #> Computing 0.99 -bag for 19-th  #> Computing 0.5 -bag for 20-th  #> Computing 0.6 -bag for 20-th  #> Computing 0.7 -bag for 20-th biplot(sunspots, group.aes=century) |> PCA() |>         alpha.bags (col   = c(\"brown\", \"red\", \"gold\",\"deepskyblue2\"),                     opacity = 0.1,outlying = TRUE) |> plot() #> Computing 0.95 -bag for 18-th  #> Computing 0.95 -bag for 19-th  #> Computing 0.95 -bag for 20-th  #> Computing 0.95 -bag for 21-st"},{"path":"/articles/biplotEZ_enhancements.html","id":"the-function-ellipses","dir":"Articles","previous_headings":"","what":"The function ellipses()","title":"biplotEZ enhancements","text":"observe random sample pp-variate normal distribution 𝐱‾\\bar{\\mathbf{x}} 𝐒\\mathbf{S} usual unbaised estimates mean vector covariance matrix, (𝐱−𝐱‾)′𝐒−1(𝐱−𝐱‾)=κ2 (\\mathbf{x} - \\bar{\\mathbf{x}})' \\mathbf{S}^{-1} (\\mathbf{x} - \\bar{\\mathbf{x}}) = \\kappa^2 traces ellipsoid pp dimensions. p=2p=2, choosing κ=(χ2,1−α2)12\\kappa = {(\\chi^{2}_{2,1-\\alpha})}^{\\frac{1}{2}} χ2,1−α2\\chi^{2}_{2,1-\\alpha} denotes (1−α)100(1-\\alpha)100-th percentage point χ22\\chi^2_2 distribution results ellipse covering approximately 100α%100\\alpha\\% configuration two-dimensional points. default arguments df = 2 alpha = 0.95, value κ\\kappa 2.4477472.447747 ellipse function constructs ellipse enclose approximately 95%95\\% observations bivariate normal distribution. argument kappa can specified directly, take precedence specification alpha. arguments ellipses() function operates identically corresponding arguments function alpha.bags(). Using α\\alpha-bags, rather ellipses recommended general, since construction ellipses based underlying assumption random sample observed normal distribution.","code":"biplot(sunspots, group.aes=century) |> PCA() |>         axes (label.dir = \"Hor\", label.line = c(0.8, rep(0,10), 0.8)) |>         samples (which = NULL) |>         ellipses (alpha = c(0.9, 0.95), lty = c(1,3,5), opacity = 0.1) |>          legend.type(ellipses = TRUE)  |> plot() #> Computing 2.15 -ellipse for 18-th  #> Computing 2.15 -ellipse for 19-th  #> Computing 2.15 -ellipse for 20-th  #> Computing 2.15 -ellipse for 21-st  #> Computing 2.45 -ellipse for 18-th  #> Computing 2.45 -ellipse for 19-th  #> Computing 2.45 -ellipse for 20-th  #> Computing 2.45 -ellipse for 21-st biplot(sunspots, group.aes=century) |> PCA() |>         axes (label.dir = \"Hor\", label.line = c(0.8, rep(0,10), 0.8)) |>         samples (which = NULL) |>         ellipses (kappa = 1:2, lty = c(1,3,5), opacity = 0.1) |>          legend.type(ellipses = TRUE) |> plot() #> Computing 1 -ellipse for 18-th  #> Computing 1 -ellipse for 19-th  #> Computing 1 -ellipse for 20-th  #> Computing 1 -ellipse for 21-st  #> Computing 2 -ellipse for 18-th  #> Computing 2 -ellipse for 19-th  #> Computing 2 -ellipse for 20-th  #> Computing 2 -ellipse for 21-st"},{"path":"/articles/biplotEZ_enhancements.html","id":"the-function-density2d","dir":"Articles","previous_headings":"","what":"The function density2D()","title":"biplotEZ enhancements","text":"function constructing two-dimensional PCA biplots top density plot two-dimensional PCA approximation input matrix. R function kde2d described Venables Ripley (2002) available package MASS used perform two-dimensional kernel density estimation axis-aligned bivariate normal kernel, evaluated square grid. function plots density group (specified argument ) data. following case, second group’s density plotted contours=TRUE. vector least two components specified col argument display colours density response surface. cuts-1 colours interpolated components col. default c(\"green\", \"yellow\", \"red\").  case, vector group.aes specified, samples form one group.","code":"biplot(state.x77,group.aes = state.region,scaled = TRUE) |> PCA() |>   density2D(which=2,col=c(\"white\",\"purple\",\"blue\",\"cyan\"),contours=TRUE) |> plot() biplot(state.x77,scaled = TRUE) |> PCA() |> samples(which=NULL) |>   density2D(which=1,col=c(\"white\",\"purple\",\"blue\",\"cyan\"),contours = TRUE,cuts = 20) |> plot()"},{"path":"/articles/biplotEZ_enhancements.html","id":"the-functions-interpolate-with-newsamples-and-newaxes","dir":"Articles","previous_headings":"","what":"The functions interpolate() with newsamples() and newaxes()","title":"biplotEZ enhancements","text":"process interpolation described Gower Hand (1996) process finding coordinates pp-dimensional sample lower dimensional biplot space. PCA showed section 1 biplotEZ vignette sample points represented 𝐆=𝐔𝐃𝐉2\\mathbf{G}=\\mathbf{UDJ}_2 can written 𝐆=𝐔𝐃𝐕′𝐕𝐉2=𝐗𝐕𝐉2\\mathbf{G}=\\mathbf{UDV'VJ}_2=\\mathbf{XVJ}_2. Finding position new sample 𝐱*:p×1\\mathbf{x}^*:p \\times 1 make use transformation 2D coordinates given 𝐳*′:2×1=𝐱*′𝐕𝐉2{\\mathbf{z}^*}':2 \\times 1 ={\\mathbf{x}^*}' \\mathbf{VJ}_2. Similarly, position new variable 𝐱*:n×1\\mathbf{x}^*:n \\times 1 added using regression method assumes 𝐱*\\mathbf{x}^* approximately linear function 𝐱*=𝐗𝐕r𝐛r\\mathbf{x}^* = \\mathbf{XV}_r\\mathbf{b}_r solution 𝐛̂r:r×1=(𝐕′r𝐗′𝐗𝐕r)−1𝐕r𝐗′𝐱*\\hat{\\mathbf{b}}_r :r \\times 1 = (\\mathbf{V}'_r\\mathbf{X}'\\mathbf{XV}_r)^{-1}\\mathbf{V}_r\\mathbf{X}'\\mathbf{x}^*. Adding samples variables plot facilitated function interpolate(). Note samples variables interpolated contribute construction biplot. reason Greenacre (2017) term supplementary points axes. function interpolate() accepts matrix data frame containing samples variables interpolated. argument newdata containing samples interpolated needs similar structure data set sent biplot(). biplot() received data frame, newdata can either another data frame matrix containing subset numerical variables. Similarly, argument newvariable containing new variables interpolated needs number samples data sent biplot(). Suppose construct PCA biplot first 4040 samples data set rock 88 new samples interpolated call :  function newsamples() operates similar samples, allowing changes aesthetics interpolated new samples. argument newsamples() since assumed samples interpolated represented biplot. arguments vectors length similar number samples newdata. change colour interpolated samples add labels, following call used:  Suppose constructing PCA biplot using three variables rock data, interpolating variable.  can change aesthetics new variables newaxes() function operates similarly axes() function.  function interpolate() also work new samples new variables need interpolated time. example:  Notice newdata number variables data sent biplot() newvariable number samples data sent biplot().","code":"biplot(rock[1:40,], scale = TRUE) |> PCA() |>    interpolate (newdata=rock[41:48,]) |> plot() biplot(rock[1:40,], scale = TRUE) |> PCA() |>    interpolate (rock[41:48,]) |>   newsamples (label = TRUE, label.side = \"top\", col = rainbow(10)) |> plot() biplot(rock[,c(1,2,4)], scale = TRUE) |> PCA() |>    interpolate (newvariable =rock[,3]) |> plot() biplot(rock[,c(1,2,4)], scale = TRUE) |> PCA() |>    interpolate (newvariable =rock[,3]) |>    newaxes(col=\"red\",ticks = 50,X.new.names = \"shape\") |> plot() biplot(rock[1:40,c(1,2,4)], scale = TRUE) |> PCA() |>    interpolate (newdata=rock[41:48,c(1,2,4)],newvariable =rock[1:40,3]) |>    newaxes(col=\"red\",ticks = 100,X.new.names = \"shape\") |> plot()"},{"path":"/articles/biplotEZ_enhancements.html","id":"the-function-prediction","dir":"Articles","previous_headings":"","what":"The function prediction()","title":"biplotEZ enhancements","text":"add prediction sample points biplot, function prediction() used.  addition predictions computed can accessed summary.method. arguments prediction() predict.means also () predict group means indicate axes’ predictions shown biplot. specifying predict.samples = TRUE /predict.means = TRUE samples /means predicted. Alternatively either arguments accepts vector indicating samples /means predict. example , mean values Central West regions predicted.","code":"out <- biplot(rock, scale = TRUE) |> PCA() |>           prediction (predict.samples = TRUE) |> plot() summary(out) #> Object of class biplot, based on 48 samples and 4 variables. #> 4 numeric variables. #>  #> Sample predictions #>         area      peri      shape        perm #> 1   5182.518 2694.6678 0.08624348   17.426253 #> 2   7691.949 3526.4942 0.13514234   35.517473 #> 3   8318.033 3628.6997 0.16177613   99.694598 #> 4   7636.831 3630.8908 0.11725845  -34.364599 #> 5   8084.856 3781.5005 0.12570117  -32.323140 #> 6   8499.105 3765.0371 0.15484655   57.771249 #> 7   9738.891 4180.1532 0.17843607   64.357324 #> 8   8877.364 3954.7565 0.15340118   24.056153 #> 9   8718.501 3605.5323 0.19094566  190.899483 #> 10  6776.004 2972.9886 0.15153800  170.463202 #> 11  9517.287 4203.7977 0.16081144    7.756551 #> 12  8667.626 3841.4265 0.15531722   47.357938 #> 13 10542.328 4258.1501 0.21989947  176.826997 #> 14  9102.060 3644.4083 0.21051537  243.662966 #> 15  9351.922 4027.1591 0.17428339   75.571235 #> 16  8590.817 3776.8963 0.15917449   68.935190 #> 17 11002.857 4604.0870 0.20238688   70.663421 #> 18 11465.727 4562.1556 0.23817832  184.664030 #> 19 11713.492 4918.0115 0.20549573   31.397809 #> 20  9794.836 4371.1960 0.15588772  -32.950729 #> 21  7486.756 3459.7842 0.13096481   33.297702 #> 22 11970.162 4545.5777 0.27319335  292.407085 #> 23 12048.397 4816.3066 0.24117196  154.306887 #> 24  8161.391 3531.7628 0.16489230  124.063184 #> 25  6473.046 1887.1108 0.28067750  726.488443 #> 26  3937.319 1270.4047 0.20059243  581.415341 #> 27  6361.245 2198.9634 0.23068527  528.041307 #> 28  4364.754 1641.8821 0.17743170  454.331807 #> 29  5961.529 1813.4043 0.25757496  668.505918 #> 30  5419.192 1075.2405 0.32352672  980.895692 #> 31  6687.830 1728.1793 0.31639877  858.392956 #> 32  6862.484 1912.2039 0.30251759  788.205529 #> 33  5072.364 1506.6448 0.24189571  668.903853 #> 34  5330.680 1039.1725 0.32272399  984.068789 #> 35  5510.961 1842.2520 0.22437503  564.315264 #> 36  6834.394 1864.9721 0.30716675  809.483177 #> 37  3788.048 1612.7808 0.14398515  358.372419 #> 38  3912.089  510.0085 0.30315670 1007.222092 #> 39  3569.066 1564.6150 0.13637128  342.959576 #> 40  5655.233 2040.8001 0.20653151  479.977300 #> 41  4984.153  680.9452 0.34932075 1119.421832 #> 42  1341.442 -373.1439 0.25731781 1006.268880 #> 43  6519.731  738.7171 0.44107961 1386.097805 #> 44  8964.500 1961.9907 0.43213873 1169.846628 #> 45  3589.848 1128.4355 0.19749274  594.085244 #> 46  2533.721  417.0546 0.22642373  791.127217 #> 47  4876.168 1721.4564 0.19972344  508.970410 #> 48  7521.495 2660.6426 0.24273124  492.744256 out <- biplot(state.x77, scale = TRUE) |> PCA(group.aes = state.region, show.class.means = TRUE) |>           prediction (predict.means = 3:4, which = c(\"Income\",\"Murder\",\"Population\")) |> plot() summary(out) #> Object of class biplot, based on 50 samples and 8 variables. #> 8 numeric variables. #>  #> Class mean predictions #>                 Income   Murder Population #> North Central 4611.672 5.108174   3211.604 #> West          4862.927 6.865661   5268.183"},{"path":"/articles/biplotEZ_enhancements.html","id":"the-functions-reflect-and-rotate","dir":"Articles","previous_headings":"","what":"The functions reflect() and rotate()","title":"biplotEZ enhancements","text":"function reflect() allows user reflect biplot display x-axis y-axis . argument reflect.axis offers options \"FALSE\",\"x\",\"y\",\"xy\". biplot reflected x-axis.  biplot reflected y-axis.  function rotate() allows user rotate biplot display certain value degrees. default 0 positive value results anti-clockwise rotation negative value clockwise rotation. example rotate.degrees set 100 degrees, biplot rotated 100 degrees anticlockwise direction.","code":"biplot(state.x77, scale = TRUE) |> PCA(group.aes = state.division) |> reflect(\"x\") |> plot() biplot(state.x77, scale = TRUE) |> PCA(group.aes = state.division) |> reflect(\"y\") |> plot() biplot(state.x77, scale = TRUE) |> PCA(group.aes = state.division) |> rotate(100) |> plot()"},{"path":"/articles/biplotEZ_enhancements.html","id":"zooming-in-on-the-biplot-with-zoom-true-in-plot","dir":"Articles","previous_headings":"","what":"Zooming in on the biplot with zoom = TRUE in plot()","title":"biplotEZ enhancements","text":"plot() function built-functionality zoom plot. done locator() function alters xlim ylim paramaters plot. implementation opens new graphics window promting locator function. illustrated : final plot rendered :","code":"biplot(state.x77,scaled = TRUE) |>    PCA() |>    samples(which=NULL) |>   density2D(which=1,col=c(\"white\",\"purple\",\"blue\",\"cyan\"),contours = TRUE,cuts = 20) |>    plot(zoom=TRUE)"},{"path":"/articles/biplotEZ_enhancements.html","id":"the-function-translate_axes","dir":"Articles","previous_headings":"","what":"The function translate_axes()","title":"biplotEZ enhancements","text":"function implements algorithm TDAbiplot() bipl5 package. allows translate axes plot center boundary using orthogonal parallel translation. axes can translated manually setting distance distance argument.","code":"biplot(state.x77,scaled=TRUE) |>    PCA() |>   translate_axes(delta = 0.02) |>   plot(exp.factor=3)"},{"path":"/articles/Biplots_in_1D.html","id":"one-dimensional-pca-biplot","dir":"Articles","previous_headings":"","what":"One-dimensional PCA biplot","title":"Biplots in 1D","text":"One-dimensional PCA biplots obtained specifying dim.biplot = 1 call PCA(). one-dimensional representation data displayed colour points top horizontal line. accompanying calibrated variable axes displayed horizontal lines . variable name displayed side variable increases.","code":"biplot(iris) |> PCA(group.aes = iris$Species,dim.biplot = 1)  |> plot()"},{"path":"/articles/Biplots_in_1D.html","id":"one-dimensional-cva-biplot","dir":"Articles","previous_headings":"","what":"One-dimensional CVA biplot","title":"Biplots in 1D","text":"Similarly CVA 1d biplot, dim.biplot = 1 specified call CVA(). one-dimensioal CVA biplot displays one-dimensional linear combination maximises class variance, relative within class variance.","code":"biplot(iris) |> CVA(classes = iris$Species,dim.biplot = 1) |>   axes(col=\"black\") |> plot()"},{"path":"/articles/Biplots_in_1D.html","id":"classification-using-classify","dir":"Articles","previous_headings":"One-dimensional CVA biplot","what":"Classification using classify()","title":"Biplots in 1D","text":"CVA models can employed classifier. New observations classified nearest class mean, means indicated shaded squares scatter line. classification regions displayed scatter line using classify().  print() function provides misclassification rate, well confusion matrix, CVA classifier applied training data.","code":"bp <- biplot(iris) |> CVA(classes = iris[,5],dim.biplot = 1)|>   axes(col=\"black\") |>    classify(borders = TRUE,opacity = 1)|>plot() print(bp) #> Object of class biplot, based on 150 samples and 5 variables. #> 4 numeric variables. #> 1 categorical variable. #> 3 classes: setosa versicolor virginica  #>  #> Misclassification rate is  0.02  #>  #> Confusion matrix  #>             Reference #> Prediction   setosa versicolor virginica #>   setosa         50          0         0 #>   versicolor      0         48         2 #>   virginica       0          1        49"},{"path":"/articles/Biplots_in_1D.html","id":"one-dimensional-ca-biplot","dir":"Articles","previous_headings":"","what":"One-dimensional CA biplot","title":"Biplots in 1D","text":"Similarly CA 1d biplot, dim.biplot = 1 specified call CA(). one-dimensional biplot constructed first columns 𝐔𝚲𝛄\\mathbf{U\\Lambda^\\gamma} $&\\mathbf{V\\Lambda^{1-\\gamma}}$. Consider HairEyeColor example discussed CA biplotEZ:","code":"biplot(HairEyeColor[,,2], center = FALSE) |> CA(variant = \"Princ\",    dim.biplot=1, lambda.scal = T) |> plot()"},{"path":"/articles/Biplots_in_1D.html","id":"the-function-interpolate","dir":"Articles","previous_headings":"","what":"The function interpolate()","title":"Biplots in 1D","text":"interpolate() allows new observations axes added biplot.","code":""},{"path":"/articles/Biplots_in_1D.html","id":"the-function-newsamples","dir":"Articles","previous_headings":"The function interpolate()","what":"The function newsamples()","title":"Biplots in 1D","text":"process adding new samples biplot, called interpolation utilises functions interpolate() newsamples(). functions work way call two-dimensional biplot. function interpolate() accepts argument newdata specify matrix data frame containing new samples interpolated. function newsamples() operates way samples() user can specify aesthetics interpolated samples.","code":"biplot(iris[c(1:50,101:150),1:4])|> PCA(dim.biplot = 1) |> axes(col=\"black\") |>    interpolate(newdata = iris[51:100,1:4]) |> newsamples(col=\"purple\") |> plot()"},{"path":"/articles/Biplots_in_1D.html","id":"the-function-newaxes","dir":"Articles","previous_headings":"The function interpolate()","what":"The function newaxes()","title":"Biplots in 1D","text":"interpolate new variables biplot, function interpolate() newaxes() called. function interpolate() accepts argument newvariable specify matrix data frame number rows data specified biplot() containing new variables interpolated. function newaxes() allows user specify aesthetics interpolated variables.","code":"biplot(iris[,1:3])|> PCA(dim.biplot = 1) |> axes(col=\"black\") |>    interpolate(newvariable = iris[,4]) |>    newaxes(col=\"darkred\",X.new.names = \"Petal.Width\") |> plot()"},{"path":[]},{"path":"/articles/Biplots_in_1D.html","id":"predicting-samples","dir":"Articles","previous_headings":"The function prediction()","what":"Predicting Samples","title":"Biplots in 1D","text":"add prediction samples biplot, prediction() function used. predict.samples argument takes vector indicating either row numbers samples predict set TRUE indicating predict samples. example , predictions samples 100 150 shown. aesthetics display predictions arguments axes() function: predict.col predict.lwd.","code":"biplot(iris) |>    PCA(group.aes = iris$Species,dim.biplot = 1,show.class.means = TRUE) |>    axes(col=\"black\",predict.col = \"darkred\") |>    prediction(predict.samples=100:150) |> plot()"},{"path":"/articles/Biplots_in_1D.html","id":"predicting-group-means","dir":"Articles","previous_headings":"The function prediction()","what":"Predicting Group Means","title":"Biplots in 1D","text":"Similarly, add prediction group means, function prediction() used. argument predict.means takes vector specifying group means predict. example , first group means predicted. Important note argument show.class.means must set TRUE PCA() function.","code":"biplot(iris) |>    PCA(group.aes = iris$Species,dim.biplot = 1,show.class.means = TRUE) |>    axes(col=\"black\",predict.col = \"darkred\") |> means(label=TRUE,which=1:3)|>   prediction(predict.means = 1) |> plot()"},{"path":"/articles/Biplots_in_1D.html","id":"ellipses-and-alpha-bags","dir":"Articles","previous_headings":"","what":"Ellipses and Alpha bags","title":"Biplots in 1D","text":"Ellipses added 1d biplot using ellipses() function works way 2d biplot. one dimension concentration ellipses simply confidence interval. concentration interval indicated using rectangles spanning range interval.  one-dimensional representation Alpha bag simply empirical interval. empirical interval indicated using rectangles spanning range interval.","code":"biplot(iris) |> PCA(group.aes = iris[,5],dim.biplot = 1) |>    axes(col=\"black\") |>    ellipses() |> plot() #> Computing 1.96 -ellipse for setosa  #> Computing 1.96 -ellipse for versicolor  #> Computing 1.96 -ellipse for virginica biplot(iris) |> PCA(group.aes = iris[,5],dim.biplot = 1) |>    axes(col=\"black\") |>    alpha.bags(alpha = 0.7) |> plot() #> Computing 0.7 -bag for setosa  #> Computing 0.7 -bag for versicolor  #> Computing 0.7 -bag for virginica"},{"path":"/articles/Biplots_in_1D.html","id":"the-function-density1d","dir":"Articles","previous_headings":"","what":"The function density1D()","title":"Biplots in 1D","text":"Overlapping points make distribution points scatter line difficult identify. density1D() uses kernel density estimation (KDE), adds density plot one-dimensional biplot.  KDE may smooth display distribution data. changing parameters KDE, able address issue. bandwidth kernel used density1D() controlled arguments h= kernel=, respectively. bandwidth h can take positive value, see ?stats::density detail. kernel can take kernel supported stats::density().  high concentration observations right plot now becomes evident. explore distributions observations, may want explore density groupings data. , simply specify group.aes= argument PCA(). density three species iris displayed.  display density certain groups, use = argument density1D().","code":"biplot(iris) |> PCA(dim.biplot = 1) |>    axes(col=\"black\") |>   density1D() |> plot() biplot(iris) |> PCA(dim.biplot = 1) |> axes(col='black') |>   density1D(h = 0.5 ,kernel = \"triangular\") |> plot() biplot(iris) |> PCA(group.aes = iris[,5],dim.biplot = 1) |>    axes(col=\"black\") |>   density1D() |> plot() biplot(iris) |> PCA(group.aes = iris[,5],dim.biplot = 1) |>    axes(col=\"black\") |>   density1D(which = c(2,3)) |> plot()"},{"path":"/articles/Biplots_in_1D.html","id":"the-function-legend-type","dir":"Articles","previous_headings":"","what":"The function legend.type()","title":"Biplots in 1D","text":"legend.type adds legend plot. separate legend created elements setting samples, means, bags ellipses equal TRUE. , add legend samples.  legends added, overlap elements plot displayed .  specifying new=TRUE, legends displayed new plot.  CVA biplot legend.type also displays legend classification regions `","code":"biplot(iris) |> PCA(group.aes  = iris[,5],dim.biplot = 1, show.class.means = TRUE) |>   axes(col=\"black\") |> density1D() |> samples(opacity=0.5)|> alpha.bags()|>   legend.type(samples = TRUE) |> plot() #> Computing 0.95 -bag for setosa  #> Computing 0.95 -bag for versicolor  #> Computing 0.95 -bag for virginica biplot(iris) |> PCA(group.aes  = iris[,5],dim.biplot = 1, show.class.means = TRUE) |>   axes(col=\"black\") |> density1D() |> samples(opacity=0.5)|> alpha.bags()|>   legend.type(samples = TRUE,means = TRUE, bags = TRUE) |> plot() #> Computing 0.95 -bag for setosa  #> Computing 0.95 -bag for versicolor  #> Computing 0.95 -bag for virginica biplot(iris) |> PCA(group.aes  = iris[,5],dim.biplot = 1, show.class.means = TRUE) |>   axes(col=\"black\") |> density1D() |> samples(opacity=0.5)|> alpha.bags()|>   legend.type(samples = TRUE,means = TRUE, bags = TRUE, new=TRUE) |> plot() #> Computing 0.95 -bag for setosa  #> Computing 0.95 -bag for versicolor  #> Computing 0.95 -bag for virginica bp <- biplot(iris) |> CVA(classes  = iris[,5],dim.biplot = 1, show.class.means = TRUE) |>   axes(col=\"black\") |> classify() |> density1D() |> samples(opacity=0.5)|> alpha.bags()|>   legend.type(samples = TRUE,means = TRUE, bags = TRUE, regions = TRUE, new=TRUE) |> plot() # #> Computing 0.95 -bag for setosa  #> Computing 0.95 -bag for versicolor  #> Computing 0.95 -bag for virginica"},{"path":"/articles/Biplots_in_1D.html","id":"the-function-fit-measures","dir":"Articles","previous_headings":"","what":"The function fit.measures()","title":"Biplots in 1D","text":"fit.measures() calculates measures fit biplot. Passing biplot object piped fit.measures() summary() output: plot: Quality fit. variable: Adequacy measure measure Axis Predictivity. sample: Sample Predictivity","code":"a <- biplot(iris) |> PCA(group.aes = iris[,5],dim.biplot = 1) |> fit.measures() summary(a) #> Object of class biplot, based on 150 samples and 5 variables. #> 4 numeric variables. #> 1 categorical variable. #>  #> Quality of fit in 1 dimension(s) = 92.5%  #> Adequacy of variables in 1 dimension(s): #> Sepal.Length  Sepal.Width Petal.Length  Petal.Width  #>  0.130600269  0.007144055  0.733884527  0.128371149  #> Axis predictivity in 1 dimension(s): #> Sepal.Length  Sepal.Width Petal.Length  Petal.Width  #>    0.8053299    0.1590003    0.9957524    0.9342141  #> Sample predictivity in 1 dimension(s): #>            1            2            3            4            5            6  #> 0.9859320755 0.9885358364 0.9974032622 0.9858701194 0.9843168833 0.8999107868  #>            7            8            9           10           11           12  #> 0.9904348916 0.9957802734 0.9612785710 0.9923358788 0.9370769165 0.9948836825  #>           13           14           15           16           17           18  #> 0.9875168089 0.9750670327 0.8294906959 0.7529871550 0.9071569468 0.9853898465  #>           19           20           21           22           23           24  #> 0.8616422955 0.9552462766 0.9620201204 0.9652955093 0.9901078239 0.9937624785  #>           25           26           27           28           29           30  #> 0.9810460091 0.9863832711 0.9951903602 0.9788910031 0.9826539385 0.9920053991  #>           31           32           33           34           35           36  #> 0.9923858356 0.9597307230 0.8986110971 0.8460407992 0.9949139602 0.9929589514  #>           37           38           39           40           41           42  #> 0.9371265524 0.9862655235 0.9733166664 0.9912721172 0.9891383317 0.8797484869  #>           43           44           45           46           47           48  #> 0.9825513928 0.9769811411 0.9396840258 0.9875952309 0.9530258191 0.9923056267  #>           49           50           51           52           53           54  #> 0.9503079288 0.9971653130 0.7221680790 0.8953237687 0.8532596845 0.0442100903  #>           55           56           57           58           59           60  #> 0.9129953358 0.6359273436 0.9116787898 0.3571098355 0.8281788080 0.0001270475  #>           61           62           63           64           65           66  #> 0.1332510142 0.8958907297 0.0818459091 0.9526971985 0.2540681791 0.7246059875  #>           67           68           69           70           71           72  #> 0.6197552004 0.1947357248 0.5937494624 0.0051154548 0.8476044276 0.6378818290  #>           73           74           75           76           77           78  #> 0.8806268185 0.8333647070 0.8003003948 0.7880417411 0.8419077254 0.9590386463  #>           79           80           81           82           83           84  #> 0.9582463503 0.2779242770 0.0082643376 0.0606288071 0.1243095987 0.9010013410  #>           85           86           87           88           89           90  #> 0.4112193414 0.7631565205 0.8696344890 0.5516294004 0.3190741381 0.0556990781  #>           91           92           93           94           95           96  #> 0.2922625503 0.9696427131 0.1971557114 0.3235202228 0.3247632177 0.5026574343  #>           97           98           99          100          101          102  #> 0.5643559551 0.9057638532 0.5676221930 0.4180323047 0.9171464166 0.8271416340  #>          103          104          105          106          107          108  #> 0.9806829065 0.9748867821 0.9851812054 0.9634762352 0.1357241699 0.9588447969  #>          109          110          111          112          113          114  #> 0.9664650500 0.9136258044 0.9543465424 0.9836661306 0.9843680241 0.7205977672  #>          115          116          117          118          119          120  #> 0.7597174900 0.9253702336 0.9925388347 0.8904535431 0.9774035332 0.7072260541  #>          121          122          123          124          125          126  #> 0.9631634829 0.6942722608 0.9562507107 0.9637593562 0.9632124205 0.9427733678  #>          127          128          129          130          131          132  #> 0.9657601543 0.9613019987 0.9845972460 0.9236214690 0.9539031336 0.8415331923  #>          133          134          135          136          137          138  #> 0.9775228161 0.9628241776 0.8556597753 0.9327799099 0.8909511203 0.9790497984  #>          139          140          141          142          143          144  #> 0.9273791355 0.9602863486 0.9614110358 0.8945281971 0.8271416340 0.9753298287  #>          145          146          147          148          149          150  #> 0.9351760753 0.9383233979 0.9136490692 0.9866832123 0.8702674447 0.8913242393"},{"path":[]},{"path":"/articles/Biplots_in_3D.html","id":"pca-3d-biplot","dir":"Articles","previous_headings":"","what":"PCA 3D biplot","title":"Biplots in 3D","text":"Three-dimensional PCA biplots obtained specifying dim.biplot = 3 call PCA(). package rgl required calling plot() biplot drawn rgl window. plot can interactively rotated zoomed using mouse buttons.","code":"biplot(iris) |> PCA(group.aes = iris$Species,dim.biplot = 3) |>   axes(col=\"black\") |> plot()"},{"path":"/articles/Biplots_in_3D.html","id":"adding-new-samples","dir":"Articles","previous_headings":"PCA 3D biplot","what":"Adding new samples","title":"Biplots in 3D","text":"process adding new samples biplot, called interpolation utilises functions interpolate() newsamples(). functions work way call two-dimensional biplot. function interpolate() accepts argument newdata specify matrix data frame containing new samples interpolated. function newsamples() operates way samples() user can specify aesthetics interpolated samples.","code":"biplot(iris[1:100,1:4])|> PCA(dim.biplot = 3) |> axes(col=\"black\") |>    interpolate(newdata = iris[101:150,1:4]) |> newsamples(col=\"purple\") |> plot()"},{"path":"/articles/Biplots_in_3D.html","id":"adding-new-variables","dir":"Articles","previous_headings":"PCA 3D biplot","what":"Adding new variables","title":"Biplots in 3D","text":"interpolate new variables biplot, function interpolate() newaxes() called. function interpolate() accepts argument newvariable specify matrix data frame number rows data specified biplot() containing new variables interpolated. function newaxes() allows user specify aesthetics interpolated variables.","code":"biplot(iris[,1:3])|> PCA(dim.biplot = 3) |> axes(col=\"black\") |>    interpolate(newvariable = iris[,4]) |>    newaxes(col=\"darkred\",X.new.names = \"Petal.Width\") |> plot()"},{"path":"/articles/Biplots_in_3D.html","id":"predicting-samples","dir":"Articles","previous_headings":"PCA 3D biplot","what":"Predicting samples","title":"Biplots in 3D","text":"add prediction samples biplot, prediction() function used. predict.samples argument takes vector indicating either row numbers samples predict set TRUE indicating predict samples. argument allows user select variable predict sample . example , samples 100 150 predictions shown variables 1 4. aesthetics display predictions arguments axes() function: predict.col predict.lwd.","code":"biplot(iris) |> PCA(group.aes = iris$Species,dim.biplot = 3,show.class.means = TRUE) |>    axes(col=\"black\",predict.col = \"orange\") |>     prediction(predict.samples=100:150,which = c(1,4))  |> plot()"},{"path":"/articles/Biplots_in_3D.html","id":"predicting-group-means","dir":"Articles","previous_headings":"PCA 3D biplot","what":"Predicting group means","title":"Biplots in 3D","text":"Similarly, add prediction group means, function prediction() used. argument predict.means takes vector specifying group means predict. example , first group means predicted. Important note argument show.class.means must set TRUE PCA() function.","code":"biplot(iris) |>    PCA(group.aes = iris$Species,dim.biplot = 3,show.class.means = TRUE) |>    axes(col=\"black\",predict.col = \"darkred\") |>    prediction(predict.means = 1) |> plot()"},{"path":"/articles/Biplots_in_3D.html","id":"ellipses","dir":"Articles","previous_headings":"PCA 3D biplot","what":"Ellipses","title":"Biplots in 3D","text":"Ellipses added 3D biplot using ellipses() function works way 2D biplot.","code":"biplot(iris) |> PCA(group.aes = iris[,5],dim.biplot = 3) |>    axes(col=\"black\") |>    ellipses(kappa = 3,opacity = 0.5) |> plot() #> Computing 3 -ellipse for setosa  #> Computing 3 -ellipse for versicolor  #> Computing 3 -ellipse for virginica"},{"path":"/articles/Biplots_in_3D.html","id":"cva-3d-biplot","dir":"Articles","previous_headings":"","what":"CVA 3d biplot","title":"Biplots in 3D","text":"Similarly CVA 3D biplot, dim.biplot = 3 specified call CVA().","code":"biplot(iris) |> CVA(classes = iris$Species,dim.biplot = 3) |>   axes(col=\"black\") |> plot() #> Warning in CVA.biplot(biplot(iris), classes = iris$Species, dim.biplot = 3): #> The dimension of the canonical space < dim.biplot sample.opt method used for #> additional dimension(s)."},{"path":"/articles/Biplots_in_3D.html","id":"ca-3d-biplot","dir":"Articles","previous_headings":"","what":"CA 3D biplot","title":"Biplots in 3D","text":"PCA(), three-dimensional CA biplots obtained specifying dim.biplot = 3 call CA(). , interactive biplot drawn separate rgl window. Consider HairEyeColor example discussed CA biplotEZ:  also illustrate three dimensional CA biplot SA Crime example:","code":"biplot(HairEyeColor[,,2], center = FALSE) |>    CA(variant = \"Symmetric\", dim.biplot = 3) |>   samples(col=c(\"darkred\",\"forestgreen\"), pch=c(15,17), label.col=\"black\") |>   plot() SACrime <- matrix(c(1235,432,1824,1322,573,588,624,169,629,34479,16833,46993,30606,13670,               16849,15861,9898,24915,2160,939,5257,4946,722,1271,881,775,1844,5946,               4418,15117,10258,5401,4273,4987,1956,10639,29508,15705,62703,37203,               11857,18855,14722,4924,42376,604,156,7466,3889,203,664,291,5,923,19875,               19885,57153,29410,11024,12202,10406,5431,32663,7086,4193,22152,9264,3760,               4752,3863,1337,8578,7929,4525,12348,24174,3198,1770,7004,2201,45985,764,               427,1501,1197,215,251,345,213,1850,3515,879,3674,4713,696,835,917,422,2836,               88,59,174,76,31,61,117,32,257,5499,2628,8073,6502,2816,2635,3017,1020,4000,               8939,4501,50970,24290,2447,5907,5528,1175,14555),nrow=9, ncol=14) dimnames(SACrime) <- list(paste(c(\"ECpe\", \"FrSt\", \"Gaut\", \"KZN\",  \"Limp\", \"Mpml\", \"NWst\", \"NCpe\",                             \"WCpe\")), paste(c(\"Arsn\", \"AGBH\", \"AtMr\", \"BNRs\", \"BRs\",  \"CrJk\",                                               \"CmAs\", \"CmRb\", \"DrgR\", \"InAs\", \"Mrd\", \"PubV\",                                                \"Rape\", \"RAC\" ))) names(dimnames(SACrime))[[1]] <- \"Provinces\" names(dimnames(SACrime))[[2]] <- \"Crimes\" biplot(SACrime, center = FALSE) |> CA(variant = \"Symmetric\", dim.biplot = 3) |>  samples(col=c(\"royalblue\",\"darkred\"), pch=c(15,17), label.col=\"black\") |> plot()"},{"path":"/articles/CA_in_biplotEZ.html","id":"what-is-a-correspondence-analysis","dir":"Articles","previous_headings":"","what":"What is a Correspondence Analysis?","title":"CA in biplotEZ","text":"simplest form Correspondence Analysis (CA) aims expose association two categorical variables utilising two-way frequency table. Numerous variants CA available application diverse problems, interested reader referred : Gower, Lubbe, Roux (2011), Beh Lombardo (2014). vignette, focus placed three EZ--use versions based Pearson residuals (Gower, Lubbe, Roux (2011) :300). Now, two-way frequency table also referred data matrix: 𝐗:r×c\\mathbf{X}:r\\times c. data matrix different continuous case used PCA() CVA() examples, represents cross-tabulations two categorical variables (.e. factors), finite number levels (.e response values). elements data matrix represent frequency co-occurrence two particular levels two variables. Consider HairEyeColor data set R, summarises hair eye color male female statistics students. purpose example male students considered: grand total table NN obtained total frequencies: ∑r=1R∑c=1Cxrc=N \\sum_{r=1}^{R}\\sum_{c=1}^{C}x_{rc}=N common work proportions rather frequencies terms correspondence matrix, 𝐏\\mathbf{P}: 𝐏=𝐗N \\mathbf{P}=\\frac{\\mathbf{X}}{N} useful summaries 𝐏\\mathbf{P} include row column masses (arbitrary row column rr cc, respectively), also expressed diagonal matrices: $$ \\mathbf{r}_r = \\sum_{c=1}^{C}p_{rc}; \\hspace{0.5 cm} \\mathbf{c}_c = \\sum_{r=1}^{R}p_{rc}\\\\ \\mathbf{r}=\\mathbf{P1}; \\hspace{0.5 cm} \\mathbf{c}=\\mathbf{P}^\\prime\\mathbf{1} $$ Diagonal matrices: $$ \\mathbf{D_r}=\\text{diag}(\\mathbf{r}); \\hspace{0.5 cm} \\mathbf{D_c}=\\text{diag}(\\mathbf{c}) $$ order obtain first form row column coordinates, singular value decomposition (SVD) matrix standardised Pearson residuals (𝐒\\mathbf{S}) computed: SVD(𝐒)=SVD(𝐃𝐫−𝟏𝟐(𝐏−𝐫𝐜′)𝐃𝐜−𝟏𝟐)=𝐔𝚲𝐕′ \\begin{aligned} \\text{SVD}(\\mathbf{S}) &= \\text{SVD}\\left(\\mathbf{D_r^{-\\frac{1}{2}}}(\\mathbf{P}-\\mathbf{rc^\\prime})\\mathbf{D_c^{-\\frac{1}{2}}}\\right)\\\\&= \\mathbf{U\\Lambda V^\\prime} \\end{aligned}  return value Standardised pearson residuals Smat singular value decomposition, SVD. linked χ2\\chi^2-statistic determine whether two categorical variables (.e. rows columns contingency table) independent. expected frequencies represented product row column masses (𝐫𝐜′\\mathbf{rc^\\prime}). Furthermore, since weights certain objects might substantially different others result distorted approximation lower dimension, χ2\\chi^2-distance, also referred weighted Euclidean distance, rather used measure distances CA. intuitive decision follows χ2\\chi^2-statistic test independence two categorical variables, case independence rows columns contingency table. (Beh Lombardo (2014), Greenacre (2017)).","code":"X <- HairEyeColor[,,2] X #>        Eye #> Hair    Brown Blue Hazel Green #>   Black    36    9     5     2 #>   Brown    66   34    29    14 #>   Red      16    7     7     7 #>   Blond     4   64     5     8 N <- sum(X) N #> [1] 313 P <- X/N P #>        Eye #> Hair          Brown        Blue       Hazel       Green #>   Black 0.115015974 0.028753994 0.015974441 0.006389776 #>   Brown 0.210862620 0.108626198 0.092651757 0.044728435 #>   Red   0.051118211 0.022364217 0.022364217 0.022364217 #>   Blond 0.012779553 0.204472843 0.015974441 0.025559105 rMass <- rowSums(P) rMass #>     Black     Brown       Red     Blond  #> 0.1661342 0.4568690 0.1182109 0.2587859 cMass <- colSums(P) cMass #>      Brown       Blue      Hazel      Green  #> 0.38977636 0.36421725 0.14696486 0.09904153 Dr <- diag(apply(P, 1, sum)) Dr #>           [,1]     [,2]      [,3]      [,4] #> [1,] 0.1661342 0.000000 0.0000000 0.0000000 #> [2,] 0.0000000 0.456869 0.0000000 0.0000000 #> [3,] 0.0000000 0.000000 0.1182109 0.0000000 #> [4,] 0.0000000 0.000000 0.0000000 0.2587859 Dc <- diag(apply(P, 2, sum)) Dc #>           [,1]      [,2]      [,3]       [,4] #> [1,] 0.3897764 0.0000000 0.0000000 0.00000000 #> [2,] 0.0000000 0.3642173 0.0000000 0.00000000 #> [3,] 0.0000000 0.0000000 0.1469649 0.00000000 #> [4,] 0.0000000 0.0000000 0.0000000 0.09904153 Smat <- sqrt(solve(Dr))%*%(P-(Dr %*%matrix(1, nrow = nrow(X),      ncol = ncol(X)) %*%  Dc))%*%sqrt(solve(Dc)) svd.out <- svd(Smat) svd.out #> $d #> [1] 5.499629e-01 1.806424e-01 7.541748e-02 8.574459e-17 #>  #> $u #>            [,1]       [,2]        [,3]      [,4] #> [1,] -0.3832205  0.7807477 -0.27828196 0.4075956 #> [2,] -0.3195599 -0.2982325  0.59335474 0.6759209 #> [3,] -0.1736837 -0.5332073 -0.75320188 0.3438181 #> [4,]  0.8490333  0.1310737 -0.05635808 0.5087101 #>  #> $v #>             [,1]       [,2]        [,3]      [,4] #> [1,] -0.61837991  0.4547976 -0.14487614 0.6243207 #> [2,]  0.75797511  0.2307003  0.08963172 0.6035041 #> [3,] -0.20612962 -0.5898626  0.68015284 0.3833600 #> [4,]  0.02430218 -0.6260980 -0.71300012 0.3147086"},{"path":[]},{"path":"/articles/CA_in_biplotEZ.html","id":"coordinates","dir":"Articles","previous_headings":"CA biplot","what":"Coordinates","title":"CA in biplotEZ","text":"order construct biplot distances row column coordinates meaningful asymmetric display constructed. means contribution singular values different row column coordinates. (Gabriel (1971)) standard coordinates expressed : $$ \\begin{aligned} \\text{Row standard coordinates:} \\hspace{0.5 cm}&\\mathbf{U}\\\\ \\text{Column standard coordinates:} \\hspace{0.5 cm}&\\mathbf{V} \\end{aligned} $$ principal coordinates expressed : $$ \\begin{aligned} \\text{Row principal coordinates:} \\hspace{0.5 cm}&\\mathbf{U\\Lambda}\\\\ \\text{Column principal coordinates:} \\hspace{0.5 cm}&\\mathbf{V\\Lambda} \\end{aligned} $$ including singular values magnitude association variables incorporated scaling coordinates. ca() function argument variant allows user choose three types CA biplots: Princ, Stand Symmetric. $$ \\begin{aligned} \\text{Row coordinates:} \\hspace{0.5 cm}&\\mathbf{U\\Lambda^\\gamma}\\\\ \\text{Column coordinates:} \\hspace{0.5 cm}&\\mathbf{V\\Lambda^{1-\\gamma}} \\end{aligned} $$ row standard (.e. column principal) coordinate biplot: Stand, results γ=0\\gamma=0. row principal (.e. column standard) coordinate biplot: Princ, results γ=1\\gamma=1. symmetric plot row column coordinates scaled equally: Symmetric, results γ=0.5\\gamma=0.5. return value rowcoor colcoor, respectively.","code":"gamma <- 0 rowcoor <- svd.out[[2]]%*%(diag(svd.out[[1]])^gamma) colcoor <- svd.out[[3]]%*%(diag(svd.out[[1]])^(1-gamma))"},{"path":"/articles/CA_in_biplotEZ.html","id":"lambda-scaling","dir":"Articles","previous_headings":"CA biplot","what":"Lambda scaling","title":"CA in biplotEZ","text":"presented Gower, Lubbe, Roux (2011) :24, constructing biplot representing rows coordinate matrix 𝐀\\mathbf{} 𝐁′\\mathbf{B}^\\prime. Take note inner product invariant 𝐀\\mathbf{} 𝐁\\mathbf{B} scaled inversely λ\\lambda. 𝐀𝐁=(λ𝐀)(𝐁/λ) \\mathbf{AB} = (\\lambda\\mathbf{})(\\mathbf{B}/\\lambda)  arbitrary value λ\\lambda can selected optimal value ensure average squared distance points λ𝐀\\lambda\\mathbf{} 𝐁/λ\\mathbf{B}/\\lambda equal. λ4=rc||𝐁||2||𝐀||2 \\lambda^4 =\\frac{r}{c}\\frac{||\\mathbf{B}||^2}{||\\mathbf{}||^2} default setting apply lambda-scaling (.e. λ=1\\lambda=1). return value lambda.val.","code":""},{"path":"/articles/CA_in_biplotEZ.html","id":"measures-of-fit","dir":"Articles","previous_headings":"CA biplot","what":"Measures of fit","title":"CA in biplotEZ","text":"quality, adequacy, row.predictivities column.predictivities available CA biplots. explained biplotEZ vignette, quality biplot measured ratio variance explained (sum squared singular values utilised (MM) components) total variance (sum squared singular values (pp)). ∑m=1Mλm2∑m=1pλm2 \\frac{\\sum_{m=1}^{M}\\lambda_m^2}{\\sum_{m=1}^{p}\\lambda_m^2}  adequacy refers representation variables. CA() factor variable represented columns treated variables calculated explained biplotEZ vignette: diag(𝐕r𝐕r′)diag(𝐕𝐕′)=diag(𝐕r𝐕r′)  \\frac{diag(\\mathbf{V}_r\\mathbf{V}_r')}{diag(\\mathbf{VV}')}= diag(\\mathbf{V}_r\\mathbf{V}_r') predictivities provide measure well original values recovered biplot. element well represented predictivity close one, indicating row column variable values prediction close observed values. element poorly represented, predicted values different original values predictivity value close zero. row.predictivities calculated follows (Gower, Lubbe, Roux (2011) :299): $$ diag(\\mathbf{U}\\mathbf{\\Sigma}\\mathbf{J}\\mathbf{\\Sigma}\\mathbf{U}')[diag(\\mathbf{U}\\mathbf{\\Sigma}\\mathbf{\\Sigma}\\mathbf{U}')]^{-1}\\\\ =diag(\\mathbf{U}\\mathbf{\\Sigma}^2\\mathbf{J}\\mathbf{U}')[diag(\\mathbf{U}\\mathbf{\\Sigma^2}\\mathbf{U}')]^{-1} $$ col.predictivities calculated follows (Gower, Lubbe, Roux (2011) :299): diag(𝐕𝚺2𝐉𝐕′)[diag(𝐕𝚺𝟐𝐕′)]−1 diag(\\mathbf{V}\\mathbf{\\Sigma}^2\\mathbf{J}\\mathbf{V}')[diag(\\mathbf{V}\\mathbf{\\Sigma^2}\\mathbf{V}')]^{-1}","code":""},{"path":"/articles/CA_in_biplotEZ.html","id":"the-function-ca","dir":"Articles","previous_headings":"","what":"The function CA()","title":"CA in biplotEZ","text":"function CA() requires two-way contingency table input return object class CA biplot. standard data matrix PCA CVA, scaling centering allowed two-way contingency table warning given either scale center specified TRUE biplot()`.","code":""},{"path":"/articles/CA_in_biplotEZ.html","id":"variantprinc","dir":"Articles","previous_headings":"The function CA()","what":"Variant=\"Princ\"","title":"CA in biplotEZ","text":"default CA biplot row principal coordinate biplot:","code":"biplot(HairEyeColor[,,2], center = FALSE) |> CA() |> plot()"},{"path":"/articles/CA_in_biplotEZ.html","id":"variantstand","dir":"Articles","previous_headings":"The function CA()","what":"Variant=\"Stand\"","title":"CA in biplotEZ","text":"construct CA biplot row standard coordinates:","code":"ca.out <- biplot(HairEyeColor[,,2], center = FALSE) |> CA(variant = \"Stand\") |>    plot()"},{"path":"/articles/CA_in_biplotEZ.html","id":"variantsymmetric","dir":"Articles","previous_headings":"The function CA()","what":"Variant=\"Symmetric\"","title":"CA in biplotEZ","text":"construct symmetric CA map:","code":"ca.out <- biplot(HairEyeColor[,,2], center = FALSE) |>    CA(variant = \"Symmetric\") |> plot() ca.out$lambda.val #> [1] 1"},{"path":"/articles/CA_in_biplotEZ.html","id":"measures-of-fit-1","dir":"Articles","previous_headings":"The function CA()","what":"Measures of fit","title":"CA in biplotEZ","text":"fit.mesaures() function utilised obtain specific fit measures explained .","code":"ca.out <- biplot(HairEyeColor[,,2], center = FALSE) |>    CA(variant = \"Symmetric\") |> fit.measures() print(\"Quality\") #> [1] \"Quality\" ca.out$quality #> [1] 0.9833094 print(\"Adequacy\") #> [1] \"Adequacy\" ca.out$adequacy #>        Brown   Blue  Hazel  Green #> Dim 1 0.3824 0.5745 0.0425 0.0006 #> Dim 2 0.5892 0.6277 0.3904 0.3926 #> Dim 3 0.6102 0.6358 0.8530 0.9010 #> Dim 4 1.0000 1.0000 1.0000 1.0000 print(\"Row predictivities\") #> [1] \"Row predictivities\" ca.out$row.predictivities #>        Black  Brown    Red  Blond #> Dim 1 0.6860 0.8630 0.4219 0.9974 #> Dim 2 0.9932 0.9441 0.8508 0.9999 #> Dim 3 1.0000 1.0000 1.0000 1.0000 #> Dim 4 1.0000 1.0000 1.0000 1.0000 print(\"Column predictivities\") #> [1] \"Column predictivities\" ca.out$col.predictivities #>        Brown   Blue  Hazel  Green #> Dim 1 0.9439 0.9898 0.4789 0.0113 #> Dim 2 0.9990 0.9997 0.9020 0.8177 #> Dim 3 1.0000 1.0000 1.0000 1.0000 #> Dim 4 1.0000 1.0000 1.0000 1.0000"},{"path":"/articles/CA_in_biplotEZ.html","id":"interpolating-new-samples","dir":"Articles","previous_headings":"The function CA()","what":"Interpolating new samples","title":"CA in biplotEZ","text":"Adding cross-tabulations two categorical variables plot facilitated function interpolate(). Note additional variables interpolated contribute construction biplot. reason Greenacre (2017) term supplementary points. function interpolate() accepts matrix data frame containing samples variables interpolated. argument newdata containing samples interpolated needs similar structure data set sent biplot(). biplot() received data frame, newdata can either another data frame matrix containing subset numerical variables. function newsamples() operates similar samples() enables aesthetic changes new samples.","code":"biplot(HairEyeColor[,,2], center = FALSE) |> CA(variant = \"Symmetric\") |>    samples(pch = c(0,2)) |> interpolate(newdata = HairEyeColor[,,1]) |>    newsamples(col = c(\"orange\",\"purple\"), pch = c(15,17)) |> plot()"},{"path":"/articles/CA_in_biplotEZ.html","id":"aesthetics-and-legend","dir":"Articles","previous_headings":"The function CA()","what":"Aesthetics and legend","title":"CA in biplotEZ","text":"sample() function utilised specify colours, plotting characters expansion samples.","code":"biplot(HairEyeColor[,,2], center = FALSE) |> CA(variant = \"Princ\") |>    samples(col = c(\"cyan\",\"purple\"), pch = c(15,17), label.side = c(\"bottom\",\"top\"),            label.cex = 1) |> legend.type(samples = TRUE, new = TRUE) |> plot() biplot(HairEyeColor[,,2], center = FALSE) |> CA(variant = \"Symmetric\") |>    samples(col = c(\"forestgreen\",\"magenta\"), pch = c(12,17),            label.side = c(\"top\",\"bottom\")) |>    legend.type(samples = TRUE) |> plot()"},{"path":"/articles/CA_in_biplotEZ.html","id":"additional-example","dir":"Articles","previous_headings":"The function CA()","what":"Additional example","title":"CA in biplotEZ","text":"Consider South African Crime data set 2008, extracted South African police website (http://www.saps.gov.za/). Gower, Lubbe, Roux (2011) :312.","code":"SACrime <- matrix(c(1235,432,1824,1322,573,588,624,169,629,34479,16833,46993,30606,13670,               16849,15861,9898,24915,2160,939,5257,4946,722,1271,881,775,1844,5946,               4418,15117,10258,5401,4273,4987,1956,10639,29508,15705,62703,37203,               11857,18855,14722,4924,42376,604,156,7466,3889,203,664,291,5,923,19875,               19885,57153,29410,11024,12202,10406,5431,32663,7086,4193,22152,9264,3760,               4752,3863,1337,8578,7929,4525,12348,24174,3198,1770,7004,2201,45985,764,               427,1501,1197,215,251,345,213,1850,3515,879,3674,4713,696,835,917,422,2836,               88,59,174,76,31,61,117,32,257,5499,2628,8073,6502,2816,2635,3017,1020,4000,               8939,4501,50970,24290,2447,5907,5528,1175,14555),nrow=9, ncol=14) dimnames(SACrime) <- list(paste(c(\"ECpe\", \"FrSt\", \"Gaut\", \"KZN\",  \"Limp\", \"Mpml\", \"NWst\", \"NCpe\",                             \"WCpe\")), paste(c(\"Arsn\", \"AGBH\", \"AtMr\", \"BNRs\", \"BRs\",  \"CrJk\",                                               \"CmAs\", \"CmRb\", \"DrgR\", \"InAs\", \"Mrd\", \"PubV\",                                                \"Rape\", \"RAC\" ))) names(dimnames(SACrime))[[1]] <- \"Provinces\" names(dimnames(SACrime))[[2]] <- \"Crimes\" SACrime #>          Crimes #> Provinces Arsn  AGBH AtMr  BNRs   BRs CrJk  CmAs  CmRb  DrgR InAs  Mrd PubV #>      ECpe 1235 34479 2160  5946 29508  604 19875  7086  7929  764 3515   88 #>      FrSt  432 16833  939  4418 15705  156 19885  4193  4525  427  879   59 #>      Gaut 1824 46993 5257 15117 62703 7466 57153 22152 12348 1501 3674  174 #>      KZN  1322 30606 4946 10258 37203 3889 29410  9264 24174 1197 4713   76 #>      Limp  573 13670  722  5401 11857  203 11024  3760  3198  215  696   31 #>      Mpml  588 16849 1271  4273 18855  664 12202  4752  1770  251  835   61 #>      NWst  624 15861  881  4987 14722  291 10406  3863  7004  345  917  117 #>      NCpe  169  9898  775  1956  4924    5  5431  1337  2201  213  422   32 #>      WCpe  629 24915 1844 10639 42376  923 32663  8578 45985 1850 2836  257 #>          Crimes #> Provinces Rape   RAC #>      ECpe 5499  8939 #>      FrSt 2628  4501 #>      Gaut 8073 50970 #>      KZN  6502 24290 #>      Limp 2816  2447 #>      Mpml 2635  5907 #>      NWst 3017  5528 #>      NCpe 1020  1175 #>      WCpe 4000 14555 biplot(SACrime, center = FALSE) |>    CA(variant = \"Symmetric\", lambda.scal = TRUE) |>    samples(col = c(\"cyan\",\"purple\"), pch = c(15,17), label.side = c(\"bottom\",\"top\")) |>   legend.type(samples = TRUE, new = TRUE) |> plot()"},{"path":[]},{"path":"/articles/Class_separation.html","id":"what-is-a-cva-biplot","dir":"Articles","previous_headings":"","what":"What is a CVA biplot","title":"Class separation","text":"Consider data matrix 𝐗:n×p\\mathbf{X}:n \\times p containing data nn objects pp variables. addition, vector 𝐠:n×1\\mathbf{g}:n \\times 1 contains information class membership observation. Let GG indicate total number classes. CVA closely related linear discriminant anlaysis, pp variables transformed pp new variables, called canonical variates, classes optimally separated canonical space. optimally separated, mean maximising class variance, relative within class variance. can formulated follows: Let 𝐆:n×G\\mathbf{G}:n \\times G indicator matrix gij=0g_{ij} = 0 unless observation ii belongs class jj gij=1g_{ij} = 1. matrix 𝐆′𝐆\\mathbf{G'G} diagonal matrix containing number observations per class diagonal. can form matrix class means 𝐗‾:G×p=(𝐆′𝐆)−1𝐆′𝐗\\bar{\\mathbf{X}}:G \\times p = (\\mathbf{G'G})^{-1} \\mathbf{G'X}. usual analysis variance total variance can decomposed class variance within class variance: 𝐓=𝐁+𝐖 \\mathbf{T} = \\mathbf{B} + \\mathbf{W} 𝐗′𝐗=𝐗‾′𝐂𝐗‾+𝐗′[𝐈−𝐆(𝐆′𝐆)−𝟏𝐂(𝐆′𝐆)−𝟏𝐆′]𝐗 \\mathbf{X'X} = \\mathbf{\\bar{\\mathbf{X}}'C \\bar{\\mathbf{X}}} + \\mathbf{X' [- G(G'G)^{-1}C(G'G)^{-1}G'] X} default choice centring matrix 𝐂=𝐆′𝐆\\mathbf{C = G'G} leads simplification 𝐗′𝐗=𝐗‾′𝐆′𝐆𝐗‾+𝐗′[𝐈−𝐆(𝐆′𝐆)−𝟏𝐆′]𝐗. \\mathbf{X'X} = \\mathbf{\\bar{\\mathbf{X}}'G'G \\bar{\\mathbf{X}}} + \\mathbf{X' [- G(G'G)^{-1}G'] X}. options 𝐂=𝐈\\mathbf{C = } 𝐂=(𝐈G−1G𝟏𝟏′)\\mathbf{C} = (\\mathbf{}_G - \\frac{1}{G}\\mathbf{11'}). find canonical variates want maximise ratio 𝐦′𝐁𝐦𝐦′𝐖𝐦 \\frac{\\mathbf{m'Bm}}{\\mathbf{m'Wm}} subject 𝐦′𝐖𝐦=1\\mathbf{m'Wm} = 1. can shown leads following equivalent eigen equations: 𝐖−1𝐁𝐌=𝐌𝚲 \\mathbf{W}^{-1}\\mathbf{BM} = \\mathbf{M \\Lambda} \\tag{1} 𝐁𝐌=𝐖𝐌𝚲 \\mathbf{BM} = \\mathbf{WM \\Lambda} (𝐖−12𝐁𝐖−12)𝐌=(𝐖−12𝐌)𝚲 (\\mathbf{W}^{-\\frac{1}{2}} \\mathbf{B} \\mathbf{W}^{-\\frac{1}{2}}) \\mathbf{M} = (\\mathbf{W}^{-\\frac{1}{2}} \\mathbf{M}) \\mathbf{\\Lambda} 𝐌′𝐁𝐌=𝚲\\mathbf{M'BM}= \\mathbf{\\Lambda} 𝐌′𝐖𝐌=𝐈\\mathbf{M'WM}= \\mathbf{}. Since matrix 𝐖−12𝐁𝐖−12\\mathbf{W}^{-\\frac{1}{2}} \\mathbf{B} \\mathbf{W}^{-\\frac{1}{2}} symmetric positive semi-definite eigenvalues matrix 𝚲\\mathbf{\\Lambda} positive ordered. rank 𝐁=min(p,G−1)\\mathbf{B} = min(p, G-1) first rank(𝐁)rank(\\mathbf{B}) eigenvalues non-zero. form canonical variates transformation 𝐘‾=𝐗‾𝐌. \\bar{\\mathbf{Y}} = \\bar{\\mathbf{X}}\\mathbf{M}. construct 2D biplot, plot first two canonical variates 𝐙‾=𝐗‾𝐌𝐉2\\bar{\\mathbf{Z}} = \\bar{\\mathbf{X}}\\mathbf{MJ}_2 𝐉2′=[𝐈2𝟎]\\mathbf{J}_2' = \\begin{bmatrix} \\mathbf{}_2 & \\mathbf{0} \\end{bmatrix}. add individual sample points transformation 𝐙=𝐗𝐌𝐉2 \\mathbf{Z} = \\mathbf{X}\\mathbf{MJ}_2  𝐉2=[𝐈2𝟎]. \\mathbf{J}_2 = \\begin{bmatrix}                 \\mathbf{}_2\\\\                 \\mathbf{0}                \\end{bmatrix}.  Interpolation new sample 𝐱*:p×1\\mathbf{x}^*:p \\times 1 follows 𝐳*′:2×1=𝐱*′𝐌𝐉2{\\mathbf{z}^*}':2 \\times 1 ={\\mathbf{x}^*}' \\mathbf{MJ}_2. Using inverse transformation 𝐱′=𝐲′𝐌−1\\mathbf{x}' = \\mathbf{y}'\\mathbf{M}^{-1}, points predict μ\\mu variable jj form μ=𝐲′𝐌−1𝐞j \\mu = \\mathbf{y}'\\mathbf{M}^{-1} \\mathbf{e}_j 𝐞j\\mathbf{e}_j vector zeros one position jj. points 2D biplot predict value μ\\mu μ=[z1z20…0]𝐌−1𝐞j \\mu = \\begin{bmatrix} z_1 & z_2 & 0 & \\dots & 0\\end{bmatrix}\\mathbf{M}^{-1} \\mathbf{e}_j defining prediction line μ=𝐳μ′𝐉2𝐌−1𝐞j. \\mu = \\mathbf{z}_{\\mu}' \\mathbf{J}_2 \\mathbf{M}^{-1} \\mathbf{e}_j. Writing 𝐡(j)=𝐉2𝐌−1𝐞j\\mathbf{h}_{(j)} = \\mathbf{J}_2 \\mathbf{M}^{-1} \\mathbf{e}_j construction biplot axes similar discussion biplotEZ vignette PCA biplots. direction axis given 𝐡(j)\\mathbf{h}_{(j)}. find intersection prediction line 𝐡(j)\\mathbf{h}_{(j)} note 𝐳′(μ)𝐡(j)=∥𝐳(μ)∥2∥𝐡(j)∥2cos(𝐳(μ),𝐡(j))=∥𝐩∥2∥𝐡(j)∥2 \\mathbf{z}'_{(\\mu)}\\mathbf{h}_{(j)} = \\| \\mathbf{z}_{(\\mu)} \\|^2 \\| \\mathbf{h}_{(j)} \\|^2 cos(\\mathbf{z}_{(\\mu)},\\mathbf{h}_{(j)}) =  \\| \\mathbf{p} \\|^2 \\| \\mathbf{h}_{(j)} \\|^2   𝐩\\mathbf{p} length orthogonal projection 𝐳(μ)\\mathbf{z}_{(\\mu)} 𝐡(j)\\mathbf{h}_{(j)}. Since 𝐩\\mathbf{p} along 𝐡(j)\\mathbf{h}_{(j)} can write 𝐩=c𝐡(j)\\mathbf{p} = c\\mathbf{h}_{(j)} points prediction line μ=𝐳′μ𝐡(j)\\mu = \\mathbf{z}'_{\\mu}\\mathbf{h}_{(j)} project point cμ𝐡(j)c_{\\mu}\\mathbf{h}_{(j)}. solve cμc_{\\mu} μ=𝐳′μ𝐡(j)=∥𝐩∥2∥𝐡(j)∥2=∥cμ𝐡(j)∥2∥𝐡(j)∥2 \\mu = \\mathbf{z}'_{\\mu}\\mathbf{h}_{(j)}=\\| \\mathbf{p} \\|^2 \\| \\mathbf{h}_{(j)} \\|^2 =  \\| c_{\\mu}\\mathbf{h}_{(j)} \\|^2 \\| \\mathbf{h}_{(j)} \\|^2 cμ=μ𝐡(j)′𝐡(j). c_{\\mu} = \\frac{\\mu}{\\mathbf{h}_{(j)}'\\mathbf{h}_{(j)}}.  select ‘nice’ scale markers τ1,τ2,⋯τk\\tau_{1}, \\tau_{2}, \\cdots \\tau_{k} variable jj, τh−x‾j=μh\\tau_{h}-\\bar{x}_j = \\mu_{h} positions scale markers 𝐡(j)\\mathbf{h}_{(j)} given pμ1,pμ2,⋯pμkp_{\\mu_{1}}, p_{\\mu_{2}}, \\cdots p_{\\mu_{k}} pμh=cμh𝐡(j)=μh𝐡(j)′𝐡(j)𝐡(j) p_{\\mu_h} = c_{\\mu_h}\\mathbf{h}_{(j)} =  \\frac{\\mu_h}{\\mathbf{h}_{(j)}'\\mathbf{h}_{(j)}}\\mathbf{h}_{(j)} =μh𝐞(j)′𝐌′−1𝐉𝐌−1𝐞(j)𝐉2𝐌−1𝐞(j) = \\frac{\\mu_h}{\\mathbf{e}_{(j)}' \\mathbf{M'}^{-1} \\mathbf{J} \\mathbf{M}^{-1} \\mathbf{e}_{(j)}}\\ \\mathbf{J}_2 \\mathbf{M}^{-1} \\mathbf{e}_{(j)} 𝐉=[𝐈2𝟎𝟎𝟎]. \\mathbf{J} = \\begin{bmatrix}               \\mathbf{}_2 & \\mathbf{0}\\\\               \\mathbf{0} & \\mathbf{0}              \\end{bmatrix}.","code":""},{"path":"/articles/Class_separation.html","id":"the-function-cva","dir":"Articles","previous_headings":"","what":"The function CVA()","title":"Class separation","text":"obtain CVA biplot state.x77 data set, optimally separating classes according state.region call  Fitting α\\alpha-bags classes makes easier compare class overlap separation. detailed discussion α\\alpha-bags, see biplotEZ vignette.","code":"biplot(state.x77) |>    CVA(classes = state.region) |>    plot() biplot(state.x77) |> CVA(classes = state.region) |> alpha.bags() |>    legend.type (bags = TRUE) |>    plot() #> Computing 0.95 -bag for Northeast  #> Computing 0.95 -bag for South  #> Computing 0.95 -bag for North Central  #> Computing 0.95 -bag for West"},{"path":"/articles/Class_separation.html","id":"the-function-means","dir":"Articles","previous_headings":"","what":"The function means()","title":"Class separation","text":"function controls aesthetics class means biplot. function accepts first argument object class biplot aesthetics applied. Let us first construct CVA biplot state.x77 data samples optimally separated according state.division.  Instead adding legend, can choose label class means. Furthermore, colour class mean defaults colour samples. wish select different colour plotting character class means.  choose show class means central states, argument used either indicating number(s) sequence levels (= 4:7), shown , levels :  size labels controlled label.cex can specified either single value (class means) vector indicating size values individual sample. colour labels defaults colour(s) class means. However, individual label colours can spesified label.col, similar label.cex either single value vector length equal number classes.  can also make use functionality ggrepel package place labels.","code":"biplot(state.x77, scaled = TRUE) |>    CVA(classes = state.division) |>    legend.type(means = TRUE) |>    plot() biplot(state.x77, scaled = TRUE) |>    CVA(classes = state.division) |>    means(label = TRUE, col = \"olivedrab\", pch = 15) |>    plot() biplot(state.x77, scaled = TRUE) |>    CVA(classes = state.division) |>    means (which = c(\"West North Central\", \"West South Central\", \"East South Central\",                       \"East North Central\"), label = TRUE) |>   plot() biplot(state.x77, scaled = TRUE) |>    CVA(classes = state.division) |>    means (col = \"olivedrab\", pch = 15, cex = 1.5,          label = TRUE, label.col = c(\"blue\",\"green\",\"gold\",\"cyan\",\"magenta\",                                      \"black\",\"red\",\"grey\",\"purple\")) |>   plot() biplot(state.x77, scaled = TRUE) |>    CVA(classes = state.division) |>    samples (label = \"ggrepel\", label.cex=0.65) |>    means (label = \"ggrepel\", label.cex=0.8) |> plot()"},{"path":"/articles/Class_separation.html","id":"the-function-classify","dir":"Articles","previous_headings":"","what":"The function classify()","title":"Class separation","text":"Classification regions can added CVA biplot function classify(). argument classify.regions must set equal TRUE render regions plot. arguments col, opacity borders allows change aesthetics regions.","code":"biplot(state.x77, scaled = TRUE) |>    CVA(classes = state.division) |>   classify(classify.regions = TRUE,opacity = 0.2) |>    plot()"},{"path":"/articles/Class_separation.html","id":"the-functions-fit-measures-and-summary","dir":"Articles","previous_headings":"","what":"The functions fit.measures() and summary()","title":"Class separation","text":"number fit measures specific CVA biplots. measures computed function fit.measures() results displayed function summary(). Canonical variate analysis can considered transformation original variables canonical space followed constructing PCA biplot canonical variables. matrix class means 𝐗‾=(𝐆′𝐆)−1𝐆′𝐗\\bar{\\mathbf{X}} = (\\mathbf{G'G})^{-1} \\mathbf{G'X} transformed 𝐗‾𝐋\\mathbf{\\bar{X}L} 𝐋\\mathbf{L} non-singular matrix 𝐋𝐋′=𝐖−1\\mathbf{LL'=W}^{-1}. Pricipal component analysis finds orthogonal matrix 𝐕\\mathbf{V} (𝐋′𝐗‾′𝐂𝐗‾𝐋)𝐕=𝐕𝚲 \\mathbf{(L'\\bar{X}'C\\bar{X}L)V=V \\Lambda} 𝐌=𝐋𝐕\\mathbf{M = LV} defined section 1. predicted values class means given 𝐗‾̂=𝐗‾𝐌𝐉𝐌−1. \\mathbf{\\hat{\\bar{X}}} = \\mathbf{\\bar{X}MJ}\\mathbf{M}^{-1}.","code":""},{"path":"/articles/Class_separation.html","id":"overall-quality-of-fit","dir":"Articles","previous_headings":"The functions fit.measures() and summary()","what":"Overall quality of fit","title":"Class separation","text":"Based two-step process described , two measures quality fit. quality approximation canonical variables 𝐗‾𝐋\\mathbf{\\bar{X}L} 22-dimensional display given Quality(canonicalvariables)=tr(𝚲𝐉)tr(𝚲) Quality (canonical \\: variables) = \\frac{tr(\\mathbf{\\Lambda J})}{tr(\\mathbf{\\Lambda)}}  quality approximation original variables 𝐗‾\\mathbf{\\bar{X}} 2D CVA biplot given Quality(originalvariables)=tr(𝚲𝐉)tr(𝚲) Quality (original \\: variables) = \\frac{tr(\\mathbf{\\Lambda J})}{tr(\\mathbf{\\Lambda)}}","code":""},{"path":"/articles/Class_separation.html","id":"adequacy-of-representation-of-variables","dir":"Articles","previous_headings":"The functions fit.measures() and summary()","what":"Adequacy of representation of variables","title":"Class separation","text":"adequacy variables represented biplot given elementwise ratios Adequacy=diag(𝐌𝐉𝐌′)diag(𝐌𝐌′). Adequacy = \\frac{diag(\\mathbf{MJM'})}{diag(\\mathbf{MM'})}.","code":""},{"path":[]},{"path":"/articles/Class_separation.html","id":"between-class-predictivity","dir":"Articles","previous_headings":"The functions fit.measures() and summary() > Predictivity","what":"Between class predictivity","title":"Class separation","text":"axis class mean predictivities defined terms weighted class means.","code":""},{"path":"/articles/Class_separation.html","id":"axis-predictivity","dir":"Articles","previous_headings":"The functions fit.measures() and summary() > Predictivity > Between class predictivity","what":"Axis predictivity","title":"Class separation","text":"elementwise ratios predictivity axes given axispredictivity=diag(𝐗‾̂′𝐂𝐗‾̂)diag(𝐗‾′𝐂𝐗‾). axis \\: predictivity = \\frac{diag(\\mathbf{\\hat{\\bar{X}}}'\\mathbf{C\\hat{\\bar{X}}})}{diag(\\mathbf{\\bar{X}}'\\mathbf{C\\bar{X}})}.","code":""},{"path":"/articles/Class_separation.html","id":"class-predictivity","dir":"Articles","previous_headings":"The functions fit.measures() and summary() > Predictivity > Between class predictivity","what":"Class predictivity","title":"Class separation","text":"Similarly class means elementwise ratio computed classpredictivity=diag(𝐂12𝐗‾̂′𝐖−𝟏𝐗‾̂𝐂12)diag(𝐂12𝐗‾′𝐖−𝟏𝐗‾𝐂12). class \\: predictivity = \\frac{diag(\\mathbf{C}^{\\frac{1}{2}}\\mathbf{\\hat{\\bar{X}}}'\\mathbf{W^{-1}}\\mathbf{\\hat{\\bar{X}}}\\mathbf{C}^{\\frac{1}{2}})}{diag(\\mathbf{C}^{\\frac{1}{2}}\\mathbf{\\bar{X}}'\\mathbf{W^{-1}}\\mathbf{\\bar{X}}\\mathbf{C}^{\\frac{1}{2}})}.","code":""},{"path":"/articles/Class_separation.html","id":"within-class-predictivity","dir":"Articles","previous_headings":"The functions fit.measures() and summary() > Predictivity","what":"Within class predictivity","title":"Class separation","text":"define matrix samples deviations class means (𝐈−𝐇)𝐗=(𝐈n−𝐆(𝐆′𝐆)−1𝐆′)𝐗 (\\mathbf{-H})\\mathbf{X}=(\\mathbf{}_n-\\mathbf{G}(\\mathbf{G'G})^{-1}\\mathbf{G}')\\mathbf{X} 𝐇=𝐆(𝐆′𝐆)−1𝐆′\\mathbf{H} = \\mathbf{G}(\\mathbf{G'G})^{-1}\\mathbf{G}'.","code":""},{"path":"/articles/Class_separation.html","id":"within-class-axis-predictivity","dir":"Articles","previous_headings":"The functions fit.measures() and summary() > Predictivity > Within class predictivity","what":"Within class axis predictivity","title":"Class separation","text":"within class axis predictivity computed elementwise ratios withinclassaxispredictivity=diag(𝐗̂′(𝐈−𝐇)𝐗̂)diag(𝐗′(𝐈−𝐇)𝐗). within \\: class \\: axis \\: predictivity = \\frac{diag(\\mathbf{\\hat{X}}'(\\mathbf{-H)\\hat{X}})}{diag(\\mathbf{X}'(\\mathbf{-H)X})}.","code":""},{"path":"/articles/Class_separation.html","id":"within-class-sample-predictivity","dir":"Articles","previous_headings":"The functions fit.measures() and summary() > Predictivity > Within class predictivity","what":"Within class sample predictivity","title":"Class separation","text":"Unlike PCA biplots, sample predictivity CVA biplots computed observations expressed deviations class means. elementwise ratios obtained withinclassaxispredictivity=diag((𝐈−𝐇)𝐗̂𝐖−1𝐗̂′(𝐈−𝐇))diag((𝐈−𝐇)𝐗𝐖−1𝐗′(𝐈−𝐇)). within \\: class \\: axis \\: predictivity = \\frac{diag(\\mathbf{(-H)\\hat{X}}\\mathbf{W}^{-1}\\mathbf{\\hat{X}'(-H)})}{diag(\\mathbf{(-H)X}\\mathbf{W}^{-1}\\mathbf{X'(-H)})}.  display fit measures, create biplot object measures added function fit.measures() call summary().  call biplot(), CVA() fit.measures() required () create object class biplot, (b) extend object class CVA (c) compute fit measures. call function plot() optional. possible select fit measures display summary() function measures default TRUE.","code":"obj <- biplot(state.x77, scaled = TRUE) |>         CVA(classes = state.division) |>         fit.measures() |>        plot() summary (obj) #> Object of class biplot, based on 50 samples and 8 variables. #> 8 numeric variables. #> 9 classes: New England Middle Atlantic South Atlantic East South Central West South Central East North Central West North Central Mountain Pacific  #>  #> Quality of fit of canonical variables in 2 dimension(s) = 70.7%  #> Quality of fit of original variables in 2 dimension(s) = 70.5%  #> Adequacy of variables in 2 dimension(s): #> Population     Income Illiteracy   Life Exp     Murder    HS Grad      Frost  #> 0.41716176 0.15621549 0.16136381 0.09759664 0.19426796 0.55332679 0.50497634  #>       Area  #> 0.40661470  #> Axis predictivity in 2 dimension(s): #> Population     Income Illiteracy   Life Exp     Murder    HS Grad      Frost  #>  0.1859124  0.4019427  0.8195756  0.6925389  0.7685373  0.9506355  0.7819324  #>       Area  #>  0.8458143  #> Class predictivity in 2 dimension(s): #>        New England    Middle Atlantic     South Atlantic East South Central  #>          0.7922047          0.6570417          0.8191791          0.8777759  #> West South Central East North Central West North Central           Mountain  #>          0.7416085          0.6370315          0.3265978          0.6825966  #>            Pacific  #>          0.6700194  #> Within class axis predictivity in 2 dimension(s): #> Population     Income Illiteracy   Life Exp     Murder    HS Grad      Frost  #> 0.04212318 0.09357501 0.25675620 0.19900223 0.29474972 0.75215233 0.31027358  #>       Area  #> 0.12741853  #> Within class sample predictivity in 2 dimension(s): #>        Alabama         Alaska        Arizona       Arkansas     California  #>    0.722548912    0.163442379    0.333341120    0.268976273    0.229139828  #>       Colorado    Connecticut       Delaware        Florida        Georgia  #>    0.264963758    0.082284385    0.593415987    0.461070888    0.636531435  #>         Hawaii          Idaho       Illinois        Indiana           Iowa  #>    0.015640188    0.113711473    0.338612599    0.389208196    0.507060148  #>         Kansas       Kentucky      Louisiana          Maine       Maryland  #>    0.784831952    0.314119027    0.078465054    0.008388471    0.306141816  #>  Massachusetts       Michigan      Minnesota    Mississippi       Missouri  #>    0.076563044    0.218470793    0.645446212    0.046129058    0.710971640  #>        Montana       Nebraska         Nevada  New Hampshire     New Jersey  #>    0.086279776    0.810374638    0.090490164    0.298187909    0.003496353  #>     New Mexico       New York North Carolina   North Dakota           Ohio  #>    0.007134343    0.024268121    0.422776032    0.446240464    0.277262145  #>       Oklahoma         Oregon   Pennsylvania   Rhode Island South Carolina  #>    0.450104680    0.108636860    0.033945796    0.415029328    0.261568299  #>   South Dakota      Tennessee          Texas           Utah        Vermont  #>    0.134881180    0.247921823    0.110537439    0.500454605    0.159941068  #>       Virginia     Washington  West Virginia      Wisconsin        Wyoming  #>    0.310439564    0.030877305    0.066303623    0.295499472    0.474458397 obj <- biplot(state.x77, scaled = TRUE) |>         CVA(classes = state.region) |>         fit.measures() summary (obj, adequacy = FALSE, within.class.axis.predictivity = FALSE,          within.class.sample.predictivity = FALSE) #> Object of class biplot, based on 50 samples and 8 variables. #> 8 numeric variables. #> 4 classes: Northeast South North Central West  #>  #> Quality of fit of canonical variables in 2 dimension(s) = 91.9%  #> Quality of fit of original variables in 2 dimension(s) = 95.3%  #> Axis predictivity in 2 dimension(s): #> Population     Income Illiteracy   Life Exp     Murder    HS Grad      Frost  #>  0.9873763  0.9848608  0.8757913  0.9050208  0.9955088  0.9970346  0.9558192  #>       Area  #>  0.9344651  #> Class predictivity in 2 dimension(s): #>     Northeast         South North Central          West  #>     0.8031465     0.9985089     0.6449906     0.9988469"},{"path":"/articles/Class_separation.html","id":"additional-cva-dimensions","dir":"Articles","previous_headings":"","what":"Additional CVA dimensions","title":"Class separation","text":"mentioned eigen equation (1) min(p,G−1)min(p, G-1) non-zero eigenvalues. implies CVA biplot G=2G=2 groups, reduces single dimension. write 𝐌=[𝐦1𝐌*] \\mathbf{M} = \\begin{bmatrix}              \\mathbf{m}_1 & \\mathbf{M}^*              \\end{bmatrix}  columns 𝐌*\\mathbf{M}^* forms basis orthogonal complement canonical space defined 𝐦\\mathbf{m}_1. argument low.dim determines uniquely define second third dimensions. default low.dim = \"sample.opt\" selects dimensions minimising total squared reconstruction error samples. representation canonical variates 𝐙‾=𝐗‾𝐦1\\bar{\\mathbf{Z}} = \\bar{\\mathbf{X}}\\mathbf{m}_1 exact first dimension, representation individual samples 𝐙=𝐗𝐦1{\\mathbf{Z}} = {\\mathbf{X}}\\mathbf{m}_1. define 𝐗̂=𝐗𝐌𝐉𝐌−1\\mathbf{\\hat{X}} = \\mathbf{XMJ}\\mathbf{M}^{-1} 𝐉\\mathbf{J} square matrix zeros except 11 first diagonal position, total square reconstruction error samples given TSRES=tr(𝐗−𝐗̂)′(𝐗−𝐗̂). TSRES = tr{(\\mathbf{X}-\\mathbf{\\hat{X}})'(\\mathbf{X}-\\mathbf{\\hat{X}})}.  Define 𝐌−1=[𝐌(1):(G−1)×p𝐌(2):(p−G+1)×p] \\mathbf{M}^{-1} = \\begin{bmatrix} \\mathbf{M}^{(1)}:(G-1) \\times p \\\\ \\mathbf{M}^{(2)}: (p-G+1) \\times p \\end{bmatrix} TSRESTSRES minimised 𝐌opt=[𝐌1𝐌*𝐕]   \\mathbf{M}^{opt} = \\begin{bmatrix}   \\mathbf{M}_1 & \\mathbf{M}^*\\mathbf{V}   \\end{bmatrix} 𝐕\\mathbf{V} matrix right singular vectors 𝐌(2)𝐌(2)′\\mathbf{M}^{(2)}\\mathbf{M}^{(2)'}.  le Roux Gardner-Lubbe (2024) discuss alternative method obtaining additional dimensions. assuming underlying normal distributions, Bhattacharyya distance can optimised. method specific two class case utilised find third dimension 3D CVA biplot three classes.","code":"state.2group <- ifelse(state.division == \"New England\" |                         state.division == \"Middle Atlantic\"  |                        state.division == \"South Atlantic\" |                        state.division == \"Pacific\",                        \"Coastal\", \"Central\") biplot (state.x77) |> CVA (state.2group) |> legend.type(means=TRUE) |> plot() #> Warning in CVA.biplot(biplot(state.x77), state.2group): The dimension of the #> canonical space < dim.biplot sample.opt method used for additional #> dimension(s). biplot (state.x77) |> CVA (state.2group, low.dim=\"Bha\") |> legend.type(means=TRUE) |> plot() #> Warning in CVA.biplot(biplot(state.x77), state.2group, low.dim = \"Bha\"): The #> dimension of the canonical space < dim.biplot Bhattacharyya.dist method used #> for additional dimension(s)."},{"path":"/articles/Class_separation.html","id":"analysis-of-distance-aod","dir":"Articles","previous_headings":"","what":"Analysis of Distance (AoD)","title":"Class separation","text":"Similar variance decomposition CVA, analysis distance decomposes total sum squared distances sum squared distances class means component sum squared distances within classes component. Consider Euclidean embeddable distance metric ψij=ψ(𝐱,𝐱j)\\psi_{ij}=\\psi(\\mathbf{x}_i,\\mathbf{x}_j). Euclidean embeddable metric possible find high dimensional coordinates 𝐲\\mathbf{y}_i 𝐲j\\mathbf{y}_j Euclidean distance 𝐲\\mathbf{y}_i 𝐲j\\mathbf{y}_j equal ψij\\psi_{ij}. Let matrix 𝚿̃\\mathbf{\\tilde\\Psi} contain values −12ψij2-\\frac{1}2{}\\psi_{ij}^2 similarly 𝚫̃\\mathbf{\\tilde\\Delta} values −12δhk2-\\frac{1}2{}\\delta_{hk}^2 δhk\\delta_{hk} represent distance class means hh kk. 𝐓=𝐁+𝐖 \\mathbf{T} = \\mathbf{B} + \\mathbf{W} 𝟏′𝚿̃𝟏=𝐧′𝚫̃𝐧+∑k=1Gnnk𝐠k′𝚿̃𝐠k \\mathbf{1'\\tilde\\Psi1} = \\mathbf{n'\\tilde\\Delta n} + \\sum_{k=1}^{G} \\frac{n}{n_k} \\mathbf{g}_k'\\mathbf{\\tilde\\Psi}\\mathbf{g}_k  𝐧=(𝐆′𝐆)𝟏\\mathbf{n}=\\mathbf{(G'G)1}. Thus, AoD differs CVA allowing Euclidean embeddable measure inter-class distance. CVA, distances may represented maps point representing class means, supplemented additional points representing within-group variation. Principal coordinate analysis performed, G×GG \\times G matrix 𝚫̃\\mathbf{\\tilde\\Delta}.  default linear regression biplot axes fitted plot. Alternatively, spline axes can constructed.  illustration Euclidean embeddable distance metric, Euclidean distance , can construct AoD biplot square root Manhattan distance.","code":"biplot(state.x77, scaled = TRUE) |> AoD(classes = state.region) |> plot() biplot(state.x77, scaled = TRUE) |> AoD(classes = state.region, axes = \"splines\") |> plot() #> Calculating spline axis for variable 1  #> Calculating spline axis for variable 2  #> Calculating spline axis for variable 3  #> Calculating spline axis for variable 4  #> Calculating spline axis for variable 5  #> Calculating spline axis for variable 6  #> Calculating spline axis for variable 7  #> Calculating spline axis for variable 8 biplot(state.x77, scaled = TRUE) |>    AoD(classes = state.region, axes = \"splines\", dist.func=sqrtManhattan) |> plot() #> Calculating spline axis for variable 1  #> Calculating spline axis for variable 2  #> Calculating spline axis for variable 3  #> Calculating spline axis for variable 4  #> Calculating spline axis for variable 5  #> Calculating spline axis for variable 6  #> Calculating spline axis for variable 7  #> Calculating spline axis for variable 8"},{"path":[]},{"path":"/articles/MDS.html","id":"what-is-mds","dir":"Articles","previous_headings":"","what":"What is MDS","title":"MDS","text":"general, multidimensional scaling deals constructing low dimensional map nn samples Euclidean distances samples match given set dissimilarities 𝚫:n×n\\mathbf{\\Delta}:n \\times n closely possible. focus Principal Coordinate Analysis (PCO), approach based singular value decomposition matrix. However, regression biplot provides general structure fitting 2D map samples biplot axes.","code":""},{"path":"/articles/MDS.html","id":"regression-biplot","dir":"Articles","previous_headings":"","what":"Regression biplot","title":"MDS","text":"function regress accepts arguments object class biplot. call function biplot contain data set used construct biplot axes. second argument Z contains coordinates samples MDS map. default linear regression axes fitted plot. 𝐗\\mathbf{X} denote data matrix, directions biplot axes found solving regression equation 𝐗=𝐙𝐇′+𝐄. \\mathbf{X} = \\mathbf{ZH}' + \\mathbf{E}.  matrix 𝐇′=(𝐙′𝐙)−1𝐙′𝐗\\mathbf{H}'=(\\mathbf{Z'Z})^{-1}\\mathbf{Z'X} calibration axes proceed analogous equation (2) biplotEZ vignette. coordinates marker /mu/mu biplot axis jj given follows pμ=μ𝐡(j)′𝐡(j)𝐡(j). p_{\\mu} =  \\frac{\\mu}{\\mathbf{h}_{(j)}'\\mathbf{h}_{(j)}}\\mathbf{h}_{(j)}.  flexibility provided approximating biplot axes using B-splines. calibrated trajectory represented matrix 𝐇:m×2\\mathbf{H}:m \\times 2 snakes samples points 𝐙\\mathbf{Z} marker trajectory closest particular sample gives predicted value sample particular variable. retain smoothness trajectory 𝐇\\mathbf{H}, B-splines used.","code":"biplot(rock) |>    regress(Z = MASS::sammon(dist(scale(rock), method=\"manhattan\"))$points) |>    plot() #> Initial stress        : 0.02554 #> stress after  10 iters: 0.01094, magic = 0.500 #> stress after  20 iters: 0.01080, magic = 0.500 #> stress after  30 iters: 0.01078, magic = 0.500 biplot(rock) |>    regress(Z = MASS::sammon(dist(scale(rock), method=\"manhattan\"))$points,           axes = \"splines\") |>    plot() #> Initial stress        : 0.02554 #> stress after  10 iters: 0.01094, magic = 0.500 #> stress after  20 iters: 0.01080, magic = 0.500 #> stress after  30 iters: 0.01078, magic = 0.500 #> Calculating spline axis for variable 1  #> Calculating spline axis for variable 2  #> Calculating spline axis for variable 3  #> Calculating spline axis for variable 4"},{"path":"/articles/MDS.html","id":"principal-coordinate-analysis-pco-biplots","dir":"Articles","previous_headings":"","what":"Principal Coordinate Analysis (PCO) biplots","title":"MDS","text":"Let 𝚫̃\\mathbf{\\tilde\\Delta} n×nn \\times n matrix containing values −12δij2-\\frac{1}{2}\\delta_{ij}^2 δij\\delta_{ij} represent dissimilarity objects ii jj. possible find set coordinates 𝐘:n×m\\mathbf{Y}:n\\times m typically m=n−1m = n-1 Euclidean distances rows 𝐘\\mathbf{Y} exactly match dissimilarities δij\\delta_{ij}, dissimilarity known Euclidean embeddable distance metric. J. C. Gower (1982) shows distances δij\\delta_{ij} Euclidean embeddable, (𝐈−𝟏𝐬′)𝚫̃(𝐈−𝐬𝟏′) (\\mathbf{}-\\mathbf{1s}')\\mathbf{\\tilde\\Delta} (\\mathbf{}-\\mathbf{s1}') positive semi-definite. Euclidean representation samples obtained 𝐘=𝐕𝚲12\\mathbf{Y=V\\Lambda}^{\\frac{1}{2}} (𝐈−𝟏𝐬′)𝚫̃(𝐈−𝐬𝟏′)=𝐕𝚲𝐕′(\\mathbf{}-\\mathbf{1s}')\\mathbf{\\tilde\\Delta} (\\mathbf{}-\\mathbf{s1}') = \\mathbf{V \\Lambda V'}. Since coordinates 𝐘\\mathbf{Y} already referred principal axes 𝐘′𝐘=𝚲\\mathbf{Y'Y=\\Lambda}, representation samples 2D biplot obtained first two columns 𝐘\\mathbf{Y}. addition exact biplot axis representations discussed J. C. Gower, Lubbe, Roux (2011) approximate axes can obtained. Linear axes fitted regression method. variables data matrix 𝐗:n×p\\mathbf{X}:n \\times p can represented biplot axes PCO biplot sample points 𝐙=𝐕𝚲12𝐉2\\mathbf{Z=V\\Lambda}^{\\frac{1}{2}}\\mathbf{J}_2 according regression method discussed section 2 .  Using B-splines instead linear regression provides user flexibility. achieved setting argument axes = \"splines\".  default distance metric used analysis Euclidean distance. user can also specify distance matrix Dmat n×nn \\times n matrix dist object. illustration metric Euclidean embeddable, Clark’s distance δij2=∑k=1p(xik−xjkxik+xjk)2 \\delta_{ij}^2 = \\sum_{k=1}^{p}\\left(\\frac{x_{ik}-x_{jk}}{x_{ik}+x_{jk}}\\right)^2 defined John C. Gower Ngouenet (2005) calculated used constructing PCO biplot. Note metric defined strictly positive values, data scaled values 11 22.  Alternatively, user can specify function computes distance matrix dist object. Manhattan distance Euclidean embeddable, square root distance . function sqrtManhattan included example function computing Euclidean embeddable dist object.","code":"biplot(rock, scale = TRUE) |> PCO() |> plot() biplot(rock, scale = TRUE) |> PCO(axes = \"splines\") |> plot() #> Calculating spline axis for variable 1  #> Calculating spline axis for variable 2  #> Calculating spline axis for variable 3  #> Calculating spline axis for variable 4 Clark.dist <- function(X) {   n <- nrow(X)   p <- ncol(X)   Dmat <- matrix (0, nrow=n, ncol=n)   for (i in 1:(n-1))     for (j in (i+1):n)       Dmat[i,j] <- sum(((X[i,] - X[j,])/(X[i,] + X[j,]))^2)   sqrt(Dmat + t(Dmat)) } my.data <- scale(rock, center=apply(rock,2,min), scale=diff(apply(rock,2,range)))+1 biplot(rock) |> PCO(Dmat = Clark.dist (rock), axes = \"splines\") |> plot() #> Calculating spline axis for variable 1  #> Calculating spline axis for variable 2  #> Calculating spline axis for variable 3  #> Calculating spline axis for variable 4 sqrtManhattan #> function (X)  #> { #>     sqrt(stats::dist(X, method = \"manhattan\")) #> } #> <bytecode: 0x0000026c5c96d260> #> <environment: namespace:biplotEZ> biplot(rock, scaled = TRUE) |> PCO(dist.func = sqrtManhattan) |> plot()"},{"path":[]},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Sugnet Lubbe. Author, maintainer, copyright holder. Niël le Roux. Author. Johané Nienkemper-Swanepoel. Author. Raeesa Ganey. Author. Ruan Buys. Author. Zoë-Mae Adams. Author. Peter Manefeldt. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Lubbe S, le Roux N, Nienkemper-Swanepoel J, Ganey R, Buys R, Adams Z, Manefeldt P (2025). biplotEZ: EZ--Use Biplots. R package version 2.3.","code":"@Manual{,   title = {biplotEZ: EZ-to-Use Biplots},   author = {Sugnet Lubbe and Niël {le Roux} and Johané Nienkemper-Swanepoel and Raeesa Ganey and Ruan Buys and Zoë-Mae Adams and Peter Manefeldt},   year = {2025},   note = {R package version 2.3}, }"},{"path":"/index.html","id":"biplotez","dir":"","previous_headings":"","what":"EZ-to-Use Biplots","title":"EZ-to-Use Biplots","text":"goal biplotEZ provide users EZ--use platform visually representing data biplots. Currently, package includes principal component analysis (PCA) canonical variate analysis (CVA) biplots. accompanied various formatting options samples axes. Alpha-bags concentration ellipses included visual enhancements interpretation.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"EZ-to-Use Biplots","text":"can install development version biplotEZ like :","code":"library(devtools) devtools::install_github(\"MuViSU/biplotEZ\")"},{"path":"/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"EZ-to-Use Biplots","text":"basic example shows construct PCA biplot:  PCA biplot provides visual representation overall data set, optimally representing variance 1, 2 3 dimensions, CVA biplot aims optimally separate specified groups data. basic example shows construct CVA biplot:  --top example changing formatting adding bells whistles:","code":"library(biplotEZ) #>  #> Attaching package: 'biplotEZ' #> The following object is masked from 'package:stats': #>  #>     biplot biplot (iris[,1:4], Title=\"Test PCA biplot\") |> PCA() |> plot() biplot (iris[,1:4], Title=\"Test CVA biplot\") |> CVA(classes=iris[,5]) |> plot() biplot (iris[,1:4], group.aes=iris[,5]) |> PCA() |>    samples(col=\"gold\", pch=15) |>   axes(which=2:3, col=\"cyan\", label.cex=1.2, tick.col=\"blue\",                                               tick.label.col=\"purple\") |>   alpha.bags (alpha=c(0.5,0.75,0.95), which=3, col=\"red\", lty=1:3, lwd=3) |>   ellipses(alpha=0.9, which=1:2, col=c(\"green\",\"olivedrab\")) |>   legend.type(bags = TRUE, ellipses=TRUE) |>   plot() #> Computing 0.5 -bag for virginica  #> Computing 0.75 -bag for virginica  #> Computing 0.95 -bag for virginica  #> Computing 2.15 -ellipse for setosa  #> Computing 2.15 -ellipse for versicolor"},{"path":"/index.html","id":"ca-biplot","dir":"","previous_headings":"","what":"CA biplot","title":"EZ-to-Use Biplots","text":"default CA biplots represents row principal coordinates call :  change row standard coordinates use call :","code":"biplot(HairEyeColor[,,2], center = FALSE) |> CA() |> plot() biplot(HairEyeColor[,,2], center = FALSE) |>    CA(variant = \"Stand\") |> samples(col=c(\"magenta\",\"purple\"), pch=c(15,18)) |> plot()"},{"path":"/index.html","id":"regression-biplot","dir":"","previous_headings":"","what":"Regression biplot","title":"EZ-to-Use Biplots","text":"function regress linear regression biplot axes can fitted biplot","code":"out <- biplot(iris) |> PCO(dist.func = sqrtManhattan)  biplot(iris) |> regress(out$Z) |> plot()"},{"path":"/index.html","id":"report-bugs-and-support","dir":"","previous_headings":"","what":"Report Bugs and Support","title":"EZ-to-Use Biplots","text":"encounter issues questions, please open issue GitHub repository.","code":""},{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 biplotEZ authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/reference/alpha.bags.html","id":null,"dir":"Reference","previous_headings":"","what":"Create alpha bags — alpha.bags","title":"Create alpha bags — alpha.bags","text":"function produces \\(\\alpha\\)-bags, useful graphical summary scatter plot. alpha-bag refers contour contains \\(\\alpha\\)% observations.","code":""},{"path":"/reference/alpha.bags.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create alpha bags — alpha.bags","text":"","code":"alpha.bags(bp, alpha = 0.95, which = NULL, col = ez.col[which], lty = 1, lwd = 1, max = 2500, trace = TRUE, opacity = 0.25, outlying=FALSE)"},{"path":"/reference/alpha.bags.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create alpha bags — alpha.bags","text":"bp object class biplot. alpha numeric vector 0 1 determine coverage bag (\\(\\alpha\\)), default 0.95. numeric vector indicating selection groups classes fitted \\(\\alpha\\)-bags. col vector colours \\(\\alpha\\)-bags. Multiple \\(\\alpha\\) bags one group displayed colour. lty vector line types \\(\\alpha\\)-bags. line type used per value \\(\\alpha\\). lwd vector line widths \\(\\alpha\\)-bags. line width used per value \\(\\alpha\\). max maximum number samples include \\(\\alpha\\)-bag calculations, default 2500. samples group, random sample size max taken computations. trace logical, indicating progress computation. opacity level opacity, default 0.5. outlying logical indicating whether outlying points plotted. Note argument may overwritten TRUE","code":""},{"path":"/reference/alpha.bags.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create alpha bags — alpha.bags","text":"list following components available: alpha.bags list coordinates \\(\\alpha\\)-bags group. col vector colours \\(\\alpha\\)-bags. lty vector line types \\(\\alpha\\)-bags. lwd vector line widths \\(\\alpha\\)-bags.","code":""},{"path":"/reference/alpha.bags.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Create alpha bags — alpha.bags","text":"Gower, J., Gardner-Lubbe, S. & Le Roux, N. (2011, ISBN: 978-0-470-01255-0) Understanding Biplots. Chichester, England: John Wiley & Sons Ltd.","code":""},{"path":"/reference/alpha.bags.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create alpha bags — alpha.bags","text":"","code":"biplot (iris[,1:4]) |> PCA(group.aes=iris[,5]) |> alpha.bags(alpha=0.95) |> plot() #> Computing 0.95 -bag for setosa  #> Computing 0.95 -bag for versicolor  #> Computing 0.95 -bag for virginica   biplot (iris[,1:4],group.aes=iris[,5]) |> PCA() |> alpha.bags(alpha=0.95) |> plot() #> Computing 0.95 -bag for setosa  #> Computing 0.95 -bag for versicolor  #> Computing 0.95 -bag for virginica"},{"path":"/reference/AoD.biplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate elements for the Analysis of Distance (AoD) biplot — AoD.biplot","title":"Calculate elements for the Analysis of Distance (AoD) biplot — AoD.biplot","text":"function used construct AoD biplot","code":""},{"path":"/reference/AoD.biplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate elements for the Analysis of Distance (AoD) biplot — AoD.biplot","text":"","code":"# S3 method for class 'biplot' AoD(   bp,   classes = bp$classes,   dist.func = NULL,   dist.func.cat = NULL,   dim.biplot = c(2, 1, 3),   e.vects = 1:ncol(bp$X),   weighted = c(\"unweighted\", \"weighted\"),   show.class.means = TRUE,   axes = c(\"regression\", \"splines\"),   ... )"},{"path":"/reference/AoD.biplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate elements for the Analysis of Distance (AoD) biplot — AoD.biplot","text":"bp object class biplot obtained preceding function biplot(). classes vector length number rows data matrix class indicator samples. dist.func character string indicating distance function used compute Euclidean embeddable distances samples. One NULL (default) computes Euclidean distance functions can used dist() function. dist.func.cat character string indicating distance function used compute Euclidean embeddable distances samples. One NULL (default) computes extended matching coefficient functions. dim.biplot dimension biplot. values 1, 2 3 accepted, default 2. e.vects vector indicating eigenvectors (canonical variates) plotted biplot, default 1:dim.biplot. weighted character string indicating weighting classes. One \"unweighted\" class receive equal weighting \"weighted\" class receive class sizes weights. show.class.means logical value indicating whether plot class means biplot. axes character string indicating type biplot axes used biplot. One \"regression\" \"splines\". ... arguments dist.func.","code":""},{"path":"/reference/AoD.biplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate elements for the Analysis of Distance (AoD) biplot — AoD.biplot","text":"object class biplot.","code":""},{"path":"/reference/AoD.biplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate elements for the Analysis of Distance (AoD) biplot — AoD.biplot","text":"","code":"biplot(iris) |> AoD(classes = iris[,5]) |> plot()"},{"path":"/reference/AoD.html","id":null,"dir":"Reference","previous_headings":"","what":"Use the Analysis of Distance (AoD) method to construct the biplot — AoD","title":"Use the Analysis of Distance (AoD) method to construct the biplot — AoD","text":"function appends biplot object elements resulting using AoD method.","code":""},{"path":"/reference/AoD.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use the Analysis of Distance (AoD) method to construct the biplot — AoD","text":"","code":"AoD(bp, classes=bp$classes, dist.func=NULL, dist.func.cat=NULL, dim.biplot = c(2,1,3), e.vects = 1:ncol(bp$X),  weighted = c(\"unweighted\",\"weighted\"), show.class.means = TRUE,  axes = c(\"regression\",\"splines\"), ...)"},{"path":"/reference/AoD.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use the Analysis of Distance (AoD) method to construct the biplot — AoD","text":"bp object class biplot obtained preceding function biplot(). classes vector length number rows data matrix class indicator samples. dist.func character string indicating distance function used compute Euclidean embeddable distances samples. One NULL (default) computes Euclidean distance functions can used dist() function. dist.func.cat character string indicating distance function used compute Euclidean embeddable distances samples. One NULL (default) computes extended matching coefficient functions. dim.biplot dimension biplot. values 1, 2 3 accepted, default 2. e.vects vector indicating eigenvectors (canonical variates) plotted biplot, default 1:dim.biplot. weighted character string indicating weighting classes. One \"unweighted\" class receive equal weighting \"weighted\" class receive class sizes weights. show.class.means logical value indicating whether plot class means biplot. axes character string indicating type biplot axes used biplot. One \"regression\" \"splines\". ... arguments dist.func.","code":""},{"path":"/reference/AoD.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use the Analysis of Distance (AoD) method to construct the biplot — AoD","text":"Object class biplot","code":""},{"path":"/reference/AoD.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Use the Analysis of Distance (AoD) method to construct the biplot — AoD","text":"","code":"biplot(iris[,1:4]) |> AoD(classes=iris[,5]) #> Object of class biplot, based on 150 samples and 4 variables. #> 4 numeric variables. #> 3 classes: setosa versicolor virginica  # create a CVA biplot biplot(iris[,1:4]) |> AoD(classes=iris[,5]) |> plot()"},{"path":"/reference/axes.html","id":null,"dir":"Reference","previous_headings":"","what":"Format aesthetics for the biplot axes — axes","title":"Format aesthetics for the biplot axes — axes","text":"function allows user format aesthetics biplot axes.","code":""},{"path":"/reference/axes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format aesthetics for the biplot axes — axes","text":"","code":"axes(bp, X.names=colnames(bp$X), which = 1:bp$p, col = grey(0.7), lwd = 1, lty = 1, label.dir = \"Orthog\", label.col = col, label.cex = 0.75, label.line = 0.1,  label.offset=rep(0,4), ticks = 5, tick.col = col, tick.size = 1, tick.label = TRUE,  tick.label.side = \"below\", tick.label.col = tick.col, tick.label.cex = 0.6, predict.col = col, predict.lwd = lwd, predict.lty = lty, ax.names = X.names, orthogx = 0, orthogy = 0, vectors = FALSE, unit.circle=FALSE)"},{"path":"/reference/axes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format aesthetics for the biplot axes — axes","text":"bp object class biplot. X.names vector column names bp specify axes labelled. vector containing columns variables axes displayed, default 1:p. col colour(s) axes, default grey(0.7). Alternatively, provide vector colours corresponding X.names. lwd line width(s) axes, default 1. lty line type(s) axes, default 1. label.dir character string indicating placement axis titles side figure. One \"Orthog\" axis titles appear orthogonal side figure (default) , \"Hor\" axis titles appear horizontally \"Paral\" axis titles appear parallel side figure. label.col colour(s) axis labels, default, col. label.cex label expansion axis labels, default 0.75. label.line distance axis title side figure, default 0.1. label.offset four-component numeric vector controlling distances axis titles displayed side figure, default rep(0,4). Sides numbered 1 4 according R conventions. ticks integer-valued vector indicating number tickmarks axis, default 5 axis. tick.col colour(s) tick marks, default col. tick.size vector specifying sizes tick marks axis, default 1 . tick.label logical value indicating whether axes labelled, default TRUE. tick.label.side character string indicating position tick label. One \"\" label appear tick mark (default) \"\" label appear tick mark. tick.label.col colour(s) tick mark labels, default tick.col. tick.label.cex label expansion tick mark labels, default 0.6. predict.col colour(s) predicted samples, default col. predict.lwd line width(s) predicted samples, default lwd. predict.lty line type(s) predicted samples, default lty. ax.names vector size p containing user defined titles axes. orthogx numeric vector size p specifying x-coordinate parallel transformation axis, default 0 axis. used dim.biplot = 2. orthogy numeric vector size p specifying y-coordinate parallel transformation axis, default 0 axis. used dim.biplot = 2. vectors logical value indicating whether vector representation (calibrated axes) displayed biplot. used PCA biplot produced. unit.circle logical value indicating whether unit circle displayed biplot.","code":""},{"path":"/reference/axes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format aesthetics for the biplot axes — axes","text":"object class biplot appended list called axes containing following elements: vector containing columns axes displayed. col colour(s) axes. lwd line width(s) axes. lty line type(s) axes. label.dir placement axis titles side figure. label.col colour(s) axis titles. label.cex label expansion(s) axis titles. label.line distance(s) axis titles side figure. ticks number tick marks per axis. tick.col colour(s) tick marks. tick.size size(s) tick marks. tick.label logical value(s) indicating whether axes labelled. tick.label.side position tick mark labels. tick.label.col colour(s) tick mark labels. tick.label.cex expansion(s) tick mark labels. predict.col colour(s) predicted samples. predict.lty line type(s) predicted samples. predict.lwd line width(s) predicted samples. names user defined axis titles. orthogx horizontal translations axis. orthogy vertical translations axis. vectors logical value indicating whether calibrated axes plotted.","code":""},{"path":[]},{"path":"/reference/axes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format aesthetics for the biplot axes — axes","text":"","code":"biplot(iris[,1:4]) |> PCA() |> axes(col=\"purple\") |> plot()  biplot(iris[,1:4]) |> PCA() |> samples(col=\"purple\",pch=15) |> axes() |> plot()"},{"path":"/reference/axes_coordinates.html","id":null,"dir":"Reference","previous_headings":"","what":"Calibrate Biplot Axes — axes_coordinates","title":"Calibrate Biplot Axes — axes_coordinates","text":"Convenience function obtain coordinates calibrated ticks marks biplot","code":""},{"path":"/reference/axes_coordinates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calibrate Biplot Axes — axes_coordinates","text":"","code":"axes_coordinates(x)"},{"path":"/reference/axes_coordinates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calibrate Biplot Axes — axes_coordinates","text":"x object class biplot","code":""},{"path":"/reference/axes_coordinates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calibrate Biplot Axes — axes_coordinates","text":"ordered list containing coordinates tick marks plotted biplot","code":""},{"path":"/reference/axes_coordinates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calibrate Biplot Axes — axes_coordinates","text":"","code":"x<-biplot(iris) |> PCA() coordinates<-axes_coordinates(x)"},{"path":"/reference/biplot.html","id":null,"dir":"Reference","previous_headings":"","what":"First step to create a new biplot with biplotEZ — biplot","title":"First step to create a new biplot with biplotEZ — biplot","text":"function produces list elements used producing biplot, provides useful data analysis tool allows visual appraisal structure large data matrices. Biplots multivariate analogue scatter plots. approximate multivariate distribution sample dimensions superimpose display representations variables samples measured.","code":""},{"path":"/reference/biplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"First step to create a new biplot with biplotEZ — biplot","text":"","code":"biplot(data, classes = NULL, group.aes = NULL, center = TRUE, scaled = FALSE, Title = NULL)"},{"path":"/reference/biplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"First step to create a new biplot with biplotEZ — biplot","text":"data data frame numeric matrix containing variables user wants analyse. classes vector identifying class membership. group.aes vector identifying groups aesthetic formatting. center logical value indicating whether data column centered, default TRUE. scaled logical value indicating whether data standardised unit column variances, default FALSE. Title title biplot rendered, enter text \"  \".","code":""},{"path":"/reference/biplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"First step to create a new biplot with biplotEZ — biplot","text":"list following components available: X matrix centered scaled numeric variables. Xcat data frame categorical variables. raw.X original data. classes vector category levels class variable. used colour, pch cex specifications. na.action vector observations removed. center logical value indicating whether \\(\\mathbf{X}\\) centered. scaled logical value indicating whether \\(\\mathbf{X}\\) scaled. means vector means numeric variable. sd vector standard deviations numeric variable. n number observations. p number variables. group.aes vector category levels grouping variable. used colour, pch cex specifications. g.names descriptive names used group labels. g number groups. Title title biplot rendered","code":""},{"path":"/reference/biplot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"First step to create a new biplot with biplotEZ — biplot","text":"function entry-level function biplotEZ construct biplot display. initialises object class biplot can piped various functions build biplot display.","code":""},{"path":"/reference/biplot.html","id":"useful-links","dir":"Reference","previous_headings":"","what":"Useful links","title":"First step to create a new biplot with biplotEZ — biplot","text":"biplot display can built four broad steps depending needs display. Firstly, choose appropriate method construct display; Secondly, change aesthetics display; Thirdly, append display supplementary features axes, samples means; Finally, superimpose shapes, characters elements onto display. 1. Different types biplots: PCA(): Principal Component Analysis biplot various dimensions CVA(): Canonical Variate Analysis biplot PCO(): Principal Coordinate Analysis biplot CA(): Correspondence Analysis biplot regress(): Regression biplot method 2. Customise biplot display aesthetic functions: samples(): Change formatting sample points biplot display axes(): Change formatting biplot axes 3. Supplement existing biplot additional axes, samples group means: newsamples(): Add change formatting additional samples newaxes(): Add change formatting additional axes means(): Insert class means display, format appropriately 4. Append biplot display: alpha.bags(): Add \\(\\alpha\\)-bags ellipses(): Add ellipses density2D(): Add 2D density regions useful links: plot() fit.measures() legend.type() interpolate() prediction() classify() reflect() rotate()","code":""},{"path":"/reference/biplot.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"First step to create a new biplot with biplotEZ — biplot","text":"Gabriel, K.R. (1971) biplot graphic display matrices application principal component analysis. Biometrika. 58(3):453–467. Gower, J., Gardner-Lubbe, S. & Le Roux, N. (2011, ISBN: 978-0-470-01255-0) Understanding Biplots. Chichester, England: John Wiley & Sons Ltd. Gower, J.C. & Hand, D.J.(1996, ISBN: 0-412-71630-5) Biplots. London: Chapman & Hall.","code":""},{"path":"/reference/biplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"First step to create a new biplot with biplotEZ — biplot","text":"","code":"biplot(data = iris) #> Object of class biplot, based on 150 samples and 5 variables. #> 4 numeric variables. #> 1 categorical variable. # create a PCA biplot biplot(data = iris) |> PCA() |> plot()"},{"path":[]},{"path":"/reference/biplotEZ.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"biplotEZ: EZ-to-Use Biplots — biplotEZ","text":"goal biplotEZ provide users EZ--use platform visually representing data biplots. Currently, package includes principal component analysis (PCA) canonical variate analysis (CVA) biplots. accompanied various formatting options samples axes. Alpha-bags concentration ellipses included visual enhancements interpretation.","code":""},{"path":[]},{"path":"/reference/biplotEZ.html","id":"author-s-","dir":"Reference","previous_headings":"","what":"Author(s)","title":"biplotEZ: EZ-to-Use Biplots — biplotEZ","text":"Sugnet Lubbe (Maintainer, muvisu@sun.ac.za) Niël le Roux Johané Nienkemper-Swanepoel Raeesa Ganey Ruan Buys Zoë-Mae Adams Peter Manefeldt","code":""},{"path":"/reference/biplotEZ.html","id":"core-functions","dir":"Reference","previous_headings":"","what":"Core Functions","title":"biplotEZ: EZ-to-Use Biplots — biplotEZ","text":"biplot PCA CVA CA","code":""},{"path":"/reference/biplotEZ.html","id":"code-availability","dir":"Reference","previous_headings":"","what":"Code Availability","title":"biplotEZ: EZ-to-Use Biplots — biplotEZ","text":"newest version package can obtained GitHub: https://github.com/MuViSU/biplotEZ","code":""},{"path":"/reference/CA.biplot.html","id":null,"dir":"Reference","previous_headings":"","what":"CA biplot — CA.biplot","title":"CA biplot — CA.biplot","text":"Performs calculations CA biplot.","code":""},{"path":"/reference/CA.biplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"CA biplot — CA.biplot","text":"","code":"# S3 method for class 'biplot' CA(   bp,   dim.biplot = c(2, 1, 3),   e.vects = 1:ncol(bp$X),   variant = \"Princ\",   lambda.scal = FALSE )"},{"path":"/reference/CA.biplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"CA biplot — CA.biplot","text":"bp object class biplot obtained preceding function biplot(center = FALSE). order maintain frequency table, input centered scaled. CA, bp contingency table. dim.biplot dimension biplot. values 1, 2 3 accepted, default 2. e.vects eigenvectors (canonical variates) extract, default 1:dim.biplot. variant correspondence analysis variant, default \"Princ\", presents biplot rows principal coordinates columns standard coordinates. variant = \"Stand\", presents biplot rows standard coordinates columns principal coordinates. variant = \"symmetric\", presents symmetric biplot row column standard coordinates scaled equally singular values. lambda.scal logical value request lambda-scaling, default FALSE. Controls stretching shrinking column row distances.","code":""},{"path":"/reference/CA.biplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"CA biplot — CA.biplot","text":"object class CA, inherits class biplot.","code":""},{"path":"/reference/CA.biplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"CA biplot — CA.biplot","text":"","code":"biplot(HairEyeColor[,,2], center = FALSE) |> CA() |> plot()"},{"path":"/reference/CA.html","id":null,"dir":"Reference","previous_headings":"","what":"Correspondence Analysis (CA) method — CA","title":"Correspondence Analysis (CA) method — CA","text":"function produces list elements used CA biplot construction approximation Pearson residuals.","code":""},{"path":"/reference/CA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Correspondence Analysis (CA) method — CA","text":"","code":"CA(bp, dim.biplot = c(2,1,3), e.vects = 1:ncol(bp$X), variant = \"Princ\",  lambda.scal = FALSE)"},{"path":"/reference/CA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Correspondence Analysis (CA) method — CA","text":"bp object class biplot obtained preceding function biplot(center = FALSE). order maintain frequency table, input centered scaled. CA, bp contingency table. dim.biplot dimension biplot. values 1, 2 3 accepted, default 2. e.vects eigenvectors (canonical variates) extract, default 1:dim.biplot. variant correspondence analysis variant, default \"Princ\", presents biplot rows principal coordinates columns standard coordinates. variant = \"Stand\", presents biplot rows standard coordinates columns principal coordinates. variant = \"symmetric\", presents symmetric biplot row column standard coordinates scaled equally singular values. lambda.scal logical value request lambda-scaling, default FALSE. Controls stretching shrinking column row distances.","code":""},{"path":"/reference/CA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Correspondence Analysis (CA) method — CA","text":"list following components available: Z Combined data frame row column coordinates. r Numer levels row factor. c Numer levels column factor. Dr Diagonal matrix row profiles. Dc Diagonal matrix column profiles. Drh Weighted row profiles. Dch Weighted column profiles. rowcoor Row coordinates based selected variant. colcoor Column coordinates based selected variant. P Correspondence Matrix. Smat Standardised Pearson residuals. SVD Singular value decomposition solution: d, u, v. e.vects Depending specified CA argument. dim.biplot dimension biplot. lambda.val computed lambda value lambda-scaling requested. gamma Contribution singular values, based CA variant.","code":""},{"path":[]},{"path":"/reference/CA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Correspondence Analysis (CA) method — CA","text":"","code":"# Creating a CA biplot with rows in principal coordinates: biplot(HairEyeColor[,,2], center = FALSE) |> CA() |> plot()  # Creating a CA biplot with rows in standard coordinates: biplot(HairEyeColor[,,2], center = FALSE) |> CA(variant = \"Stand\") |>  samples(col=c(\"magenta\",\"purple\"), pch = c(15,17), label.col = \"black\") |> plot()  # Creating a CA biplot with rows and columns scaled equally: biplot(HairEyeColor[,,2], center = FALSE) |> CA(variant = \"Symmetric\") |>  samples(col = c(\"magenta\",\"purple\"), pch = c(15,17), label.col = \"black\") |> plot()"},{"path":"/reference/CATPCA.html","id":null,"dir":"Reference","previous_headings":"","what":"Categorical Principal Component Analysis — CATPCA","title":"Categorical Principal Component Analysis — CATPCA","text":"Categorical Principal Component Analysis","code":""},{"path":"/reference/CATPCA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Categorical Principal Component Analysis — CATPCA","text":"","code":"CATPCA(bp, dim.biplot = c(2, 1, 3), e.vects = 1:ncol(bp$X), group.aes = NULL, show.class.means = FALSE)"},{"path":"/reference/CATPCA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Categorical Principal Component Analysis — CATPCA","text":"bp object class biplot obtained preceding function biplot(). dim.biplot dimension biplot. values 1, 2 3 accepted, default 2. e.vects eigenvectors (principal components) extract, default 1:dim.biplot. group.aes vector length number rows data matrix differentiated aesthetics samples. show.class.means logical, indicating whether group means plotted biplot.","code":""},{"path":"/reference/CATPCA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Categorical Principal Component Analysis — CATPCA","text":"object class biplot","code":""},{"path":"/reference/CATPCA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Categorical Principal Component Analysis — CATPCA","text":"","code":"CATPCA (iris)"},{"path":"/reference/classification.biplot.html","id":null,"dir":"Reference","previous_headings":"","what":"classification biplot — classification.biplot","title":"classification biplot — classification.biplot","text":"Performs calculations classification biplot.","code":""},{"path":"/reference/classification.biplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"classification biplot — classification.biplot","text":"","code":"# S3 method for class 'biplot' classification(   bp,   Pmat,   dim.biplot = c(2, 1, 3),   e.vects = 1:ncol(bp$X),   group.aes = NULL,   axes = \"regression\",   col = ez.col,   opacity = 0.4,   borders = FALSE )"},{"path":"/reference/classification.biplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"classification biplot — classification.biplot","text":"bp object class biplot obtained preceding function biplot(). Pmat matrix containing posterior probability classes dim.biplot dimension biplot. values 1, 2 3 accepted, default 2. e.vects eigenvectors (principal components) extract, default 1:dim.biplot. group.aes vector length number rows data matrix differentiated aesthetics samples. axes type axes, defaults \"regression\" col colour classification regions opacity opacity classification regions borders logical, indicating whether borders added classification regions","code":""},{"path":"/reference/classification.biplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"classification biplot — classification.biplot","text":"object class biplot.","code":""},{"path":"/reference/classification.html","id":null,"dir":"Reference","previous_headings":"","what":"Classification biplot method — classification","title":"Classification biplot method — classification","text":"function produces list elements used constructing classification biplot.","code":""},{"path":"/reference/classification.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Classification biplot method — classification","text":"","code":"classification(bp, Pmat, dim.biplot = c(2, 1, 3), e.vects = 1:ncol(bp$X), group.aes=NULL, axes = \"regression\", col=ez.col, opacity=0.4, borders = FALSE)"},{"path":"/reference/classification.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Classification biplot method — classification","text":"bp object class biplot obtained preceding function biplot(). Pmat matrix containing posterior probability classes dim.biplot dimension biplot. values 1, 2 3 accepted, default 2. e.vects eigenvectors (principal components) extract, default 1:dim.biplot. group.aes vector length number rows data matrix differentiated aesthetics samples. axes type axes, defaults \"regression\" col colour classification regions opacity opacity classification regions borders logical, indicating whether borders added classification regions","code":""},{"path":"/reference/classification.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Classification biplot method — classification","text":"Object class biplot following elements:","code":""},{"path":"/reference/classification.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Classification biplot method — classification","text":"Gardner-Lubbe, S., 2016. triplot multiclass classification visualisation. Computational Statistics & Data Analysis, 94, pp.20-32.","code":""},{"path":"/reference/classification.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Classification biplot method — classification","text":"","code":"biplot(iris[,1:4]) |>  classification(predict(MASS::lda(Species ~ ., data = iris))$posterior) #> Object of class biplot, based on 150 samples and 4 variables. #> 4 numeric variables. # create a classification biplot biplot(iris[,1:4]) |>  classification(predict(MASS::lda(Species ~ ., data = iris))$posterior) |>  plot()"},{"path":"/reference/classify.html","id":null,"dir":"Reference","previous_headings":"","what":"Classify samples into classes — classify","title":"Classify samples into classes — classify","text":"Classify samples classes","code":""},{"path":"/reference/classify.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Classify samples into classes — classify","text":"","code":"classify(   bp,   classify.regions = TRUE,   col = ez.col,   opacity = 0.4,   borders = FALSE )"},{"path":"/reference/classify.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Classify samples into classes — classify","text":"bp object class biplot classify.regions logical value indicating whether classifications regions shown biplot, default TRUE. col colours classification regions opacity opacity levels classification regions borders border colours classification regions","code":""},{"path":"/reference/classify.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Classify samples into classes — classify","text":"list object called classify appended object class biplot following elements: table confusion matrix resulting classification classes. rate classification accuracy rate. classify.regions logical value indicating whether classification regions shown biplot. aes list chosen aesthetics colours, opacity levels border colours classification regions.","code":""},{"path":"/reference/classify.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Classify samples into classes — classify","text":"","code":"biplot(iris[,1:4],classes = iris[,5]) |> CVA() |> axes(col=\"black\") |>    classify(col=c(\"red\",\"blue\",\"orange\"),opacity=0.1) |> plot()"},{"path":"/reference/CLPs.html","id":null,"dir":"Reference","previous_headings":"","what":"Format aesthetics for the category level points — CLPs","title":"Format aesthetics for the category level points — CLPs","text":"function allows user format aesthetics category level points (CLPs).","code":""},{"path":"/reference/CLPs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format aesthetics for the category level points — CLPs","text":"","code":"CLPs (bp,  which = 1:ncol(bp$Xcat), col = \"black\", cex = 0.6)"},{"path":"/reference/CLPs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format aesthetics for the category level points — CLPs","text":"bp object class biplot. vector containing columns variables CLPs displayed, default 1:ncol(Xcat). col colour(s) CLPs, default black. cex character expansion(s) CLPs, default 0.6.","code":""},{"path":"/reference/CLPs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format aesthetics for the category level points — CLPs","text":"object class biplot appended list called CLP.aes containing following elements  list following components available: vector containing columns variables CLPs displayed. col colour(s) CLPs. cex character expansion(s) plotting characters CLPs.","code":""},{"path":[]},{"path":"/reference/CLPs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format aesthetics for the category level points — CLPs","text":"","code":"mtdf <- as.data.frame(mtcars) mtdf$cyl <- factor(mtdf$cyl) mtdf$vs <- factor(mtdf$vs) mtdf$am <- factor(mtdf$am) mtdf$gear <- factor(mtdf$gear) mtdf$carb <- factor(mtdf$carb) biplot(mtdf[,-11], scaled = TRUE) |> AoD(classes = mtdf[,11]) |>  CLPs(col = list(rep(\"olivedrab\",3), rep(\"orange\",2),                 rep(\"coral\",2), rep(\"brown\",3))) |>  plot()"},{"path":"/reference/CLRs.html","id":null,"dir":"Reference","previous_headings":"","what":"Format aesthetics for the category level regions — CLRs","title":"Format aesthetics for the category level regions — CLRs","text":"function allows user format aesthetics category level points (CLRs).","code":""},{"path":"/reference/CLRs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format aesthetics for the category level regions — CLRs","text":"","code":"CLRs (bp,  which = 1, col = \"black\")"},{"path":"/reference/CLRs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format aesthetics for the category level regions — CLRs","text":"bp object class biplot. column name number CLRs displayed, default 1. one variable can selected time. col colours CLRs, default colorRampPalette(c(\"black\",\"white\")).","code":""},{"path":"/reference/CLRs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format aesthetics for the category level regions — CLRs","text":"object class biplot appended list called CLP.aes containing following elements  list following components available: variable number CLRs displayed. col colours CLRs.","code":""},{"path":[]},{"path":"/reference/CLRs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format aesthetics for the category level regions — CLRs","text":"","code":"mtdf <- as.data.frame(mtcars) mtdf$cyl <- factor(mtdf$cyl) mtdf$vs <- factor(mtdf$vs) mtdf$am <- factor(mtdf$am) mtdf$gear <- factor(mtdf$gear) mtdf$carb <- factor(mtdf$carb) #biplot(mtdf[,-11], scaled = TRUE) |> PCO(group.aes = mtdf[,11]) |>  #CLRs(which = 10, col = \"coral\") |> plot()"},{"path":"/reference/CVA.biplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate elements for the CVA biplot — CVA.biplot","title":"Calculate elements for the CVA biplot — CVA.biplot","text":"function performs calculations construction CVA biplot.","code":""},{"path":"/reference/CVA.biplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate elements for the CVA biplot — CVA.biplot","text":"","code":"# S3 method for class 'biplot' CVA(   bp,   classes = bp$classes,   dim.biplot = c(2, 1, 3),   e.vects = 1:ncol(bp$X),   weightedCVA = \"weighted\",   show.class.means = TRUE,   low.dim = \"sample.opt\" )"},{"path":"/reference/CVA.biplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate elements for the CVA biplot — CVA.biplot","text":"bp object class biplot obtained preceding function biplot(). classes vector length number rows data matrix class indicator samples. dim.biplot dimension biplot. values 1, 2 3 accepted, default 2. e.vects vector indicating eigenvectors (canonical variates) plotted biplot, default 1:dim.biplot. weightedCVA character string indicating type CVA perform. One \"weighted\" (default) weighted CVA performed (centring matrix diagonal matrix class sizes (\\(\\mathbf{C} = \\mathbf{N}\\)), \"unweightedCent\" unweighted CVA performed (centring matrix usual centring matrix (\\(\\mathbf{C} = \\mathbf{}_{G} - G^{-1}\\mathbf{1}_{G}\\mathbf{1}_{G}'\\))) \"unweightedI\" unweighted CVA performed retaining weighted centroid (centring matrix indicator matrix (\\(\\mathbf{C} = \\mathbf{}_{G}\\))). show.class.means logical value indicating whether plot class means biplot. low.dim character string indicating method use construct additional dimension(s) dimension canonical space smaller dim.biplot. One \"sample.opt\" (default) maximising sample predictivity individual samples biplot \"Bhattacharyya.dist\" based decomposition Bhattacharyya distance component sample means component dissimilarity sample covariance matrices.","code":""},{"path":"/reference/CVA.biplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate elements for the CVA biplot — CVA.biplot","text":"object class CVA, inherits class biplot.","code":""},{"path":"/reference/CVA.biplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate elements for the CVA biplot — CVA.biplot","text":"","code":"biplot(iris[,1:4]) |> CVA(classes=iris[,5]) #> Object of class biplot, based on 150 samples and 4 variables. #> 4 numeric variables. #> 3 classes: setosa versicolor virginica"},{"path":"/reference/CVA.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform Canonical Variate Analysis (CVA) — CVA","title":"Perform Canonical Variate Analysis (CVA) — CVA","text":"function appends biplot object elements resulting performing CVA.","code":""},{"path":"/reference/CVA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform Canonical Variate Analysis (CVA) — CVA","text":"","code":"CVA(bp, classes=bp$classes, dim.biplot = c(2, 1, 3), e.vects = 1:ncol(bp$X),            weightedCVA = \"weighted\", show.class.means = TRUE,            low.dim = \"sample.opt\")"},{"path":"/reference/CVA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform Canonical Variate Analysis (CVA) — CVA","text":"bp object class biplot obtained preceding function biplot(). classes vector length number rows data matrix class indicator samples. dim.biplot dimension biplot. values 1, 2 3 accepted, default 2. e.vects vector indicating eigenvectors (canonical variates) plotted biplot, default 1:dim.biplot. weightedCVA character string indicating type CVA perform. One \"weighted\" (default) weighted CVA performed (centring matrix diagonal matrix class sizes (\\(\\mathbf{C} = \\mathbf{N}\\)), \"unweightedCent\" unweighted CVA performed (centring matrix usual centring matrix (\\(\\mathbf{C} = \\mathbf{}_{G} - G^{-1}\\mathbf{1}_{G}\\mathbf{1}_{G}'\\))) \"unweightedI\" unweighted CVA performed retaining weighted centroid (centring matrix indicator matrix (\\(\\mathbf{C} = \\mathbf{}_{G}\\))). show.class.means logical value indicating whether plot class means biplot. low.dim character string indicating method use construct additional dimension(s) dimension canonical space smaller dim.biplot. One \"sample.opt\" (default) maximising sample predictivity individual samples biplot \"Bhattacharyya.dist\" based decomposition Bhattacharyya distance component sample means component dissimilarity sample covariance matrices.","code":""},{"path":"/reference/CVA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform Canonical Variate Analysis (CVA) — CVA","text":"Object class CVA following elements: X matrix centered scaled numeric variables. Xcat data frame categorical variables. raw.X original data. classes vector category levels class variable. used colour, pch cex specifications. na.action vector observations removed. center logical value indicating whether \\(\\mathbf{X}\\) centered. scaled logical value indicating whether \\(\\mathbf{X}\\) scaled. means vector means numerical variable. sd vector standard deviations numerical variable. n number observations. p number variables. group.aes vector category levels grouping variable. used colour, pch cex specifications. g.names descriptive names used group labels. g number groups. Title title biplot rendered. Lmat matrix transformation canonical space. Linv inverse \\(\\mathbf{L}\\). eigenvalues vector eigenvalues two-sided eigenvalue problem. Z matrix row containing details points plotted (.e. coordinates). ax.one.unit one unit positive direction biplot axis. Gmat indicator matrix defining membership classes. Xmeans matrix class means. Zmeans matrix class mean coordinates plotted biplot. e.vects vector indicating canonical variates plotted biplot. Cmat centring matrix based different choices weighting described arguments. Bmat class sums squares cross products matrix. Wmat within class sums squares cross products matrix. Mrr matrix used prediction canonical space (inverse \\(\\mathbf{M}=\\mathbf{LV})\\). Mr first r dimensions solution plotted. Nmat matrix class sizes diagonal. lambda.mat matrix eigenvalues \\(\\mathbf{W}^{-1/2}\\mathbf{BW}^{-1/2}\\) diagonal. class.means logical value indicating whether class means plotted biplot. dim.biplot dimension biplot. low.dim method used construct additional dimension(s).","code":""},{"path":[]},{"path":"/reference/CVA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform Canonical Variate Analysis (CVA) — CVA","text":"","code":"biplot(iris[,1:4]) |> CVA(classes=iris[,5]) #> Object of class biplot, based on 150 samples and 4 variables. #> 4 numeric variables. #> 3 classes: setosa versicolor virginica  # create a CVA biplot biplot(iris[,1:4]) |> CVA(classes=iris[,5]) |> plot()"},{"path":"/reference/CVAlowdim.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct additional dimensions when the dimension of the canonical space is smaller than the dimension of the biplot — CVAlowdim","title":"Construct additional dimensions when the dimension of the canonical space is smaller than the dimension of the biplot — CVAlowdim","text":"function used add dimensions CVA biplot dimension canonical space \\(K\\) smaller dimension biplot (dim.biplot). function already used CVA calculations, therefore used isolation.","code":""},{"path":"/reference/CVAlowdim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct additional dimensions when the dimension of the canonical space is smaller than the dimension of the biplot — CVAlowdim","text":"","code":"CVAlowdim(bp, G, W, Mmat, low.dim, K, e.vects)"},{"path":"/reference/CVAlowdim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct additional dimensions when the dimension of the canonical space is smaller than the dimension of the biplot — CVAlowdim","text":"bp object class biplot. G indicator matrix defining membership classes. W within class sums squares cross products matrix. Mmat eigenvector matrix CVA. low.dim character string indicating method use construct additional dimension(s) dimension canonical space smaller dim.biplot. One \"sample.opt\" (default) maximising sample predictivity individual samples biplot Bhattacharyya.dist based decomposition Bhattacharyya distance component sample means component dissimilarity sample covariance matrices. K dimension canonical space. e.vects vector indicating canonical variates plotted biplot, default 1:dim.biplot","code":""},{"path":"/reference/CVAlowdim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct additional dimensions when the dimension of the canonical space is smaller than the dimension of the biplot — CVAlowdim","text":"list three components: Mr first r dimensions solution plotted. Mrr matrix used prediction canonical space. Lmat matrix transformation canonical space.","code":""},{"path":"/reference/density1D.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates a kernel density in 1-dimension — density1D","title":"Creates a kernel density in 1-dimension — density1D","text":"Creates kernel density 1-dimension","code":""},{"path":"/reference/density1D.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates a kernel density in 1-dimension — density1D","text":"","code":"density1D(   bp,   which = NULL,   h = \"nrd0\",   kernel = \"gaussian\",   col = ez.col,   lwd = 1.5,   legend.mar = c(2, 5, 0, 5) )"},{"path":"/reference/density1D.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates a kernel density in 1-dimension — density1D","text":"bp object class biplot group. h bandwidth. kernel character string giving smoothing kernel used. col colours used density curves. lwd linewidth density curve. legend.mar margin line legend.","code":""},{"path":"/reference/density1D.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates a kernel density in 1-dimension — density1D","text":"object class biplot.","code":""},{"path":"/reference/density1D.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creates a kernel density in 1-dimension — density1D","text":"","code":"biplot (iris,classes=iris[,5]) |> CVA(dim=1) |> density1D() |> plot()"},{"path":"/reference/density2D.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a density in 2-dimensions — density2D","title":"Create a density in 2-dimensions — density2D","text":"Create density 2-dimensions","code":""},{"path":"/reference/density2D.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a density in 2-dimensions — density2D","text":"","code":"density2D(   bp,   which = NULL,   contours = F,   h = NULL,   n = 100,   col = c(\"green\", \"yellow\", \"red\"),   contour.col = \"black\",   cuts = 50,   cex = 0.6,   tcl = -0.2,   mgp = c(0, -0.25, 0),   layout.heights = c(100, 10),   legend.mar = c(2, 5, 0, 5) )"},{"path":"/reference/density2D.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a density in 2-dimensions — density2D","text":"bp object class biplot group create density; limited single group time. NULL, density drawn data points. contours logical indicating whether contours added density plot h vector bandwidths x y directions, see kde2d. n number grid points direction. Can scalar length-2 integer vector. col vector colours use form 'continuous' sequence colours. contour.col colour contours. cuts number colours col. cex character expansion. tcl length tick marks fraction height line text. mgp margin line. layout.heights vector values heights rows. legend.mar margin line legend.","code":""},{"path":"/reference/density2D.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a density in 2-dimensions — density2D","text":"object class biplot.","code":""},{"path":"/reference/density2D.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a density in 2-dimensions — density2D","text":"","code":"biplot(iris[,1:4],group.aes = iris[,5]) |> PCA() |>    density2D(which=3,col=c(\"white\",\"purple\",\"cyan\",\"blue\")) |> plot()  biplot(iris[,1:4],group.aes = iris[,5]) |> PCA() |>    density2D(which=3,col=c(\"white\",\"purple\",\"cyan\",\"blue\"),contours = TRUE,   contour.col = \"grey\") |> plot()"},{"path":"/reference/ellipses.html","id":null,"dir":"Reference","previous_headings":"","what":"Concentration ellipses (\\(\\kappa\\)-ellipses) — ellipses","title":"Concentration ellipses (\\(\\kappa\\)-ellipses) — ellipses","text":"function produces \\(\\kappa\\)-ellipses, useful geometrical description data points sample mean.","code":""},{"path":"/reference/ellipses.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Concentration ellipses (\\(\\kappa\\)-ellipses) — ellipses","text":"","code":"ellipses(bp, df=2, kappa = NULL, which = NULL, alpha = 0.95, col = bp$sample$col[which], lty = 1, lwd = 1, opacity = 0.25, trace = TRUE)"},{"path":"/reference/ellipses.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Concentration ellipses (\\(\\kappa\\)-ellipses) — ellipses","text":"bp object class biplot. df degrees freedom, default 2. kappa value construct \\(\\kappa\\)-ellipse (value \\(\\kappa\\)). selection group ellipse construction. alpha size \\(\\alpha\\)-bag, default 0.95. col colour ellipse. Multiple \\(\\kappa\\)-ellipse one group displayed colour. lty line type ellipse. line type used per value \\(\\kappa\\). lwd line width ellipse. line width used per value \\(\\kappa\\). opacity level opacity, default 0.25. trace logical, indicating progress computation.","code":""},{"path":"/reference/ellipses.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Concentration ellipses (\\(\\kappa\\)-ellipses) — ellipses","text":"list following components available: conc.ellipses list coordinates \\(\\kappa\\)-ellipses group. col vector colours \\(\\kappa\\)-ellipses. lty vector line types \\(\\kappa\\)-ellipses. lwd vector line widths \\(\\kappa\\)-ellipses. alpha vector \\(\\alpha\\) values.","code":""},{"path":"/reference/ellipses.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Concentration ellipses (\\(\\kappa\\)-ellipses) — ellipses","text":"Gower, J., Gardner-Lubbe, S. & Le Roux, N. (2011, ISBN: 978-0-470-01255-0) Understanding Biplots. Chichester, England: John Wiley & Sons Ltd.","code":""},{"path":"/reference/ellipses.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Concentration ellipses (\\(\\kappa\\)-ellipses) — ellipses","text":"","code":"biplot (iris[,1:4]) |> PCA(group.aes=iris[,5]) |> ellipses(kappa=2) |> plot() #> Computing 2 -ellipse for setosa  #> Computing 2 -ellipse for versicolor  #> Computing 2 -ellipse for virginica"},{"path":"/reference/extended.matching.coefficient.html","id":null,"dir":"Reference","previous_headings":"","what":"Extended matching coefficient — extended.matching.coefficient","title":"Extended matching coefficient — extended.matching.coefficient","text":"Extended matching coefficient","code":""},{"path":"/reference/extended.matching.coefficient.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extended matching coefficient — extended.matching.coefficient","text":"","code":"extended.matching.coefficient(X)"},{"path":"/reference/extended.matching.coefficient.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extended matching coefficient — extended.matching.coefficient","text":"X data frame containing categorical variables used computing EMC distance","code":""},{"path":"/reference/extended.matching.coefficient.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extended matching coefficient — extended.matching.coefficient","text":"dist object","code":""},{"path":"/reference/extended.matching.coefficient.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extended matching coefficient — extended.matching.coefficient","text":"","code":"mtdf <- as.data.frame(mtcars) mtdf$cyl <- factor(mtdf$cyl) mtdf$vs <- factor(mtdf$vs) mtdf$am <- factor(mtdf$am) mtdf$gear <- factor(mtdf$gear) mtdf$carb <- factor(mtdf$carb) extended.matching.coefficient(mtdf[,8:11]) #>           1        2        3        4        5        6        7        8 #> 2  0.000000                                                                #> 3  1.414214 1.414214                                                       #> 4  2.000000 2.000000 1.414214                                              #> 5  1.732051 1.732051 2.000000 1.414214                                     #> 6  2.000000 2.000000 1.414214 0.000000 1.414214                            #> 7  1.414214 1.414214 2.000000 1.414214 1.000000 1.414214                   #> 8  1.732051 1.732051 1.414214 1.414214 1.414214 1.414214 1.732051          #> 9  1.732051 1.732051 1.414214 1.414214 1.414214 1.414214 1.732051 0.000000 #> 10 1.414214 1.414214 1.414214 1.414214 1.732051 1.414214 1.414214 1.000000 #> 11 1.414214 1.414214 1.414214 1.414214 1.732051 1.414214 1.414214 1.000000 #> 12 1.732051 1.732051 2.000000 1.414214 1.000000 1.414214 1.000000 1.732051 #> 13 1.732051 1.732051 2.000000 1.414214 1.000000 1.414214 1.000000 1.732051 #> 14 1.732051 1.732051 2.000000 1.414214 1.000000 1.414214 1.000000 1.732051 #> 15 1.414214 1.414214 2.000000 1.414214 1.000000 1.414214 0.000000 1.732051 #> 16 1.414214 1.414214 2.000000 1.414214 1.000000 1.414214 0.000000 1.732051 #> 17 1.414214 1.414214 2.000000 1.414214 1.000000 1.414214 0.000000 1.732051 #> 18 1.414214 1.414214 0.000000 1.414214 2.000000 1.414214 2.000000 1.414214 #> 19 1.414214 1.414214 1.000000 1.732051 1.732051 1.732051 2.000000 1.000000 #> 20 1.414214 1.414214 0.000000 1.414214 2.000000 1.414214 2.000000 1.414214 #> 21 2.000000 2.000000 1.414214 0.000000 1.414214 0.000000 1.414214 1.414214 #> 22 1.732051 1.732051 2.000000 1.414214 0.000000 1.414214 1.000000 1.414214 #> 23 1.732051 1.732051 2.000000 1.414214 0.000000 1.414214 1.000000 1.414214 #> 24 1.414214 1.414214 2.000000 1.414214 1.000000 1.414214 0.000000 1.732051 #> 25 1.732051 1.732051 2.000000 1.414214 0.000000 1.414214 1.000000 1.414214 #> 26 1.414214 1.414214 0.000000 1.414214 2.000000 1.414214 2.000000 1.414214 #> 27 1.414214 1.414214 1.732051 2.000000 1.414214 2.000000 1.732051 1.732051 #> 28 1.732051 1.732051 1.414214 1.732051 1.732051 1.732051 2.000000 1.414214 #> 29 1.000000 1.000000 1.732051 2.000000 1.732051 2.000000 1.414214 2.000000 #> 30 1.414214 1.414214 1.732051 2.000000 1.732051 2.000000 1.732051 2.000000 #> 31 1.414214 1.414214 1.732051 2.000000 1.732051 2.000000 1.732051 2.000000 #> 32 1.414214 1.414214 1.000000 1.732051 1.732051 1.732051 2.000000 1.000000 #>           9       10       11       12       13       14       15       16 #> 2                                                                          #> 3                                                                          #> 4                                                                          #> 5                                                                          #> 6                                                                          #> 7                                                                          #> 8                                                                          #> 9                                                                          #> 10 1.000000                                                                #> 11 1.000000 0.000000                                                       #> 12 1.732051 1.732051 1.732051                                              #> 13 1.732051 1.732051 1.732051 0.000000                                     #> 14 1.732051 1.732051 1.732051 0.000000 0.000000                            #> 15 1.732051 1.414214 1.414214 1.000000 1.000000 1.000000                   #> 16 1.732051 1.414214 1.414214 1.000000 1.000000 1.000000 0.000000          #> 17 1.732051 1.414214 1.414214 1.000000 1.000000 1.000000 0.000000 0.000000 #> 18 1.414214 1.414214 1.414214 2.000000 2.000000 2.000000 2.000000 2.000000 #> 19 1.000000 1.414214 1.414214 2.000000 2.000000 2.000000 2.000000 2.000000 #> 20 1.414214 1.414214 1.414214 2.000000 2.000000 2.000000 2.000000 2.000000 #> 21 1.414214 1.414214 1.414214 1.414214 1.414214 1.414214 1.414214 1.414214 #> 22 1.414214 1.732051 1.732051 1.000000 1.000000 1.000000 1.000000 1.000000 #> 23 1.414214 1.732051 1.732051 1.000000 1.000000 1.000000 1.000000 1.000000 #> 24 1.732051 1.414214 1.414214 1.000000 1.000000 1.000000 0.000000 0.000000 #> 25 1.414214 1.732051 1.732051 1.000000 1.000000 1.000000 1.000000 1.000000 #> 26 1.414214 1.414214 1.414214 2.000000 2.000000 2.000000 2.000000 2.000000 #> 27 1.732051 2.000000 2.000000 1.732051 1.732051 1.732051 1.732051 1.732051 #> 28 1.414214 1.732051 1.732051 2.000000 2.000000 2.000000 2.000000 2.000000 #> 29 2.000000 1.732051 1.732051 1.732051 1.732051 1.732051 1.414214 1.414214 #> 30 2.000000 2.000000 2.000000 1.732051 1.732051 1.732051 1.732051 1.732051 #> 31 2.000000 2.000000 2.000000 1.732051 1.732051 1.732051 1.732051 1.732051 #> 32 1.000000 1.414214 1.414214 2.000000 2.000000 2.000000 2.000000 2.000000 #>          17       18       19       20       21       22       23       24 #> 2                                                                          #> 3                                                                          #> 4                                                                          #> 5                                                                          #> 6                                                                          #> 7                                                                          #> 8                                                                          #> 9                                                                          #> 10                                                                         #> 11                                                                         #> 12                                                                         #> 13                                                                         #> 14                                                                         #> 15                                                                         #> 16                                                                         #> 17                                                                         #> 18 2.000000                                                                #> 19 2.000000 1.000000                                                       #> 20 2.000000 0.000000 1.000000                                              #> 21 1.414214 1.414214 1.732051 1.414214                                     #> 22 1.000000 2.000000 1.732051 2.000000 1.414214                            #> 23 1.000000 2.000000 1.732051 2.000000 1.414214 0.000000                   #> 24 0.000000 2.000000 2.000000 2.000000 1.414214 1.000000 1.000000          #> 25 1.000000 2.000000 1.732051 2.000000 1.414214 0.000000 0.000000 1.000000 #> 26 2.000000 0.000000 1.000000 0.000000 1.414214 2.000000 2.000000 2.000000 #> 27 1.732051 1.732051 1.414214 1.732051 2.000000 1.414214 1.414214 1.732051 #> 28 2.000000 1.414214 1.000000 1.414214 1.732051 1.732051 1.732051 2.000000 #> 29 1.414214 1.732051 1.732051 1.732051 2.000000 1.732051 1.732051 1.414214 #> 30 1.732051 1.732051 1.732051 1.732051 2.000000 1.732051 1.732051 1.732051 #> 31 1.732051 1.732051 1.732051 1.732051 2.000000 1.732051 1.732051 1.732051 #> 32 2.000000 1.000000 0.000000 1.000000 1.732051 1.732051 1.732051 2.000000 #>          25       26       27       28       29       30       31 #> 2                                                                 #> 3                                                                 #> 4                                                                 #> 5                                                                 #> 6                                                                 #> 7                                                                 #> 8                                                                 #> 9                                                                 #> 10                                                                #> 11                                                                #> 12                                                                #> 13                                                                #> 14                                                                #> 15                                                                #> 16                                                                #> 17                                                                #> 18                                                                #> 19                                                                #> 20                                                                #> 21                                                                #> 22                                                                #> 23                                                                #> 24                                                                #> 25                                                                #> 26 2.000000                                                       #> 27 1.414214 1.732051                                              #> 28 1.732051 1.414214 1.000000                                     #> 29 1.732051 1.732051 1.000000 1.414214                            #> 30 1.732051 1.732051 1.000000 1.414214 1.000000                   #> 31 1.732051 1.732051 1.000000 1.414214 1.000000 1.000000          #> 32 1.732051 1.000000 1.414214 1.000000 1.732051 1.732051 1.732051"},{"path":"/reference/fit.measures.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute measures of fit for the biplot. — fit.measures","title":"Compute measures of fit for the biplot. — fit.measures","text":"function computes measures fit biplot. biplot object augmented additional items, can differ depending type biplot. measures provide information overall quality fit adequacy representation variables.","code":""},{"path":"/reference/fit.measures.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute measures of fit for the biplot. — fit.measures","text":"","code":"fit.measures(bp)"},{"path":"/reference/fit.measures.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute measures of fit for the biplot. — fit.measures","text":"bp object class biplot.","code":""},{"path":"/reference/fit.measures.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute measures of fit for the biplot. — fit.measures","text":"object class biplot. object augmented additional items, depending type biplot object. quality overall quality fit. adequacy adequacy representation variables. object class PCA: axis.predictivity fit measure individual axis. sample.predictivity fit measure individual sample. object class CVA: axis.predictivity fit measure individual axis. class.predictivity fit measure class mean. within.class.axis.predictivity fit measure axis based values expressed deviations class means. within.class.sample.predictivity fit measure sample expressed deviation class mean. object class CA: row.predictivity fit measure row input matrix individual sample. col.predictivity fit measure column input matrix individual sample. Xhat predicted matrix per row profile","code":""},{"path":"/reference/fit.measures.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute measures of fit for the biplot. — fit.measures","text":"","code":"out <- biplot (iris[,1:4]) |> PCA() |> fit.measures() summary(out) #> Object of class biplot, based on 150 samples and 4 variables. #> 4 numeric variables. #>  #> Quality of fit in 2 dimension(s) = 97.8%  #> Adequacy of variables in 2 dimension(s): #> Sepal.Length  Sepal.Width Petal.Length  Petal.Width  #>    0.5617091    0.5402798    0.7639426    0.1340685  #> Axis predictivity in 2 dimension(s): #> Sepal.Length  Sepal.Width Petal.Length  Petal.Width  #>    0.9579017    0.8400028    0.9980931    0.9365937  #> Sample predictivity in 2 dimension(s): #>         1         2         3         4         5         6         7         8  #> 0.9998927 0.9927400 0.9999141 0.9991226 0.9984312 0.9949770 0.9914313 0.9996346  #>         9        10        11        12        13        14        15        16  #> 0.9998677 0.9941340 0.9991205 0.9949153 0.9945491 0.9996034 0.9942676 0.9897890  #>        17        18        19        20        21        22        23        24  #> 0.9937752 0.9990534 0.9972926 0.9928624 0.9896250 0.9932656 0.9918132 0.9955885  #>        25        26        27        28        29        30        31        32  #> 0.9812917 0.9897303 0.9979903 0.9990514 0.9963870 0.9975607 0.9985741 0.9876345  #>        33        34        35        36        37        38        39        40  #> 0.9833383 0.9957412 0.9970200 0.9935405 0.9859750 0.9953399 0.9994047 0.9990244  #>        41        42        43        44        45        46        47        48  #> 0.9980903 0.9756895 0.9953372 0.9830035 0.9763861 0.9959863 0.9905695 0.9987006  #>        49        50        51        52        53        54        55        56  #> 0.9996383 0.9987482 0.9275369 0.9996655 0.9544488 0.9460515 0.9172857 0.9061058  #>        57        58        59        60        61        62        63        64  #> 0.9727694 0.9996996 0.8677939 0.8686502 0.9613130 0.9328852 0.4345132 0.9679973  #>        65        66        67        68        69        70        71        72  #> 0.7995848 0.9083037 0.7968614 0.5835260 0.7900027 0.8575646 0.8524748 0.6615410  #>        73        74        75        76        77        78        79        80  #> 0.9367709 0.8661203 0.8350955 0.8929908 0.8702600 0.9873164 0.9969031 0.6815512  #>        81        82        83        84        85        86        87        88  #> 0.8937189 0.8409681 0.7829405 0.9848354 0.6901625 0.8073582 0.9666041 0.6665514  #>        89        90        91        92        93        94        95        96  #> 0.6993846 0.9909923 0.9008345 0.9710941 0.8037223 0.9913632 0.9744493 0.7089660  #>        97        98        99       100       101       102       103       104  #> 0.9071738 0.9064541 0.9625371 0.9872279 0.9171603 0.9636413 0.9976224 0.9829885  #>       105       106       107       108       109       110       111       112  #> 0.9854704 0.9888092 0.8464463 0.9729353 0.9771293 0.9794313 0.9746239 0.9977302  #>       113       114       115       116       117       118       119       120  #> 0.9941859 0.9605563 0.8476794 0.9289985 0.9929982 0.9916850 0.9818957 0.9493751  #>       121       122       123       124       125       126       127       128  #> 0.9865358 0.8716778 0.9728177 0.9846364 0.9840890 0.9861783 0.9854516 0.9691512  #>       129       130       131       132       133       134       135       136  #> 0.9942007 0.9585884 0.9705389 0.9937852 0.9874192 0.9723192 0.9230503 0.9794405  #>       137       138       139       140       141       142       143       144  #> 0.8947527 0.9797055 0.9458421 0.9902488 0.9674660 0.9350646 0.9636413 0.9867931  #>       145       146       147       148       149       150  #> 0.9500265 0.9470544 0.9688318 0.9886543 0.8735433 0.9281727"},{"path":"/reference/interpolate.html","id":null,"dir":"Reference","previous_headings":"","what":"Interpolate supplementary points and variables to add to the biplot — interpolate","title":"Interpolate supplementary points and variables to add to the biplot — interpolate","text":"function adds supplementary points variables plot new data set.","code":""},{"path":"/reference/interpolate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Interpolate supplementary points and variables to add to the biplot — interpolate","text":"","code":"interpolate(bp, newdata = NULL, newvariable = NULL)"},{"path":"/reference/interpolate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Interpolate supplementary points and variables to add to the biplot — interpolate","text":"bp object class biplot obtained preceding function biplot(). newdata new data set, similar structure data set supplied biplot() containing supplementary data points added onto biplot. newvariable new data set, similar structure data set supplied biplot() containing supplementary variables added onto biplot.","code":""},{"path":"/reference/interpolate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Interpolate supplementary points and variables to add to the biplot — interpolate","text":"object class biplot appended following elements: Xnew.raw new data. Xnew matrix centered scaled new numeric variables new data. Xnew.cat matrix categorical variables new data. Znew matrix coordinates new data biplot. object class CA following additional elements appended: newrowcoor matrix row coordinates new data biplot. newcolcoor matrix column coordinates new data biplot.","code":""},{"path":"/reference/interpolate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Interpolate supplementary points and variables to add to the biplot — interpolate","text":"","code":"biplot(data = iris[1:145,]) |> PCA() |> interpolate(newdata = iris[146:150,]) |> plot()  biplot(HairEyeColor[,,2], center = FALSE) |> CA(variant = \"Symmetric\") |>       interpolate(newdata = HairEyeColor[,,1]) |> plot()"},{"path":"/reference/legend.type.html","id":null,"dir":"Reference","previous_headings":"","what":"Format the legend for the biplot — legend.type","title":"Format the legend for the biplot — legend.type","text":"function enables user format legend make required selection display.","code":""},{"path":"/reference/legend.type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format the legend for the biplot — legend.type","text":"","code":"legend.type(bp, samples = FALSE, means = FALSE, bags = FALSE,                    ellipses=FALSE,regions=FALSE, new=FALSE, ...)"},{"path":"/reference/legend.type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format the legend for the biplot — legend.type","text":"bp object class biplot. samples logical value indicating whether legend printed samples, default FALSE. means logical value indicating whether legend printed means, default FALSE. bags logical value indicating whether legend printed bags, default FALSE. ellipses logical value indicating whether legend printed concentration ellipses, default FALSE. regions logical value indicating whether legend printed classification regions, default FALSE. new logical value indicating whether legend appear new window, default FALSE. ... additional arguments sent legend().","code":""},{"path":"/reference/legend.type.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format the legend for the biplot — legend.type","text":"list following components available: samples logical value indicating whether legend samples provided. means logical value indicating whether legend class means provided. bags logical value indicating whether legend \\(\\alpha\\)-bags provided. ellipses logical value indicating whether legend \\(\\kappa\\)-ellipses provided. regions logical value indicating whether legend classification regions provided. new logical value indicating whether legend appears new plot.","code":""},{"path":"/reference/legend.type.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format the legend for the biplot — legend.type","text":"","code":"biplot (iris[,1:4], Title=\"Test biplot\") |> PCA(group.aes = iris[,5]) |>     legend.type(samples=TRUE) |> plot()"},{"path":"/reference/means.html","id":null,"dir":"Reference","previous_headings":"","what":"Format aesthetics for the class or group means — means","title":"Format aesthetics for the class or group means — means","text":"function allows user format aesthetics class means group means.","code":""},{"path":"/reference/means.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format aesthetics for the class or group means — means","text":"","code":"means (bp,  which = NULL, col = NULL, pch = 15, cex = 1, label = FALSE, label.col = NULL,label.cex = 0.75, label.side = \"bottom\", label.offset = 0.5, opacity = 1, shade.darker = TRUE)"},{"path":"/reference/means.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format aesthetics for the class or group means — means","text":"bp object class biplot. vector containing groups classes means displayed, default bp$g. col colour(s) means, default colour samples. pch plotting character(s) means, default 15. cex character expansion(s) means, default 1. label logical value indicating whether means labelled, default TRUE. label.col vector length label colours means, default colour means. label.cex vector length label text expansions means, default 0.75. label.side side label plotted mean point appears, default bottom. Note unlike argument pos text(), options \"bottom\", \"left\", \"top\", \"right\" 1, 2, 3, 4. label.offset offset label plotted mean point. See ?text detailed explanation argument offset. opacity transparency means. shade.darker logical value indicating whether colour mean points made shade darker default specified colour, default TRUE.","code":""},{"path":"/reference/means.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format aesthetics for the class or group means — means","text":"object class biplot appended list called means containing following elements: vector containing groups classes means displayed. col colour(s) means. pch plotting character(s) means. cex character expansion(s) plotting character(s) means. label logical value indicating whether means labelled. label.col label colours means. label.cex label text expansions samples. label.side side label plotted mean point appears. label.offset offset label plotted mean point. opacity opacity level plotted points.","code":""},{"path":"/reference/means.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Format aesthetics for the class or group means — means","text":"number classes groups (defined group.aes) indicated g. argument length g, recycling used.","code":""},{"path":[]},{"path":"/reference/means.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format aesthetics for the class or group means — means","text":"","code":"biplot(iris[,1:4]) |> PCA() |>           means(col = \"purple\", pch = 15, cex = 2) |> plot()"},{"path":"/reference/newaxes.html","id":null,"dir":"Reference","previous_headings":"","what":"Format aesthetics for the supplementary (new) biplot axes — newaxes","title":"Format aesthetics for the supplementary (new) biplot axes — newaxes","text":"function allows user format aesthetics supplementary (new) biplot axes.","code":""},{"path":"/reference/newaxes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format aesthetics for the supplementary (new) biplot axes — newaxes","text":"","code":"newaxes(bp, X.new.names=bp$var.names, which = 1:bp$num.vars, col = \"orange\", lwd = 1,  lty = 1, label.dir = \"Orthog\", label.col = col, label.cex = 0.75, label.line = 0.1,  ticks = 5, tick.col = col, tick.size = 1, tick.label = TRUE, tick.label.col = tick.col,  tick.label.cex = 0.6, tick.label.side = \"below\", predict.col = col, predict.lwd = lwd,  predict.lty = lty, ax.names = X.new.names, orthogx = 0, orthogy = 0)"},{"path":"/reference/newaxes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format aesthetics for the supplementary (new) biplot axes — newaxes","text":"bp object class biplot. X.new.names vector new column names bp specify axes labelled. vector containing new columns variables axes displayed, default 1:num.vars. col colour(s) axes, default grey(0.7). Alternatively, provide vector colours corresponding X.names. lwd line width(s) axes, default 1. lty line type(s) axes, default 1. label.dir character string indicating placement axis titles side figure. One \"Orthog\" axis titles appear orthogonal side figure (default) , \"Hor\" axis titles appear horizontally \"Paral\" axis titles appear parallel side figure. label.col colour(s) axis labels, default, col. label.cex label expansion axis labels, default 0.75. label.line distance axis title side figure, default 0.1. ticks integer-valued vector indicating number tickmarks axis, default 5 axis. tick.col colour(s) tick marks, default col. tick.size vector specifying sizes tick marks axis, default 1 . tick.label logical value indicating whether axes labelled, default TRUE. tick.label.col colour(s) tick mark labels, default tick.col. tick.label.cex label expansion tick mark labels, default 0.6. tick.label.side character string indicating position tick label. One \"\" label appear tick mark (default) \"\" label appear tick mark. predict.col colour(s) predicted samples, default col. predict.lwd line width(s) predicted samples, default lwd. predict.lty line type(s) predicted samples, default lty. ax.names vector size p containing user defined titles axes. orthogx numeric vector size p specifying x-coordinate parallel transformation axis, default 0 axis. used dim.biplot = 2. orthogy numeric vector size p specifying y-coordinate parallel transformation axis, default 0 axis. used dim.biplot = 2.","code":""},{"path":"/reference/newaxes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format aesthetics for the supplementary (new) biplot axes — newaxes","text":"object class biplot appended list called newaxes containing elements similar axes.","code":""},{"path":[]},{"path":"/reference/newaxes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format aesthetics for the supplementary (new) biplot axes — newaxes","text":"","code":"biplot(data = iris[,1:2]) |> PCA() |> interpolate(newvariable = iris[3:4]) |>    newaxes(col=\"gold\") |> plot()"},{"path":"/reference/newsamples.html","id":null,"dir":"Reference","previous_headings":"","what":"Format aesthetics for the supplementary (new) biplot samples — newsamples","title":"Format aesthetics for the supplementary (new) biplot samples — newsamples","text":"function allows formatting changes new samples.","code":""},{"path":"/reference/newsamples.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format aesthetics for the supplementary (new) biplot samples — newsamples","text":"","code":"newsamples (bp,  col = \"darkorange1\", pch = 1, cex = 1, label = FALSE, label.name = NULL, label.col = NULL,label.cex = 0.75, label.side = \"bottom\",  label.offset = 0.5, connected = FALSE, connect.col = \"black\", connect.lty=1,  connect.lwd=1)"},{"path":"/reference/newsamples.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format aesthetics for the supplementary (new) biplot samples — newsamples","text":"bp object class biplot. col colour(s) new samples, default darkorange1. pch plotting character(s) new samples, default 1. cex character expansion(s) new samples, default 1. label logical value indicating whether new samples labelled , default FALSE. label.name label names new samples. label.col vector length number new samples containing colour(s) labels new samples, default colour sample points. label.cex label text expansion(s) new samples, default 0.75. label.side side label plotted point appears, default bottom. Note unlike argument pos text(), options \"bottom\", \"left\", \"top\",\"right\" 1, 2, 3, 4. label.offset offset label plotted point. See ?text detailed explanation argument offset. connected logical value indicating whether samples connected order rows data matrix, default FALSE. connect.col colour connecting line, default black. connect.lty line type connecting line, default 1. connect.lwd line width connecting line, default 1.","code":""},{"path":"/reference/newsamples.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format aesthetics for the supplementary (new) biplot samples — newsamples","text":"object class biplot appended list called newsamples containing following elements: col colour(s) new samples. pch plotting character(s) new samples. cex character expansion(s) plotting character(s) new samples. label logical value indicating whether new samples labelled. label.col label colours new samples. label.cex label text expansions new samples. label.side side label plotted point appears. label.offset offset label plotted point. connected logical value indicating whether new samples connected. connect.col colour connecting line. connect.lty line type connecting line. connect.lwd line width connecting line.","code":""},{"path":[]},{"path":"/reference/newsamples.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format aesthetics for the supplementary (new) biplot samples — newsamples","text":"","code":"biplot(data = iris[1:145,]) |> PCA() |> samples(col = \"grey\") |> interpolate(newdata = iris[146:150,]) |> newsamples(col = rainbow(6), pch=15) |> plot()"},{"path":"/reference/PCA.biplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate elements for the PCA biplot — PCA.biplot","title":"Calculate elements for the PCA biplot — PCA.biplot","text":"function performs calculations construction PCA biplot.","code":""},{"path":"/reference/PCA.biplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate elements for the PCA biplot — PCA.biplot","text":"","code":"# S3 method for class 'biplot' PCA(   bp,   dim.biplot = c(2, 1, 3),   e.vects = 1:ncol(bp$X),   group.aes = NULL,   show.class.means = FALSE,   correlation.biplot = FALSE )"},{"path":"/reference/PCA.biplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate elements for the PCA biplot — PCA.biplot","text":"bp object class biplot obtained preceding function biplot(). dim.biplot dimension biplot. values 1, 2 3 accepted, default 2. e.vects vector indicating eigenvectors (principal components) plotted biplot, default 1:dim.biplot. group.aes vector length number rows data matrix differentiated aesthetics samples. show.class.means logical value indicating whether group means plotted biplot. correlation.biplot logical value. FALSE, distances sample points optimally approximated biplot. TRUE, correlations variables optimally approximated cosine angles axes. Default FALSE.","code":""},{"path":"/reference/PCA.biplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate elements for the PCA biplot — PCA.biplot","text":"object class PCA, inherits class biplot.","code":""},{"path":"/reference/PCA.biplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate elements for the PCA biplot — PCA.biplot","text":"","code":"biplot(iris[,1:4]) |> PCA() #> Object of class biplot, based on 150 samples and 4 variables. #> 4 numeric variables. # create a PCA biplot biplot(data = iris) |> PCA() |> plot()"},{"path":"/reference/PCA.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform Principal Components Analysis (PCA) — PCA","title":"Perform Principal Components Analysis (PCA) — PCA","text":"function appends biplot object elements resulting performing PCA.","code":""},{"path":"/reference/PCA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform Principal Components Analysis (PCA) — PCA","text":"","code":"PCA(bp, dim.biplot = c(2, 1, 3), e.vects = 1:ncol(bp$X), group.aes = NULL, show.class.means = FALSE, correlation.biplot = FALSE)"},{"path":"/reference/PCA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform Principal Components Analysis (PCA) — PCA","text":"bp object class biplot obtained preceding function biplot(). dim.biplot dimension biplot. values 1, 2 3 accepted, default 2. e.vects vector indicating eigenvectors (principal components) plotted biplot, default 1:dim.biplot. group.aes vector length number rows data matrix differentiated aesthetics samples. show.class.means logical value indicating whether group means plotted biplot. correlation.biplot logical value. FALSE, distances sample points optimally approximated biplot. TRUE, correlations variables optimally approximated cosine angles axes. Default FALSE.","code":""},{"path":"/reference/PCA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform Principal Components Analysis (PCA) — PCA","text":"object class PCA following elements: X matrix centered scaled numeric variables. Xcat data frame categorical variables. raw.X original data. classes vector category levels class variable. used colour, pch cex specifications. na.action vector observations removed. center logical value indicating whether \\(\\mathbf{X}\\) centered. scaled logical value indicating whether \\(\\mathbf{X}\\) scaled. means vector means numerical variable. sd vector standard deviations numerical variable. n number observations. p number variables. group.aes vector category levels grouping variable. used colour, pch cex specification. g.names descriptive names used group labels. g number groups. Title title biplot rendered. Z matrix row containing details points plotted (.e. coordinates). Lmat matrix transformation principal components. Linv inverse \\(\\mathbf{L}\\). eigenvalues vector eigenvalues covariance matrix \\(\\mathbf{X}\\). ax.one.unit one unit positive direction biplot axis. e.vects vector indicating principal components plotted biplot. Vr 1:dim.biplot columns \\(\\mathbf{V}\\). dim.biplot dimension biplot. class.means logical value indicating whether group means plotted biplot. Zmeans matrix class mean coordinates plotted biplot.","code":""},{"path":"/reference/PCA.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Perform Principal Components Analysis (PCA) — PCA","text":"Gabriel, K.R. (1971) biplot graphic display matrices application principal component analysis. Biometrika. 58(3):453–467.","code":""},{"path":[]},{"path":"/reference/PCA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform Principal Components Analysis (PCA) — PCA","text":"","code":"biplot(iris[,1:4]) |> PCA() #> Object of class biplot, based on 150 samples and 4 variables. #> 4 numeric variables. # create a PCA biplot biplot(data = iris) |> PCA() |> plot()"},{"path":"/reference/PCO.biplot.html","id":null,"dir":"Reference","previous_headings":"","what":"PCO biplot — PCO.biplot","title":"PCO biplot — PCO.biplot","text":"Computes Principal Coordinate Analysis biplot","code":""},{"path":"/reference/PCO.biplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PCO biplot — PCO.biplot","text":"","code":"# S3 method for class 'biplot' PCO(   bp,   Dmat = NULL,   dist.func = NULL,   dist.func.cat = NULL,   dim.biplot = c(2, 1, 3),   e.vects = NULL,   group.aes = NULL,   show.class.means = FALSE,   axes = c(\"regression\", \"splines\"),   ... )"},{"path":"/reference/PCO.biplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"PCO biplot — PCO.biplot","text":"bp object class biplot obtained preceding function biplot(). Dmat nxn matrix Euclidean embeddable distances samples dist.func function compute Euclidean embeddable distances samples. default NULL computes Euclidean distance. dist.func.cat function compute Euclidean embeddable distance categorical variables samples. default NULL computes extended matching coefficient. dim.biplot dimension biplot. values 1, 2 3 accepted, default 2. e.vects e.vects eigenvectors (canonical variates) extract, default 1:dim.biplot. group.aes vector length number rows data matrix differentiated aesthetics samples. show.class.means logical, indicating whether plot class means biplot. axes type biplot axes, currently regression axes implemented ... arguments dist.func","code":""},{"path":"/reference/PCO.biplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"PCO biplot — PCO.biplot","text":"object class biplot.","code":""},{"path":"/reference/PCO.biplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"PCO biplot — PCO.biplot","text":"","code":"biplot(iris) |> PCO(dist.func=sqrtManhattan) |> plot()"},{"path":"/reference/PCO.html","id":null,"dir":"Reference","previous_headings":"","what":"Principal Coordinate Analysis (PCO) biplot method — PCO","title":"Principal Coordinate Analysis (PCO) biplot method — PCO","text":"Principal Coordinate Analysis (PCO) biplot method","code":""},{"path":"/reference/PCO.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Principal Coordinate Analysis (PCO) biplot method — PCO","text":"","code":"PCO(bp, Dmat=NULL, dist.func=NULL, dist.func.cat=NULL,            dim.biplot = c(2,1,3), e.vects = NULL, group.aes=NULL,            show.class.means = FALSE, axes = c(\"regression\",\"splines\"), ...)"},{"path":"/reference/PCO.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Principal Coordinate Analysis (PCO) biplot method — PCO","text":"bp object class biplot obtained preceding function biplot(). Dmat nxn matrix Euclidean embeddable distances samples dist.func function compute Euclidean embeddable distances samples. default NULL computes Euclidean distance. dist.func.cat function compute Euclidean embeddable distance categorical variables samples. default NULL computes extended matching coefficient. dim.biplot dimension biplot. values 1, 2 3 accepted, default 2. e.vects e.vects eigenvectors (canonical variates) extract, default 1:dim.biplot. group.aes vector length number rows data matrix differentiated aesthetics samples. show.class.means logical, indicating whether plot class means biplot. axes type biplot axes, currently regression axes implemented ... arguments dist.func","code":""},{"path":"/reference/PCO.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Principal Coordinate Analysis (PCO) biplot method — PCO","text":"Object class biplot","code":""},{"path":"/reference/PCO.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Principal Coordinate Analysis (PCO) biplot method — PCO","text":"","code":"biplot(iris[,1:4]) |> PCO(dist.func = sqrtManhattan) #> Object of class biplot, based on 150 samples and 4 variables. #> 4 numeric variables. # create a CVA biplot biplot(iris[,1:4]) |> PCO(dist.func = sqrtManhattan) |> plot()"},{"path":"/reference/plot.biplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic Plotting function of objects of class biplot — plot.biplot","title":"Generic Plotting function of objects of class biplot — plot.biplot","text":"Generic Plotting function objects class biplot","code":""},{"path":"/reference/plot.biplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic Plotting function of objects of class biplot — plot.biplot","text":"","code":"# S3 method for class 'biplot' plot(   x,   exp.factor = 1.2,   axis.predictivity = NULL,   sample.predictivity = NULL,   zoom = FALSE,   add = FALSE,   xlim = NULL,   ylim = NULL,   ... )"},{"path":"/reference/plot.biplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic Plotting function of objects of class biplot — plot.biplot","text":"x object class biplot. exp.factor numeric value default axes biplot. Larger values specified zooming respect sample points biplot display smaller values specified zooming respect sample points biplot display. axis.predictivity either logical numeric value 0 1. numeric value, value used threshold axes axis predictivity larger threshold displayed. axis.predictivity = TRUE, axis colour 'diluted' proportion axis predictivity. sample.predictivity either logical numeric value 0 1. numeric value, value used threshold samples sample predictivity larger threshold displayed. sample.predictivity = TRUE, sample size shrinked proportion sample predictivity. zoom logical value allowing user select area zoom . add logical value allowing user add biplot current plot. add = TRUE argument zoom inactive. xlim horizontal limits plot. ylim vertical limits plot. ... additional arguments.","code":""},{"path":"/reference/plot.biplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic Plotting function of objects of class biplot — plot.biplot","text":"object class biplot.","code":""},{"path":"/reference/plot.biplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic Plotting function of objects of class biplot — plot.biplot","text":"","code":"biplot (iris[,1:4]) |> PCA() |> plot()"},{"path":"/reference/prediction.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict samples to display on the biplot — prediction","title":"Predict samples to display on the biplot — prediction","text":"function makes predictions sample points, variables means displays biplot.","code":""},{"path":"/reference/prediction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict samples to display on the biplot — prediction","text":"","code":"prediction(bp, predict.samples = NULL, predict.means = NULL, which = 1:bp$p)"},{"path":"/reference/prediction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict samples to display on the biplot — prediction","text":"bp object class biplot obtained preceding function biplot(). predict.samples vector specifying samples predict. predict.means vector specifying group means predict. vector specifying variable prediction.","code":""},{"path":"/reference/prediction.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict samples to display on the biplot — prediction","text":"list object called predict appended object class biplot following elements: samples vector indices samples predicted. predict.means vector group names groups means predicted. vector indices variables predicted. predict.mat matrix predicted samples. predict.means.mat matrix predicted group means.","code":""},{"path":"/reference/prediction.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predict samples to display on the biplot — prediction","text":"","code":"biplot(data = iris[,1:4]) |> PCA(group.aes=iris[,5], show.class.means = TRUE) |>  prediction(141:145,1:3) |> plot()"},{"path":"/reference/print.biplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic print function for objects of class biplot — print.biplot","title":"Generic print function for objects of class biplot — print.biplot","text":"function used print output biplot object created.","code":""},{"path":"/reference/print.biplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic print function for objects of class biplot — print.biplot","text":"","code":"# S3 method for class 'biplot' print(x, ...)"},{"path":"/reference/print.biplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic print function for objects of class biplot — print.biplot","text":"x object class biplot. ... additional arguments.","code":""},{"path":"/reference/print.biplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic print function for objects of class biplot — print.biplot","text":"function produce return value, called side effects.","code":""},{"path":"/reference/print.biplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic print function for objects of class biplot — print.biplot","text":"","code":"out <- biplot (iris[,1:4]) |> PCA() out #> Object of class biplot, based on 150 samples and 4 variables. #> 4 numeric variables."},{"path":"/reference/reflect.html","id":null,"dir":"Reference","previous_headings":"","what":"Reflect the biplot about a chosen axis — reflect","title":"Reflect the biplot about a chosen axis — reflect","text":"function provides user option reflect biplot horizontally, vertically diagonally.","code":""},{"path":"/reference/reflect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reflect the biplot about a chosen axis — reflect","text":"","code":"reflect(bp, reflect.axis = c(\"FALSE\", \"x\", \"y\", \"xy\"))"},{"path":"/reference/reflect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reflect the biplot about a chosen axis — reflect","text":"bp object class biplot reflect.axis character string indicating axis reflect. One FALSE (default), \"x\" reflection x-axis, \"y\" reflection y-axis \"xy\" reflection axes.","code":""},{"path":"/reference/reflect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reflect the biplot about a chosen axis — reflect","text":"object class biplot","code":""},{"path":"/reference/reflect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reflect the biplot about a chosen axis — reflect","text":"","code":"biplot(iris[,1:4],group.aes = iris[,5]) |> PCA() |> reflect(\"x\") |> plot()  biplot(iris[,1:4],group.aes = iris[,5]) |> PCA() |> reflect(\"y\") |> plot()  biplot(iris[,1:4],group.aes = iris[,5]) |> PCA() |> reflect(\"xy\") |> plot()"},{"path":"/reference/regress.biplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Regression biplot — regress.biplot","title":"Regression biplot — regress.biplot","text":"Computes regression biplot axes","code":""},{"path":"/reference/regress.biplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Regression biplot — regress.biplot","text":"","code":"# S3 method for class 'biplot' regress(   bp,   Z,   group.aes = NULL,   show.group.means = TRUE,   axes = c(\"regression\", \"splines\") )"},{"path":"/reference/regress.biplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Regression biplot — regress.biplot","text":"bp object class biplot obtained preceding function biplot(). Z matrix coordinates samples group.aes vector length number rows data matrix differentiated aesthetics samples. show.group.means logical, indicating whether group means plotted biplot. axes type axes fitted biplot. Options 'regression' linear regression axes (default) 'splines' B-spline axes.","code":""},{"path":"/reference/regress.biplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Regression biplot — regress.biplot","text":"object class biplot.","code":""},{"path":"/reference/regress.biplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Regression biplot — regress.biplot","text":"","code":"biplot(iris) |> regress(Z = cmdscale(dist(iris[,1:4]))) |> plot()"},{"path":"/reference/regress.html","id":null,"dir":"Reference","previous_headings":"","what":"Regression biplot method — regress","title":"Regression biplot method — regress","text":"Regression biplot method","code":""},{"path":"/reference/regress.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Regression biplot method — regress","text":"","code":"regress(bp, Z, group.aes=NULL, show.group.means = TRUE,                 axes = c(\"regression\", \"splines\"))"},{"path":"/reference/regress.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Regression biplot method — regress","text":"bp object class biplot obtained preceding function biplot(). Z matrix coordinates samples group.aes vector length number rows data matrix differentiated aesthetics samples. show.group.means logical, indicating whether group means plotted biplot. axes type axes fitted biplot. Options 'regression' linear regression axes (default) 'splines' B-spline axes.","code":""},{"path":"/reference/regress.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Regression biplot method — regress","text":"Object class biplot","code":""},{"path":"/reference/regress.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Regression biplot method — regress","text":"","code":"biplot(iris[,1:4]) |> regress(Z=cmdscale(dist(iris[,1:4]))) |> plot()"},{"path":"/reference/rotate.html","id":null,"dir":"Reference","previous_headings":"","what":"Rotate the biplot a chosen amount of degrees — rotate","title":"Rotate the biplot a chosen amount of degrees — rotate","text":"function provides user option rotate biplot anti-clockwise clockwise.","code":""},{"path":"/reference/rotate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rotate the biplot a chosen amount of degrees — rotate","text":"","code":"rotate(bp, rotate.degrees = 0)"},{"path":"/reference/rotate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rotate the biplot a chosen amount of degrees — rotate","text":"bp object class biplot rotate.degrees value specifying degrees biplot rotated, default 0. positive value results anti-clockwise rotation negative value clockwise rotation.","code":""},{"path":"/reference/rotate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rotate the biplot a chosen amount of degrees — rotate","text":"object class biplot.","code":""},{"path":"/reference/rotate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rotate the biplot a chosen amount of degrees — rotate","text":"","code":"biplot(iris[,1:4],group.aes = iris[,5]) |> PCA() |> rotate(200) |> plot()"},{"path":"/reference/samples.html","id":null,"dir":"Reference","previous_headings":"","what":"Format aesthetics for the biplot samples — samples","title":"Format aesthetics for the biplot samples — samples","text":"function allows user format aesthetics samples.","code":""},{"path":"/reference/samples.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format aesthetics for the biplot samples — samples","text":"","code":"samples (bp,  which = 1:bp$g, col = ez.col, pch = 16, cex = 1, label = FALSE, label.name = NULL, label.col=NULL, label.cex = 0.75,  label.side = \"bottom\", label.offset = 0.5, connected=FALSE, connect.col = \"black\", connect.lty = 1,  connect.lwd = 1, opacity = 1)"},{"path":"/reference/samples.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format aesthetics for the biplot samples — samples","text":"bp object class biplot. vector containing groups classes samples displayed, default bp$g. col colour(s) samples, default blue. pch plotting character(s) samples, default 16. cex character expansion(s) samples, default 1. label logical value indicating whether samples labelled, default FALSE. Alternatively, specify \"ggrepel\" non-overlapping placement labels. label.name vector length label names samples, default NULL. NULL, rownames(bp) used. Alternatively, custom vector length n used. label.col vector length label colours samples, default colour sample points. label.cex vector length label text expansions samples, default 0.75. label.side side label plotted point appears, default bottom. Note unlike argument pos text(), options \"bottom\", \"left\", \"top\", \"right\" 1, 2, 3, 4. label.offset offset label plotted point. See ?text detailed explanation argument offset. connected logical value indicating whether samples connected order rows data matrix, default FALSE. connect.col colour connecting line, default black. connect.lty line type connecting line, default 1. connect.lwd line width connecting line, default 1. opacity opacity level plotted points, default 1 opaque point.","code":""},{"path":"/reference/samples.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format aesthetics for the biplot samples — samples","text":"object class biplot appended list called samples containing following elements: vector containing groups classes samples (means) displayed. col colour(s) samples. pch plotting character(s) samples. cex character expansion(s) plotting character(s) samples. label logical value indicating whether samples labelled. label.name label names samples. label.col label colours samples. label.cex label text expansions samples. label.side side label plotted point appears.. label.offset offset label plotted point. connected logical value indicating whether samples connected order rows data matrix. connect.col colour connecting line. connect.lty line type connecting line. connect.lwd line width connecting line. opacity opacity level plotted points.","code":""},{"path":"/reference/samples.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Format aesthetics for the biplot samples — samples","text":"arguments , col, pch cex based specification group.aes classes. groups specified, single colour, plotting character / character expansion expected. \\(g\\) groups specified, vectors length \\(g\\) expected, values recycled length \\(g\\). arguments label, label.cex, label.side label.offset based sample size \\(n\\). single value recycled \\(n\\) times vector length \\(n\\) expected.","code":""},{"path":[]},{"path":"/reference/samples.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format aesthetics for the biplot samples — samples","text":"","code":"biplot(iris[,1:4]) |> PCA() |> samples(col=\"purple\",pch=15, opacity=0.5) |> plot()  biplot(iris[,1:4]) |> PCA() |>    samples(col=\"purple\",pch=NA, opacity=0.5, label = TRUE) |> plot()  biplot(iris[,1:4]) |> PCA() |>    samples(col=\"purple\",pch=NA, opacity=0.5, label = TRUE,            label.name = paste(\"s:\",1:150, sep=\"\")) |>    plot()  biplot(iris[,1:4]) |> PCA() |>    samples(col=\"purple\",pch=NA, opacity=0.5, label = \"ggrepel\") |> plot() #> Warning: Use of `df$x` is discouraged. #> ℹ Use `x` instead. #> Warning: Use of `df$y` is discouraged. #> ℹ Use `y` instead. #> Warning: Use of `df$z` is discouraged. #> ℹ Use `z` instead. #> Warning: Use of `df$x` is discouraged. #> ℹ Use `x` instead. #> Warning: Use of `df$y` is discouraged. #> ℹ Use `y` instead. #> Warning: Use of `df$z` is discouraged. #> ℹ Use `z` instead. #> Warning: Use of `df$x` is discouraged. #> ℹ Use `x` instead. #> Warning: Use of `df$y` is discouraged. #> ℹ Use `y` instead. #> Warning: Use of `df$z` is discouraged. #> ℹ Use `z` instead. #> Warning: Use of `df$x` is discouraged. #> ℹ Use `x` instead. #> Warning: Use of `df$y` is discouraged. #> ℹ Use `y` instead. #> Warning: Use of `df$z` is discouraged. #> ℹ Use `z` instead. #> Warning: Use of `df$x` is discouraged. #> ℹ Use `x` instead. #> Warning: Use of `df$y` is discouraged. #> ℹ Use `y` instead. #> Warning: Use of `df$z` is discouraged. #> ℹ Use `z` instead. #> Warning: Use of `df$x` is discouraged. #> ℹ Use `x` instead. #> Warning: Use of `df$y` is discouraged. #> ℹ Use `y` instead. #> Warning: Use of `df$z` is discouraged. #> ℹ Use `z` instead. #> Warning: ggrepel: 14 unlabeled data points (too many overlaps). Consider increasing max.overlaps #> Warning: ggrepel: 14 unlabeled data points (too many overlaps). Consider increasing max.overlaps"},{"path":"/reference/sqrtManhattan.html","id":null,"dir":"Reference","previous_headings":"","what":"Computes the square root of the Manhattan distance An example of a Euclidean embeddable distance metric — sqrtManhattan","title":"Computes the square root of the Manhattan distance An example of a Euclidean embeddable distance metric — sqrtManhattan","text":"Computes square root Manhattan distance example Euclidean embeddable distance metric","code":""},{"path":"/reference/sqrtManhattan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Computes the square root of the Manhattan distance An example of a Euclidean embeddable distance metric — sqrtManhattan","text":"","code":"sqrtManhattan(X)"},{"path":"/reference/sqrtManhattan.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Computes the square root of the Manhattan distance An example of a Euclidean embeddable distance metric — sqrtManhattan","text":"X matrix samples x variables computation samples x samples distance matrix","code":""},{"path":"/reference/sqrtManhattan.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Computes the square root of the Manhattan distance An example of a Euclidean embeddable distance metric — sqrtManhattan","text":"dist object","code":""},{"path":"/reference/sqrtManhattan.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Computes the square root of the Manhattan distance An example of a Euclidean embeddable distance metric — sqrtManhattan","text":"","code":"sqrtManhattan(iris[,1:4]) #>             1         2         3         4         5         6         7 #> 2   0.8366600                                                             #> 3   0.8944272 0.7071068                                                   #> 4   1.0000000 0.7071068 0.6324555                                         #> 5   0.4472136 0.8366600 0.8944272 1.0000000                               #> 6   1.0954451 1.3784049 1.4142136 1.4142136 1.0954451                     #> 7   0.8366600 0.8944272 0.7071068 0.7071068 0.8366600 1.3038405           #> 8   0.5477226 0.7745967 0.8366600 0.8366600 0.5477226 1.1401754 0.7745967 #> 9   1.1401754 0.7745967 0.8366600 0.7071068 1.1401754 1.5811388 0.8944272 #> 10  0.8944272 0.5477226 0.7745967 0.6324555 0.8944272 1.3416408 0.9486833 #> 11  0.7745967 1.1401754 1.1832160 1.1832160 0.7745967 0.7745967 1.1401754 #> 12  0.7745967 0.8366600 0.7745967 0.7745967 0.7745967 1.1832160 0.7071068 #> 13  0.9486833 0.4472136 0.7071068 0.7071068 0.9486833 1.4491377 0.8944272 #> 14  1.3038405 1.0000000 0.9486833 0.9486833 1.3038405 1.7029386 1.0954451 #> 15  1.1832160 1.4491377 1.4142136 1.5491933 1.1832160 1.0954451 1.4491377 #> 16  1.3416408 1.5811388 1.6124515 1.6124515 1.3416408 1.0000000 1.5165751 #> 17  1.0000000 1.3038405 1.2649111 1.4142136 1.0000000 0.6324555 1.2247449 #> 18  0.3162278 0.8944272 0.9486833 1.0488088 0.5477226 1.0488088 0.7745967 #> 19  1.1401754 1.4142136 1.4491377 1.4491377 1.1401754 0.7071068 1.3416408 #> 20  0.7071068 1.0954451 1.1401754 1.1401754 0.7071068 0.8366600 1.0000000 #> 21  0.8366600 1.0954451 1.1401754 1.1401754 0.9486833 0.8366600 1.0954451 #> 22  0.7071068 1.0954451 1.1401754 1.1401754 0.7071068 0.8366600 1.0000000 #> 23  1.0000000 1.1401754 0.8944272 1.0000000 0.8944272 1.4142136 0.8366600 #> 24  0.8944272 1.0488088 1.0954451 1.0954451 1.0000000 1.0000000 1.0488088 #> 25  0.9486833 1.0000000 0.9486833 0.9486833 0.9486833 1.2247449 0.8944272 #> 26  0.8944272 0.5477226 0.8944272 0.7745967 0.8944272 1.2649111 1.0488088 #> 27  0.7745967 0.9486833 1.0000000 1.0000000 0.7745967 1.0000000 0.8366600 #> 28  0.4472136 0.9486833 1.0000000 1.0000000 0.6324555 1.0000000 0.9486833 #> 29  0.4472136 0.8366600 0.8944272 1.0000000 0.6324555 1.0954451 0.8366600 #> 30  0.9486833 0.7745967 0.5477226 0.5477226 0.9486833 1.3038405 0.7745967 #> 31  0.9486833 0.6324555 0.7071068 0.5477226 0.9486833 1.3038405 0.8944272 #> 32  0.8366600 1.0954451 1.1401754 1.1401754 0.9486833 0.8366600 1.0000000 #> 33  0.9486833 1.2649111 1.3038405 1.3038405 0.9486833 0.9486833 1.2649111 #> 34  1.0488088 1.3416408 1.3784049 1.4491377 1.0488088 0.9486833 1.3416408 #> 35  0.8366600 0.4472136 0.7071068 0.5477226 0.8366600 1.3038405 0.8944272 #> 36  0.7745967 0.7071068 0.6324555 0.8944272 0.7745967 1.3416408 0.9486833 #> 37  0.7071068 1.0954451 1.0488088 1.2247449 0.8366600 1.0488088 1.0954451 #> 38  0.6324555 0.8366600 0.8944272 1.0000000 0.4472136 1.1832160 0.8366600 #> 39  1.1401754 0.7745967 0.7071068 0.7071068 1.1401754 1.5811388 0.8944272 #> 40  0.4472136 0.8366600 0.8944272 0.8944272 0.6324555 1.0954451 0.8366600 #> 41  0.5477226 0.8944272 0.8366600 1.0488088 0.5477226 1.1401754 0.7745967 #> 42  1.4142136 1.1401754 1.0954451 1.0954451 1.4142136 1.7320508 1.1401754 #> 43  1.0488088 0.8944272 0.5477226 0.7071068 1.0488088 1.5165751 0.7745967 #> 44  0.8366600 1.0954451 1.1401754 1.1401754 0.8366600 1.0488088 1.0000000 #> 45  1.0000000 1.3038405 1.3416408 1.3416408 1.0000000 0.7745967 1.2247449 #> 46  0.9486833 0.4472136 0.7071068 0.7071068 0.9486833 1.3784049 0.7745967 #> 47  0.7071068 1.0954451 1.1401754 1.1401754 0.7071068 0.8366600 1.0954451 #> 48  0.8944272 0.7071068 0.4472136 0.4472136 0.8944272 1.4142136 0.5477226 #> 49  0.7071068 1.0954451 1.1401754 1.1401754 0.7071068 0.8366600 1.0954451 #> 50  0.5477226 0.6324555 0.7071068 0.8366600 0.5477226 1.2247449 0.7745967 #> 51  2.5884358 2.6076810 2.6267851 2.6267851 2.6267851 2.5099801 2.6457513 #> 52  2.4494897 2.4698178 2.4899799 2.4899799 2.4899799 2.3664319 2.5099801 #> 53  2.6457513 2.6267851 2.6832816 2.6457513 2.6832816 2.5690465 2.7018512 #> 54  2.3021729 2.2360680 2.3452079 2.3021729 2.3452079 2.2135944 2.3664319 #> 55  2.5690465 2.5099801 2.6076810 2.5690465 2.6076810 2.4899799 2.6267851 #> 56  2.3452079 2.2803509 2.3874673 2.3452079 2.3874673 2.2583180 2.4083189 #> 57  2.4698178 2.5298221 2.5495098 2.5495098 2.5099801 2.3874673 2.5298221 #> 58  2.0000000 1.8165902 1.9493589 1.8973666 2.0000000 2.0493902 1.9748418 #> 59  2.5298221 2.4698178 2.5690465 2.5298221 2.5690465 2.4494897 2.5884358 #> 60  2.1447611 2.0736441 2.1908902 2.1447611 2.1908902 2.1447611 2.2135944 #> 61  2.1213203 2.0000000 2.1213203 2.0736441 2.1213203 2.1679483 2.1447611 #> 62  2.3237900 2.2583180 2.3664319 2.3237900 2.3664319 2.2360680 2.3874673 #> 63  2.3664319 2.3021729 2.4083189 2.3664319 2.4083189 2.2803509 2.4289916 #> 64  2.4698178 2.4083189 2.5099801 2.4698178 2.5099801 2.3874673 2.5298221 #> 65  2.0976177 2.0248457 2.1447611 2.0976177 2.1447611 2.0000000 2.1679483 #> 66  2.4899799 2.4698178 2.5298221 2.4899799 2.5298221 2.4083189 2.5495098 #> 67  2.3237900 2.2583180 2.3664319 2.3237900 2.3664319 2.2360680 2.3874673 #> 68  2.2360680 2.1679483 2.2803509 2.2360680 2.2803509 2.1447611 2.3021729 #> 69  2.6076810 2.5495098 2.6457513 2.6076810 2.6457513 2.5298221 2.6645825 #> 70  2.2135944 2.1447611 2.2583180 2.2135944 2.2583180 2.1213203 2.2803509 #> 71  2.4698178 2.4899799 2.5099801 2.5099801 2.5099801 2.3874673 2.5298221 #> 72  2.3237900 2.2583180 2.3664319 2.3237900 2.3664319 2.2360680 2.3874673 #> 73  2.6457513 2.5884358 2.6832816 2.6457513 2.6832816 2.5690465 2.7018512 #> 74  2.4494897 2.3874673 2.4899799 2.4494897 2.4899799 2.3664319 2.5099801 #> 75  2.4289916 2.3664319 2.4698178 2.4289916 2.4698178 2.3452079 2.4899799 #> 76  2.4899799 2.4289916 2.5298221 2.4899799 2.5298221 2.4083189 2.5495098 #> 77  2.6457513 2.5884358 2.6832816 2.6457513 2.6832816 2.5690465 2.7018512 #> 78  2.6832816 2.6267851 2.7202941 2.6832816 2.7202941 2.6076810 2.7386128 #> 79  2.4289916 2.3664319 2.4698178 2.4289916 2.4698178 2.3452079 2.4899799 #> 80  2.0976177 2.0248457 2.1447611 2.0976177 2.1447611 2.0000000 2.1679483 #> 81  2.1908902 2.1213203 2.2360680 2.1908902 2.2360680 2.0976177 2.2583180 #> 82  2.1447611 2.0736441 2.1908902 2.1447611 2.1908902 2.0493902 2.2135944 #> 83  2.2360680 2.1679483 2.2803509 2.2360680 2.2803509 2.1447611 2.3021729 #> 84  2.6076810 2.5495098 2.6457513 2.6076810 2.6457513 2.5298221 2.6645825 #> 85  2.2803509 2.2135944 2.3237900 2.2803509 2.3237900 2.1908902 2.3452079 #> 86  2.3452079 2.4494897 2.4698178 2.4698178 2.3874673 2.2583180 2.4083189 #> 87  2.5690465 2.5495098 2.6076810 2.5690465 2.6076810 2.4899799 2.6267851 #> 88  2.5495098 2.4899799 2.5884358 2.5495098 2.5884358 2.4698178 2.6076810 #> 89  2.1908902 2.1213203 2.2360680 2.1908902 2.2360680 2.0976177 2.2583180 #> 90  2.2583180 2.1908902 2.3021729 2.2583180 2.3021729 2.1679483 2.3237900 #> 91  2.3021729 2.2360680 2.3452079 2.3021729 2.3452079 2.2135944 2.3664319 #> 92  2.4289916 2.3664319 2.4698178 2.4289916 2.4698178 2.3452079 2.4899799 #> 93  2.2803509 2.2135944 2.3237900 2.2803509 2.3237900 2.1908902 2.3452079 #> 94  2.0000000 1.8708287 2.0000000 1.9493589 2.0000000 2.0493902 2.0248457 #> 95  2.2803509 2.2135944 2.3237900 2.2803509 2.3237900 2.1908902 2.3452079 #> 96  2.2135944 2.1447611 2.2583180 2.2135944 2.2583180 2.1213203 2.2803509 #> 97  2.2583180 2.1908902 2.3021729 2.2583180 2.3021729 2.1679483 2.3237900 #> 98  2.3874673 2.3237900 2.4289916 2.3874673 2.4289916 2.3021729 2.4494897 #> 99  1.8708287 1.7888544 1.9235384 1.8708287 1.9235384 1.9235384 1.9493589 #> 100 2.2583180 2.1908902 2.3021729 2.2583180 2.3021729 2.1679483 2.3237900 #> 101 2.8809721 2.9325757 2.9495762 2.9495762 2.9154759 2.8106939 2.9325757 #> 102 2.6267851 2.5690465 2.6645825 2.6267851 2.6645825 2.5495098 2.6832816 #> 103 2.9832868 2.9325757 3.0166206 2.9832868 3.0166206 2.9154759 3.0331502 #> 104 2.7568098 2.7018512 2.7928480 2.7568098 2.7928480 2.6832816 2.8106939 #> 105 2.8809721 2.8284271 2.9154759 2.8809721 2.9154759 2.8106939 2.9325757 #> 106 3.1780497 3.1304952 3.2093613 3.1780497 3.2093613 3.1144823 3.2249031 #> 107 2.4083189 2.2583180 2.3664319 2.3237900 2.4083189 2.4494897 2.3874673 #> 108 3.0495901 3.0000000 3.0822070 3.0495901 3.0822070 2.9832868 3.0983867 #> 109 2.9325757 2.8809721 2.9664794 2.9325757 2.9664794 2.8635642 2.9832868 #> 110 3.0331502 3.1464265 3.1622777 3.1622777 3.0331502 2.9325757 3.1144823 #> 111 2.6832816 2.7018512 2.7202941 2.7202941 2.7202941 2.6076810 2.7386128 #> 112 2.7748874 2.7202941 2.8106939 2.7748874 2.8106939 2.7018512 2.8284271 #> 113 2.8635642 2.8106939 2.8982753 2.8635642 2.8982753 2.7928480 2.9154759 #> 114 2.6457513 2.5884358 2.6832816 2.6457513 2.6832816 2.5690465 2.7018512 #> 115 2.7018512 2.6457513 2.7386128 2.7018512 2.7386128 2.6267851 2.7568098 #> 116 2.7568098 2.7748874 2.7928480 2.7928480 2.7928480 2.6832816 2.8106939 #> 117 2.7568098 2.7018512 2.7928480 2.7568098 2.7928480 2.6832816 2.8106939 #> 118 3.1937439 3.3015148 3.3166248 3.3166248 3.1937439 3.0331502 3.2710854 #> 119 3.3316662 3.2863353 3.3615473 3.3316662 3.3615473 3.2710854 3.3763886 #> 120 2.6645825 2.6076810 2.7018512 2.6645825 2.7018512 2.5884358 2.7202941 #> 121 2.9154759 2.9325757 2.9495762 2.9495762 2.9495762 2.8460499 2.9664794 #> 122 2.5495098 2.4899799 2.5884358 2.5495098 2.5884358 2.4698178 2.6076810 #> 123 3.2249031 3.1780497 3.2557641 3.2249031 3.2557641 3.1622777 3.2710854 #> 124 2.6645825 2.6076810 2.7018512 2.6645825 2.7018512 2.5884358 2.7202941 #> 125 2.8284271 2.8809721 2.8982753 2.8982753 2.8635642 2.7568098 2.8809721 #> 126 2.9325757 2.9495762 2.9664794 2.9664794 2.9664794 2.8635642 2.9832868 #> 127 2.6076810 2.5495098 2.6457513 2.6076810 2.6457513 2.5298221 2.6645825 #> 128 2.5690465 2.5099801 2.6076810 2.5690465 2.6076810 2.4899799 2.6267851 #> 129 2.8460499 2.7928480 2.8809721 2.8460499 2.8809721 2.7748874 2.8982753 #> 130 2.8982753 2.8460499 2.9325757 2.8982753 2.9325757 2.8284271 2.9495762 #> 131 3.0659419 3.0166206 3.0983867 3.0659419 3.0983867 3.0000000 3.1144823 #> 132 3.1464265 3.2557641 3.2710854 3.2710854 3.1464265 2.9832868 3.2249031 #> 133 2.8635642 2.8106939 2.8982753 2.8635642 2.8982753 2.7928480 2.9154759 #> 134 2.6267851 2.5690465 2.6645825 2.6267851 2.6645825 2.5495098 2.6832816 #> 135 2.7018512 2.6457513 2.7386128 2.7018512 2.7386128 2.6267851 2.7568098 #> 136 3.1464265 3.0983867 3.1780497 3.1464265 3.1780497 3.0822070 3.1937439 #> 137 2.7748874 2.8635642 2.8809721 2.8809721 2.8106939 2.7018512 2.8284271 #> 138 2.7202941 2.7018512 2.7568098 2.7202941 2.7568098 2.6457513 2.7748874 #> 139 2.5298221 2.4698178 2.5690465 2.5298221 2.5690465 2.4494897 2.5884358 #> 140 2.8460499 2.8284271 2.8809721 2.8460499 2.8809721 2.7748874 2.8982753 #> 141 2.8982753 2.8809721 2.9325757 2.8982753 2.9325757 2.8284271 2.9495762 #> 142 2.8284271 2.8106939 2.8635642 2.8284271 2.8635642 2.7568098 2.8809721 #> 143 2.6267851 2.5690465 2.6645825 2.6267851 2.6645825 2.5495098 2.6832816 #> 144 2.9325757 2.9495762 2.9664794 2.9664794 2.9664794 2.8635642 2.9832868 #> 145 2.8982753 2.9495762 2.9664794 2.9664794 2.9325757 2.8284271 2.9495762 #> 146 2.8284271 2.7748874 2.8635642 2.8284271 2.8635642 2.7568098 2.8809721 #> 147 2.7386128 2.6832816 2.7748874 2.7386128 2.7748874 2.6645825 2.7928480 #> 148 2.7386128 2.6832816 2.7748874 2.7386128 2.7748874 2.6645825 2.7928480 #> 149 2.7018512 2.7928480 2.8106939 2.8106939 2.7386128 2.6267851 2.7568098 #> 150 2.5690465 2.5099801 2.6076810 2.5690465 2.6076810 2.4899799 2.6267851 #>             8         9        10        11        12        13        14 #> 2                                                                         #> 3                                                                         #> 4                                                                         #> 5                                                                         #> 6                                                                         #> 7                                                                         #> 8                                                                         #> 9   1.0954451                                                             #> 10  0.7071068 0.9486833                                                   #> 11  0.8366600 1.3784049 1.0954451                                         #> 12  0.5477226 1.0488088 0.7745967 1.0000000                               #> 13  0.8944272 0.7745967 0.5477226 1.2247449 0.8366600                     #> 14  1.2649111 0.7745967 1.0488088 1.5165751 1.2247449 0.8944272           #> 15  1.3038405 1.6431677 1.4832397 1.0000000 1.4142136 1.5165751 1.6431677 #> 16  1.3784049 1.7606817 1.5491933 1.0954451 1.4832397 1.6431677 1.8708287 #> 17  1.1401754 1.5165751 1.3416408 0.7745967 1.2649111 1.3784049 1.5811388 #> 18  0.6324555 1.1832160 0.9486833 0.8366600 0.8366600 1.0000000 1.3416408 #> 19  1.1832160 1.6124515 1.3784049 0.8366600 1.2247449 1.4832397 1.7320508 #> 20  0.7745967 1.3416408 1.0488088 0.7071068 0.9486833 1.1832160 1.4832397 #> 21  0.7745967 1.3416408 1.0488088 0.7071068 0.8366600 1.1832160 1.4832397 #> 22  0.7745967 1.3416408 1.0488088 0.7071068 0.9486833 1.1832160 1.4832397 #> 23  1.0488088 1.1401754 1.1832160 1.1832160 1.0000000 1.1401754 1.0488088 #> 24  0.8366600 1.3038405 1.0000000 1.0954451 0.8944272 1.1401754 1.4491377 #> 25  0.7745967 1.1832160 0.9486833 1.1401754 0.5477226 1.0000000 1.3416408 #> 26  0.7071068 0.9486833 0.6324555 1.0954451 0.7745967 0.7071068 1.1401754 #> 27  0.5477226 1.2247449 0.8944272 1.0000000 0.6324555 1.0488088 1.3784049 #> 28  0.5477226 1.2247449 0.8944272 0.6324555 0.7745967 1.0488088 1.3784049 #> 29  0.5477226 1.1401754 0.8944272 0.7745967 0.7745967 0.9486833 1.3038405 #> 30  0.7745967 0.8944272 0.7071068 1.1401754 0.5477226 0.7745967 1.0954451 #> 31  0.7745967 0.8944272 0.5477226 1.1401754 0.5477226 0.6324555 1.0954451 #> 32  0.7745967 1.3416408 1.0488088 0.7071068 0.9486833 1.1832160 1.4832397 #> 33  1.0000000 1.4832397 1.1401754 0.8366600 1.1401754 1.2649111 1.5491933 #> 34  1.1832160 1.5491933 1.3784049 0.8366600 1.3038405 1.4142136 1.6733201 #> 35  0.6324555 0.8944272 0.3162278 1.0488088 0.7071068 0.6324555 1.0954451 #> 36  0.7071068 1.0488088 0.7745967 1.0954451 0.8944272 0.8366600 1.0488088 #> 37  0.8944272 1.3416408 1.1401754 0.7071068 1.0488088 1.1832160 1.4142136 #> 38  0.7071068 1.1401754 0.7745967 0.8944272 0.7745967 0.8366600 1.2247449 #> 39  1.0954451 0.4472136 0.9486833 1.3784049 1.0488088 0.7745967 0.6324555 #> 40  0.3162278 1.1401754 0.7745967 0.7745967 0.6324555 0.9486833 1.3038405 #> 41  0.6324555 1.1832160 0.9486833 0.9486833 0.8366600 1.0000000 1.2649111 #> 42  1.3784049 0.9486833 1.2649111 1.6124515 1.3416408 1.1401754 1.1401754 #> 43  1.0000000 0.6324555 0.9486833 1.3038405 0.9486833 0.8944272 0.7745967 #> 44  0.7745967 1.3416408 1.0488088 1.0488088 0.8366600 1.1832160 1.4832397 #> 45  1.0488088 1.5165751 1.2649111 1.0000000 1.0954451 1.3784049 1.6431677 #> 46  0.8944272 0.7745967 0.7071068 1.2247449 0.8366600 0.4472136 1.0000000 #> 47  0.7745967 1.3416408 1.0488088 0.7071068 0.8366600 1.1832160 1.4832397 #> 48  0.8366600 0.7071068 0.7745967 1.1832160 0.7745967 0.7071068 0.9486833 #> 49  0.7745967 1.3416408 1.0488088 0.3162278 0.9486833 1.1832160 1.4832397 #> 50  0.4472136 1.0000000 0.7071068 0.9486833 0.7071068 0.7745967 1.1832160 #> 51  2.5690465 2.7202941 2.5884358 2.5495098 2.5884358 2.6457513 2.7928480 #> 52  2.4289916 2.5884358 2.4494897 2.4083189 2.4494897 2.5099801 2.6645825 #> 53  2.6267851 2.7386128 2.6076810 2.6076810 2.6457513 2.6645825 2.8106939 #> 54  2.2803509 2.3237900 2.2583180 2.2583180 2.3021729 2.2803509 2.4494897 #> 55  2.5495098 2.5884358 2.5298221 2.5298221 2.5690465 2.5495098 2.7018512 #> 56  2.3237900 2.3664319 2.3021729 2.3021729 2.3452079 2.3237900 2.4899799 #> 57  2.4494897 2.6457513 2.5099801 2.4289916 2.4698178 2.5690465 2.7202941 #> 58  1.9235384 1.9235384 1.8439089 2.0976177 1.8973666 1.8708287 2.0736441 #> 59  2.5099801 2.5495098 2.4899799 2.4899799 2.5298221 2.5099801 2.6645825 #> 60  2.1213203 2.1679483 2.0976177 2.1908902 2.1447611 2.1213203 2.3021729 #> 61  2.0493902 2.0976177 2.0248457 2.2135944 2.0736441 2.0493902 2.2360680 #> 62  2.3021729 2.3874673 2.2803509 2.2803509 2.3237900 2.3021729 2.4698178 #> 63  2.3452079 2.3874673 2.3237900 2.3237900 2.3664319 2.3452079 2.5099801 #> 64  2.4494897 2.4899799 2.4289916 2.4289916 2.4698178 2.4494897 2.6076810 #> 65  2.0736441 2.1213203 2.0493902 2.0493902 2.0976177 2.0736441 2.2583180 #> 66  2.4698178 2.5884358 2.4494897 2.4494897 2.4899799 2.5099801 2.6645825 #> 67  2.3021729 2.3874673 2.2803509 2.2803509 2.3237900 2.3021729 2.4698178 #> 68  2.2135944 2.2583180 2.1908902 2.1908902 2.2360680 2.2135944 2.3874673 #> 69  2.5884358 2.6267851 2.5690465 2.5690465 2.6076810 2.5884358 2.7386128 #> 70  2.1908902 2.2360680 2.1679483 2.1679483 2.2135944 2.1908902 2.3664319 #> 71  2.4494897 2.6076810 2.4698178 2.4289916 2.4698178 2.5298221 2.6832816 #> 72  2.3021729 2.3452079 2.2803509 2.2803509 2.3237900 2.3021729 2.4698178 #> 73  2.6267851 2.6645825 2.6076810 2.6076810 2.6457513 2.6267851 2.7748874 #> 74  2.4289916 2.4698178 2.4083189 2.4083189 2.4494897 2.4289916 2.5884358 #> 75  2.4083189 2.4494897 2.3874673 2.3874673 2.4289916 2.4083189 2.5690465 #> 76  2.4698178 2.5495098 2.4494897 2.4494897 2.4899799 2.4698178 2.6267851 #> 77  2.6267851 2.6645825 2.6076810 2.6076810 2.6457513 2.6267851 2.7748874 #> 78  2.6645825 2.7386128 2.6457513 2.6457513 2.6832816 2.6645825 2.8106939 #> 79  2.4083189 2.4494897 2.3874673 2.3874673 2.4289916 2.4083189 2.5690465 #> 80  2.0736441 2.1213203 2.0493902 2.0493902 2.0976177 2.0736441 2.2583180 #> 81  2.1679483 2.2135944 2.1447611 2.1447611 2.1908902 2.1679483 2.3452079 #> 82  2.1213203 2.1679483 2.0976177 2.0976177 2.1447611 2.1213203 2.3021729 #> 83  2.2135944 2.2583180 2.1908902 2.1908902 2.2360680 2.2135944 2.3874673 #> 84  2.5884358 2.6267851 2.5690465 2.5690465 2.6076810 2.5884358 2.7386128 #> 85  2.2583180 2.3452079 2.2360680 2.2360680 2.2803509 2.2583180 2.4289916 #> 86  2.3237900 2.5690465 2.4289916 2.3021729 2.3452079 2.4899799 2.6457513 #> 87  2.5495098 2.6645825 2.5298221 2.5298221 2.5690465 2.5884358 2.7386128 #> 88  2.5298221 2.5690465 2.5099801 2.5099801 2.5495098 2.5298221 2.6832816 #> 89  2.1679483 2.2583180 2.1447611 2.1447611 2.1908902 2.1679483 2.3452079 #> 90  2.2360680 2.2803509 2.2135944 2.2135944 2.2583180 2.2360680 2.4083189 #> 91  2.2803509 2.3237900 2.2583180 2.2583180 2.3021729 2.2803509 2.4494897 #> 92  2.4083189 2.4899799 2.3874673 2.3874673 2.4289916 2.4083189 2.5690465 #> 93  2.2583180 2.3021729 2.2360680 2.2360680 2.2803509 2.2583180 2.4289916 #> 94  1.9235384 1.9748418 1.8973666 2.0976177 1.9493589 1.9235384 2.1213203 #> 95  2.2583180 2.3021729 2.2360680 2.2360680 2.2803509 2.2583180 2.4289916 #> 96  2.1908902 2.2803509 2.1679483 2.1679483 2.2135944 2.1908902 2.3664319 #> 97  2.2360680 2.2803509 2.2135944 2.2135944 2.2583180 2.2360680 2.4083189 #> 98  2.3664319 2.4083189 2.3452079 2.3452079 2.3874673 2.3664319 2.5298221 #> 99  1.8439089 1.8973666 1.8165902 1.9748418 1.8708287 1.8439089 2.0493902 #> 100 2.2360680 2.2803509 2.2135944 2.2135944 2.2583180 2.2360680 2.4083189 #> 101 2.8635642 3.0331502 2.9154759 2.8460499 2.8809721 2.9664794 3.0983867 #> 102 2.6076810 2.6457513 2.5884358 2.5884358 2.6267851 2.6076810 2.7568098 #> 103 2.9664794 3.0331502 2.9495762 2.9495762 2.9832868 2.9664794 3.0983867 #> 104 2.7386128 2.7748874 2.7202941 2.7202941 2.7568098 2.7386128 2.8809721 #> 105 2.8635642 2.9325757 2.8460499 2.8460499 2.8809721 2.8635642 3.0000000 #> 106 3.1622777 3.2249031 3.1464265 3.1464265 3.1780497 3.1622777 3.2863353 #> 107 2.3452079 2.3452079 2.2803509 2.4899799 2.3237900 2.3021729 2.4698178 #> 108 3.0331502 3.0659419 3.0166206 3.0166206 3.0495901 3.0331502 3.1622777 #> 109 2.9154759 2.9495762 2.8982753 2.8982753 2.9325757 2.9154759 3.0495901 #> 110 3.0495901 3.2403703 3.1304952 2.9664794 3.0659419 3.1780497 3.3015148 #> 111 2.6645825 2.8106939 2.6832816 2.6457513 2.6832816 2.7386128 2.8809721 #> 112 2.7568098 2.7928480 2.7386128 2.7386128 2.7748874 2.7568098 2.8982753 #> 113 2.8460499 2.9154759 2.8284271 2.8284271 2.8635642 2.8460499 2.9832868 #> 114 2.6267851 2.6645825 2.6076810 2.6076810 2.6457513 2.6267851 2.7748874 #> 115 2.6832816 2.7202941 2.6645825 2.6645825 2.7018512 2.6832816 2.8284271 #> 116 2.7386128 2.8809721 2.7568098 2.7202941 2.7568098 2.8106939 2.9495762 #> 117 2.7386128 2.8106939 2.7202941 2.7202941 2.7568098 2.7386128 2.8809721 #> 118 3.2093613 3.3911650 3.2863353 3.0983867 3.2249031 3.3316662 3.4496377 #> 119 3.3166248 3.3466401 3.3015148 3.3015148 3.3316662 3.3166248 3.4351128 #> 120 2.6457513 2.6832816 2.6267851 2.6267851 2.6645825 2.6457513 2.7928480 #> 121 2.8982753 3.0331502 2.9154759 2.8809721 2.9154759 2.9664794 3.0983867 #> 122 2.5298221 2.5690465 2.5099801 2.5099801 2.5495098 2.5298221 2.6832816 #> 123 3.2093613 3.2403703 3.1937439 3.1937439 3.2249031 3.2093613 3.3316662 #> 124 2.6457513 2.6832816 2.6267851 2.6267851 2.6645825 2.6457513 2.7928480 #> 125 2.8106939 2.9832868 2.8635642 2.7928480 2.8284271 2.9154759 3.0495901 #> 126 2.9154759 3.0495901 2.9325757 2.8982753 2.9325757 2.9832868 3.1144823 #> 127 2.5884358 2.6267851 2.5690465 2.5690465 2.6076810 2.5884358 2.7386128 #> 128 2.5495098 2.6267851 2.5298221 2.5298221 2.5690465 2.5495098 2.7018512 #> 129 2.8284271 2.8635642 2.8106939 2.8106939 2.8460499 2.8284271 2.9664794 #> 130 2.8809721 2.9495762 2.8635642 2.8635642 2.8982753 2.8809721 3.0166206 #> 131 3.0495901 3.0822070 3.0331502 3.0331502 3.0659419 3.0495901 3.1780497 #> 132 3.1622777 3.3466401 3.2403703 3.0495901 3.1780497 3.2863353 3.4058773 #> 133 2.8460499 2.8809721 2.8284271 2.8284271 2.8635642 2.8460499 2.9832868 #> 134 2.6076810 2.6457513 2.5884358 2.5884358 2.6267851 2.6076810 2.7568098 #> 135 2.6832816 2.7202941 2.6645825 2.6645825 2.7018512 2.6832816 2.8284271 #> 136 3.1304952 3.1937439 3.1144823 3.1144823 3.1464265 3.1304952 3.2557641 #> 137 2.7568098 2.9664794 2.8460499 2.7386128 2.7748874 2.8982753 3.0331502 #> 138 2.7018512 2.8106939 2.6832816 2.6832816 2.7202941 2.7386128 2.8809721 #> 139 2.5099801 2.5884358 2.4899799 2.4899799 2.5298221 2.5099801 2.6645825 #> 140 2.8284271 2.9325757 2.8106939 2.8106939 2.8460499 2.8635642 3.0000000 #> 141 2.8809721 2.9832868 2.8635642 2.8635642 2.8982753 2.9154759 3.0495901 #> 142 2.8106939 2.9154759 2.7928480 2.7928480 2.8284271 2.8460499 2.9832868 #> 143 2.6076810 2.6457513 2.5884358 2.5884358 2.6267851 2.6076810 2.7568098 #> 144 2.9154759 3.0495901 2.9325757 2.8982753 2.9325757 2.9832868 3.1144823 #> 145 2.8809721 3.0495901 2.9325757 2.8635642 2.8982753 2.9832868 3.1144823 #> 146 2.8106939 2.8809721 2.7928480 2.7928480 2.8284271 2.8106939 2.9495762 #> 147 2.7202941 2.7568098 2.7018512 2.7018512 2.7386128 2.7202941 2.8635642 #> 148 2.7202941 2.7928480 2.7018512 2.7018512 2.7386128 2.7202941 2.8635642 #> 149 2.6832816 2.8982753 2.7748874 2.6645825 2.7018512 2.8284271 2.9664794 #> 150 2.5495098 2.6267851 2.5298221 2.5298221 2.5690465 2.5495098 2.7018512 #>            15        16        17        18        19        20        21 #> 2                                                                         #> 3                                                                         #> 4                                                                         #> 5                                                                         #> 6                                                                         #> 7                                                                         #> 8                                                                         #> 9                                                                         #> 10                                                                        #> 11                                                                        #> 12                                                                        #> 13                                                                        #> 14                                                                        #> 15                                                                        #> 16  1.0000000                                                             #> 17  0.8944272 1.0000000                                                   #> 18  1.2247449 1.3038405 0.9486833                                         #> 19  0.9486833 0.9486833 0.9486833 1.0954451                               #> 20  1.1401754 1.1401754 0.8366600 0.6324555 0.8944272                     #> 21  1.2247449 1.3038405 1.0488088 0.8944272 0.8944272 1.0000000           #> 22  1.2247449 1.1401754 0.8366600 0.6324555 1.0000000 0.4472136 1.0000000 #> 23  1.3416408 1.6124515 1.2649111 1.0488088 1.4491377 1.1401754 1.3038405 #> 24  1.4832397 1.4142136 1.1832160 0.8366600 1.1401754 0.9486833 0.8366600 #> 25  1.5165751 1.5811388 1.3784049 1.0000000 1.2649111 1.0954451 0.8944272 #> 26  1.4832397 1.5491933 1.3416408 0.9486833 1.3038405 1.0488088 0.9486833 #> 27  1.4142136 1.3416408 1.0954451 0.7071068 1.1401754 0.8366600 0.8366600 #> 28  1.1832160 1.2649111 1.0000000 0.5477226 1.0488088 0.7071068 0.7071068 #> 29  1.1832160 1.3416408 1.0000000 0.5477226 1.1401754 0.8366600 0.7071068 #> 30  1.5165751 1.5811388 1.3784049 1.0000000 1.3416408 1.0954451 1.0000000 #> 31  1.5165751 1.5811388 1.3784049 1.0000000 1.3416408 1.0954451 1.0000000 #> 32  1.2247449 1.1401754 0.8366600 0.7745967 1.0000000 0.8944272 0.6324555 #> 33  1.0488088 1.0488088 0.9486833 1.0000000 1.0954451 0.7745967 1.0954451 #> 34  0.8366600 0.8366600 0.8366600 1.0954451 1.0000000 1.0000000 1.0954451 #> 35  1.4491377 1.5165751 1.3038405 0.8944272 1.3416408 1.0000000 1.0000000 #> 36  1.2649111 1.5491933 1.1832160 0.8366600 1.3784049 1.0488088 1.0488088 #> 37  0.9486833 1.2247449 0.8366600 0.7745967 1.0000000 1.0000000 0.7745967 #> 38  1.2649111 1.4142136 1.0954451 0.7071068 1.2247449 0.8366600 1.0488088 #> 39  1.5811388 1.7606817 1.4491377 1.1832160 1.6124515 1.3416408 1.3416408 #> 40  1.2649111 1.3416408 1.0954451 0.5477226 1.1401754 0.7071068 0.7071068 #> 41  1.2247449 1.3784049 0.9486833 0.4472136 1.1832160 0.7745967 1.0000000 #> 42  1.7888544 1.8973666 1.6124515 1.3784049 1.7606817 1.5165751 1.5811388 #> 43  1.5165751 1.7029386 1.3784049 1.0954451 1.5491933 1.2649111 1.2649111 #> 44  1.4491377 1.3784049 1.1401754 0.7745967 1.1832160 0.8944272 1.0000000 #> 45  1.3416408 1.2649111 1.0000000 0.9486833 0.9486833 0.7071068 1.0488088 #> 46  1.5165751 1.5811388 1.3038405 0.8944272 1.4142136 1.0954451 1.1832160 #> 47  1.1401754 1.2247449 0.9486833 0.7745967 0.8944272 0.4472136 0.8944272 #> 48  1.4832397 1.6124515 1.3416408 0.9486833 1.4491377 1.1401754 1.1401754 #> 49  1.0488088 1.1401754 0.8366600 0.7745967 0.8944272 0.6324555 0.7745967 #> 50  1.3038405 1.4491377 1.1401754 0.6324555 1.2649111 0.8944272 0.8944272 #> 51  2.5884358 2.5884358 2.5884358 2.5690465 2.4494897 2.6076810 2.4494897 #> 52  2.4494897 2.4494897 2.4494897 2.4289916 2.3021729 2.4698178 2.3021729 #> 53  2.6457513 2.6457513 2.6457513 2.6267851 2.5099801 2.6645825 2.5099801 #> 54  2.4289916 2.3874673 2.3021729 2.2803509 2.2360680 2.3237900 2.1447611 #> 55  2.5690465 2.5690465 2.5690465 2.5495098 2.4289916 2.5884358 2.4289916 #> 56  2.3874673 2.3452079 2.3452079 2.3237900 2.1908902 2.3664319 2.1908902 #> 57  2.4698178 2.4698178 2.4698178 2.4494897 2.3237900 2.4899799 2.3237900 #> 58  2.3237900 2.2803509 2.1447611 1.9748418 2.1213203 2.0248457 1.9748418 #> 59  2.5298221 2.5298221 2.5298221 2.5099801 2.3874673 2.5495098 2.3874673 #> 60  2.4083189 2.3664319 2.2360680 2.1213203 2.2135944 2.1679483 2.0736441 #> 61  2.4289916 2.3874673 2.2583180 2.0976177 2.2360680 2.1447611 2.0976177 #> 62  2.3237900 2.3237900 2.3237900 2.3021729 2.1679483 2.3452079 2.1679483 #> 63  2.3664319 2.3664319 2.3664319 2.3452079 2.2135944 2.3874673 2.2135944 #> 64  2.4698178 2.4698178 2.4698178 2.4494897 2.3237900 2.4899799 2.3237900 #> 65  2.1908902 2.1447611 2.0976177 2.0736441 1.9748418 2.1213203 1.9235384 #> 66  2.4899799 2.4899799 2.4899799 2.4698178 2.3452079 2.5099801 2.3452079 #> 67  2.4083189 2.3664319 2.3237900 2.3021729 2.2135944 2.3452079 2.1679483 #> 68  2.2360680 2.2360680 2.2360680 2.2135944 2.0736441 2.2583180 2.0736441 #> 69  2.6076810 2.6076810 2.6076810 2.5884358 2.4698178 2.6267851 2.4698178 #> 70  2.3021729 2.2583180 2.2135944 2.1908902 2.0976177 2.2360680 2.0493902 #> 71  2.4698178 2.4698178 2.4698178 2.4494897 2.3237900 2.4899799 2.3237900 #> 72  2.3237900 2.3237900 2.3237900 2.3021729 2.1679483 2.3452079 2.1679483 #> 73  2.6457513 2.6457513 2.6457513 2.6267851 2.5099801 2.6645825 2.5099801 #> 74  2.4494897 2.4494897 2.4494897 2.4289916 2.3021729 2.4698178 2.3021729 #> 75  2.4289916 2.4289916 2.4289916 2.4083189 2.2803509 2.4494897 2.2803509 #> 76  2.4899799 2.4899799 2.4899799 2.4698178 2.3452079 2.5099801 2.3452079 #> 77  2.6457513 2.6457513 2.6457513 2.6267851 2.5099801 2.6645825 2.5099801 #> 78  2.6832816 2.6832816 2.6832816 2.6645825 2.5495098 2.7018512 2.5495098 #> 79  2.4289916 2.4289916 2.4289916 2.4083189 2.2803509 2.4494897 2.2803509 #> 80  2.1447611 2.0976177 2.0976177 2.0736441 1.9235384 2.1213203 1.9235384 #> 81  2.3237900 2.2803509 2.1908902 2.1679483 2.1213203 2.2135944 2.0248457 #> 82  2.2803509 2.2360680 2.1447611 2.1213203 2.0736441 2.1679483 1.9748418 #> 83  2.2360680 2.2360680 2.2360680 2.2135944 2.0736441 2.2583180 2.0736441 #> 84  2.6076810 2.6076810 2.6076810 2.5884358 2.4698178 2.6267851 2.4698178 #> 85  2.4494897 2.4083189 2.2803509 2.2583180 2.2583180 2.3021729 2.1213203 #> 86  2.3452079 2.3452079 2.3452079 2.3237900 2.1908902 2.3664319 2.1908902 #> 87  2.5690465 2.5690465 2.5690465 2.5495098 2.4289916 2.5884358 2.4289916 #> 88  2.5495098 2.5495098 2.5495098 2.5298221 2.4083189 2.5690465 2.4083189 #> 89  2.2803509 2.2360680 2.1908902 2.1679483 2.0736441 2.2135944 2.0248457 #> 90  2.3874673 2.3452079 2.2583180 2.2360680 2.1908902 2.2803509 2.0976177 #> 91  2.4289916 2.3874673 2.3021729 2.2803509 2.2360680 2.3237900 2.1447611 #> 92  2.4289916 2.4289916 2.4289916 2.4083189 2.2803509 2.4494897 2.2803509 #> 93  2.2803509 2.2803509 2.2803509 2.2583180 2.1213203 2.3021729 2.1213203 #> 94  2.3237900 2.2803509 2.1447611 1.9748418 2.1213203 2.0248457 1.9748418 #> 95  2.3664319 2.3237900 2.2803509 2.2583180 2.1679483 2.3021729 2.1213203 #> 96  2.2583180 2.2135944 2.2135944 2.1908902 2.0493902 2.2360680 2.0493902 #> 97  2.3021729 2.2583180 2.2583180 2.2360680 2.0976177 2.2803509 2.0976177 #> 98  2.3874673 2.3874673 2.3874673 2.3664319 2.2360680 2.4083189 2.2360680 #> 99  2.2135944 2.1679483 2.0248457 1.8439089 2.0000000 1.8973666 1.8439089 #> 100 2.3021729 2.2583180 2.2583180 2.2360680 2.0976177 2.2803509 2.0976177 #> 101 2.8809721 2.8809721 2.8809721 2.8635642 2.7568098 2.8982753 2.7568098 #> 102 2.6267851 2.6267851 2.6267851 2.6076810 2.4899799 2.6457513 2.4899799 #> 103 2.9832868 2.9832868 2.9832868 2.9664794 2.8635642 3.0000000 2.8635642 #> 104 2.7568098 2.7568098 2.7568098 2.7386128 2.6267851 2.7748874 2.6267851 #> 105 2.8809721 2.8809721 2.8809721 2.8635642 2.7568098 2.8982753 2.7568098 #> 106 3.1780497 3.1780497 3.1780497 3.1622777 3.0659419 3.1937439 3.0659419 #> 107 2.6832816 2.6457513 2.5298221 2.3874673 2.5099801 2.4289916 2.3874673 #> 108 3.0495901 3.0495901 3.0495901 3.0331502 2.9325757 3.0659419 2.9325757 #> 109 2.9325757 2.9325757 2.9325757 2.9154759 2.8106939 2.9495762 2.8106939 #> 110 3.0000000 3.0000000 3.0000000 3.0166206 2.8809721 3.0166206 2.9495762 #> 111 2.6832816 2.6832816 2.6832816 2.6645825 2.5495098 2.7018512 2.5495098 #> 112 2.7748874 2.7748874 2.7748874 2.7568098 2.6457513 2.7928480 2.6457513 #> 113 2.8635642 2.8635642 2.8635642 2.8460499 2.7386128 2.8809721 2.7386128 #> 114 2.6832816 2.6457513 2.6457513 2.6267851 2.5099801 2.6645825 2.5099801 #> 115 2.7018512 2.7018512 2.7018512 2.6832816 2.5690465 2.7202941 2.5690465 #> 116 2.7568098 2.7568098 2.7568098 2.7386128 2.6267851 2.7748874 2.6267851 #> 117 2.7568098 2.7568098 2.7568098 2.7386128 2.6267851 2.7748874 2.6267851 #> 118 3.0983867 3.0983867 3.0983867 3.1780497 2.9832868 3.1144823 3.1144823 #> 119 3.3316662 3.3316662 3.3316662 3.3166248 3.2249031 3.3466401 3.2249031 #> 120 2.6645825 2.6645825 2.6645825 2.6457513 2.5298221 2.6832816 2.5298221 #> 121 2.9154759 2.9154759 2.9154759 2.8982753 2.7928480 2.9325757 2.7928480 #> 122 2.6267851 2.5884358 2.5495098 2.5298221 2.4494897 2.5690465 2.4083189 #> 123 3.2249031 3.2249031 3.2249031 3.2093613 3.1144823 3.2403703 3.1144823 #> 124 2.6645825 2.6645825 2.6645825 2.6457513 2.5298221 2.6832816 2.5298221 #> 125 2.8284271 2.8284271 2.8284271 2.8106939 2.7018512 2.8460499 2.7018512 #> 126 2.9325757 2.9325757 2.9325757 2.9154759 2.8106939 2.9495762 2.8106939 #> 127 2.6076810 2.6076810 2.6076810 2.5884358 2.4698178 2.6267851 2.4698178 #> 128 2.5690465 2.5690465 2.5690465 2.5495098 2.4289916 2.5884358 2.4289916 #> 129 2.8460499 2.8460499 2.8460499 2.8284271 2.7202941 2.8635642 2.7202941 #> 130 2.8982753 2.8982753 2.8982753 2.8809721 2.7748874 2.9154759 2.7748874 #> 131 3.0659419 3.0659419 3.0659419 3.0495901 2.9495762 3.0822070 2.9495762 #> 132 3.0495901 3.0495901 3.0495901 3.1304952 2.9325757 3.0659419 3.0659419 #> 133 2.8635642 2.8635642 2.8635642 2.8460499 2.7386128 2.8809721 2.7386128 #> 134 2.6267851 2.6267851 2.6267851 2.6076810 2.4899799 2.6457513 2.4899799 #> 135 2.7018512 2.7018512 2.7018512 2.6832816 2.5690465 2.7202941 2.5690465 #> 136 3.1464265 3.1464265 3.1464265 3.1304952 3.0331502 3.1622777 3.0331502 #> 137 2.7748874 2.7748874 2.7748874 2.7568098 2.6457513 2.7928480 2.6457513 #> 138 2.7202941 2.7202941 2.7202941 2.7018512 2.5884358 2.7386128 2.5884358 #> 139 2.5298221 2.5298221 2.5298221 2.5099801 2.3874673 2.5495098 2.3874673 #> 140 2.8460499 2.8460499 2.8460499 2.8284271 2.7202941 2.8635642 2.7202941 #> 141 2.8982753 2.8982753 2.8982753 2.8809721 2.7748874 2.9154759 2.7748874 #> 142 2.8284271 2.8284271 2.8284271 2.8106939 2.7018512 2.8460499 2.7018512 #> 143 2.6267851 2.6267851 2.6267851 2.6076810 2.4899799 2.6457513 2.4899799 #> 144 2.9325757 2.9325757 2.9325757 2.9154759 2.8106939 2.9495762 2.8106939 #> 145 2.8982753 2.8982753 2.8982753 2.8809721 2.7748874 2.9154759 2.7748874 #> 146 2.8284271 2.8284271 2.8284271 2.8106939 2.7018512 2.8460499 2.7018512 #> 147 2.7386128 2.7386128 2.7386128 2.7202941 2.6076810 2.7568098 2.6076810 #> 148 2.7386128 2.7386128 2.7386128 2.7202941 2.6076810 2.7568098 2.6076810 #> 149 2.7018512 2.7018512 2.7018512 2.6832816 2.5690465 2.7202941 2.5690465 #> 150 2.5690465 2.5690465 2.5690465 2.5495098 2.4289916 2.5884358 2.4289916 #>            22        23        24        25        26        27        28 #> 2                                                                         #> 3                                                                         #> 4                                                                         #> 5                                                                         #> 6                                                                         #> 7                                                                         #> 8                                                                         #> 9                                                                         #> 10                                                                        #> 11                                                                        #> 12                                                                        #> 13                                                                        #> 14                                                                        #> 15                                                                        #> 16                                                                        #> 17                                                                        #> 18                                                                        #> 19                                                                        #> 20                                                                        #> 21                                                                        #> 22                                                                        #> 23  1.1401754                                                             #> 24  0.8366600 1.3416408                                                   #> 25  1.0954451 1.1401754 0.9486833                                         #> 26  1.0488088 1.2649111 0.8944272 0.9486833                               #> 27  0.7071068 1.1832160 0.6324555 0.8366600 0.7745967                     #> 28  0.7071068 1.0954451 0.8944272 0.9486833 0.8944272 0.7745967           #> 29  0.8366600 1.0954451 0.8944272 0.9486833 0.8944272 0.7745967 0.4472136 #> 30  1.0954451 1.0488088 0.9486833 0.7745967 0.7071068 0.8366600 0.9486833 #> 31  1.0954451 1.1401754 0.9486833 0.7745967 0.5477226 0.8366600 0.9486833 #> 32  0.7745967 1.3038405 0.8366600 1.0954451 1.0488088 0.7071068 0.7071068 #> 33  0.8944272 1.3038405 1.2247449 1.2649111 1.2247449 1.1401754 0.8366600 #> 34  1.0954451 1.3784049 1.3784049 1.4142136 1.3784049 1.3038405 1.0488088 #> 35  1.0000000 1.1401754 0.9486833 0.8944272 0.5477226 0.8366600 0.8366600 #> 36  1.0488088 1.0000000 1.0000000 1.0488088 0.7745967 0.8944272 0.8944272 #> 37  1.0000000 1.1401754 1.1401754 1.1832160 1.1401754 1.0488088 0.7071068 #> 38  0.8366600 0.8944272 1.0954451 0.9486833 1.0000000 0.8944272 0.7745967 #> 39  1.3416408 1.0488088 1.3038405 1.1832160 0.9486833 1.2247449 1.2247449 #> 40  0.7071068 1.0954451 0.7745967 0.8366600 0.7745967 0.6324555 0.4472136 #> 41  0.7745967 0.9486833 0.9486833 1.0000000 0.9486833 0.7071068 0.7071068 #> 42  1.5165751 1.3416408 1.4832397 1.4491377 1.2649111 1.4142136 1.4832397 #> 43  1.2649111 0.9486833 1.2247449 1.0954451 1.0488088 1.1401754 1.1401754 #> 44  0.7745967 1.2247449 0.7071068 1.0000000 0.9486833 0.5477226 0.8366600 #> 45  0.7071068 1.3416408 0.8944272 0.9486833 1.1832160 0.8944272 1.0000000 #> 46  1.0954451 1.1401754 1.0488088 1.0000000 0.7071068 0.9486833 1.0488088 #> 47  0.6324555 1.1401754 0.9486833 1.0000000 0.9486833 0.8366600 0.7071068 #> 48  1.1401754 0.8944272 1.0954451 0.9486833 0.8944272 1.0000000 1.0000000 #> 49  0.6324555 1.1401754 1.0488088 1.0954451 1.0488088 0.9486833 0.5477226 #> 50  0.8944272 1.0488088 0.8366600 0.8944272 0.7071068 0.7071068 0.7071068 #> 51  2.5690465 2.7748874 2.4289916 2.5298221 2.5495098 2.5099801 2.5495098 #> 52  2.4289916 2.6457513 2.2803509 2.3874673 2.4083189 2.3664319 2.4083189 #> 53  2.6267851 2.8284271 2.4899799 2.5884358 2.5690465 2.5690465 2.6076810 #> 54  2.2803509 2.5099801 2.1213203 2.2360680 2.1679483 2.2135944 2.2583180 #> 55  2.5495098 2.7568098 2.4083189 2.5099801 2.4494897 2.4899799 2.5298221 #> 56  2.3237900 2.5495098 2.1679483 2.2803509 2.2135944 2.2583180 2.3021729 #> 57  2.4494897 2.6645825 2.3021729 2.4083189 2.4698178 2.3874673 2.4289916 #> 58  1.9748418 2.1447611 1.7888544 1.8165902 1.7888544 1.8439089 2.0000000 #> 59  2.5099801 2.7202941 2.3664319 2.4698178 2.4083189 2.4494897 2.4899799 #> 60  2.1213203 2.3664319 1.9493589 2.0736441 2.0000000 2.0493902 2.0976177 #> 61  2.0976177 2.3021729 1.9235384 2.0000000 1.9235384 1.9748418 2.1213203 #> 62  2.3021729 2.5298221 2.1447611 2.2583180 2.1908902 2.2360680 2.2803509 #> 63  2.3452079 2.5690465 2.1908902 2.3021729 2.2360680 2.2803509 2.3237900 #> 64  2.4494897 2.6645825 2.3021729 2.4083189 2.3452079 2.3874673 2.4289916 #> 65  2.0736441 2.3237900 1.8973666 2.0248457 1.9493589 2.0000000 2.0493902 #> 66  2.4698178 2.6832816 2.3237900 2.4289916 2.4083189 2.4083189 2.4494897 #> 67  2.3021729 2.5298221 2.1447611 2.2583180 2.1908902 2.2360680 2.2803509 #> 68  2.2135944 2.4494897 2.0493902 2.1679483 2.0976177 2.1447611 2.1908902 #> 69  2.5884358 2.7928480 2.4494897 2.5495098 2.4899799 2.5298221 2.5690465 #> 70  2.1908902 2.4289916 2.0248457 2.1447611 2.0736441 2.1213203 2.1679483 #> 71  2.4494897 2.6645825 2.3021729 2.4083189 2.4289916 2.3874673 2.4289916 #> 72  2.3021729 2.5298221 2.1447611 2.2583180 2.1908902 2.2360680 2.2803509 #> 73  2.6267851 2.8284271 2.4899799 2.5884358 2.5298221 2.5690465 2.6076810 #> 74  2.4289916 2.6457513 2.2803509 2.3874673 2.3237900 2.3664319 2.4083189 #> 75  2.4083189 2.6267851 2.2583180 2.3664319 2.3021729 2.3452079 2.3874673 #> 76  2.4698178 2.6832816 2.3237900 2.4289916 2.3664319 2.4083189 2.4494897 #> 77  2.6267851 2.8284271 2.4899799 2.5884358 2.5298221 2.5690465 2.6076810 #> 78  2.6645825 2.8635642 2.5298221 2.6267851 2.5690465 2.6076810 2.6457513 #> 79  2.4083189 2.6267851 2.2583180 2.3664319 2.3021729 2.3452079 2.3874673 #> 80  2.0736441 2.3237900 1.8973666 2.0248457 1.9493589 2.0000000 2.0493902 #> 81  2.1679483 2.4083189 2.0000000 2.1213203 2.0493902 2.0976177 2.1447611 #> 82  2.1213203 2.3664319 1.9493589 2.0736441 2.0000000 2.0493902 2.0976177 #> 83  2.2135944 2.4494897 2.0493902 2.1679483 2.0976177 2.1447611 2.1908902 #> 84  2.5884358 2.7928480 2.4494897 2.5495098 2.4899799 2.5298221 2.5690465 #> 85  2.2583180 2.4899799 2.0976177 2.2135944 2.1447611 2.1908902 2.2360680 #> 86  2.3237900 2.5495098 2.2135944 2.2803509 2.3874673 2.2583180 2.3021729 #> 87  2.5495098 2.7568098 2.4083189 2.5099801 2.4899799 2.4899799 2.5298221 #> 88  2.5298221 2.7386128 2.3874673 2.4899799 2.4289916 2.4698178 2.5099801 #> 89  2.1679483 2.4083189 2.0000000 2.1213203 2.0493902 2.0976177 2.1447611 #> 90  2.2360680 2.4698178 2.0736441 2.1908902 2.1213203 2.1679483 2.2135944 #> 91  2.2803509 2.5099801 2.1213203 2.2360680 2.1679483 2.2135944 2.2583180 #> 92  2.4083189 2.6267851 2.2583180 2.3664319 2.3021729 2.3452079 2.3874673 #> 93  2.2583180 2.4899799 2.0976177 2.2135944 2.1447611 2.1908902 2.2360680 #> 94  1.9748418 2.1908902 1.7888544 1.8708287 1.7888544 1.8439089 2.0000000 #> 95  2.2583180 2.4899799 2.0976177 2.2135944 2.1447611 2.1908902 2.2360680 #> 96  2.1908902 2.4289916 2.0248457 2.1447611 2.0736441 2.1213203 2.1679483 #> 97  2.2360680 2.4698178 2.0736441 2.1908902 2.1213203 2.1679483 2.2135944 #> 98  2.3664319 2.5884358 2.2135944 2.3237900 2.2583180 2.3021729 2.3452079 #> 99  1.8439089 2.1213203 1.6431677 1.7888544 1.7029386 1.7606817 1.8708287 #> 100 2.2360680 2.4698178 2.0736441 2.1908902 2.1213203 2.1679483 2.2135944 #> 101 2.8635642 3.0495901 2.7386128 2.8284271 2.8809721 2.8106939 2.8460499 #> 102 2.6076810 2.8106939 2.4698178 2.5690465 2.5099801 2.5495098 2.5884358 #> 103 2.9664794 3.1464265 2.8460499 2.9325757 2.8809721 2.9154759 2.9495762 #> 104 2.7386128 2.9325757 2.6076810 2.7018512 2.6457513 2.6832816 2.7202941 #> 105 2.8635642 3.0495901 2.7386128 2.8284271 2.7748874 2.8106939 2.8460499 #> 106 3.1622777 3.3316662 3.0495901 3.1304952 3.0822070 3.1144823 3.1464265 #> 107 2.3874673 2.5298221 2.2360680 2.2583180 2.2360680 2.2803509 2.4083189 #> 108 3.0331502 3.2093613 2.9154759 3.0000000 2.9495762 2.9832868 3.0166206 #> 109 2.9154759 3.0983867 2.7928480 2.8809721 2.8284271 2.8635642 2.8982753 #> 110 2.9832868 3.1622777 2.9664794 3.0166206 3.0983867 3.0000000 3.0000000 #> 111 2.6645825 2.8635642 2.5298221 2.6267851 2.6457513 2.6076810 2.6457513 #> 112 2.7568098 2.9495762 2.6267851 2.7202941 2.6645825 2.7018512 2.7386128 #> 113 2.8460499 3.0331502 2.7202941 2.8106939 2.7568098 2.7928480 2.8284271 #> 114 2.6267851 2.8284271 2.4899799 2.5884358 2.5298221 2.5690465 2.6076810 #> 115 2.6832816 2.8809721 2.5495098 2.6457513 2.5884358 2.6267851 2.6645825 #> 116 2.7386128 2.9325757 2.6076810 2.7018512 2.7202941 2.6832816 2.7202941 #> 117 2.7386128 2.9325757 2.6076810 2.7018512 2.6457513 2.6832816 2.7202941 #> 118 3.1144823 3.3166248 3.1304952 3.1780497 3.2557641 3.1622777 3.1622777 #> 119 3.3166248 3.4785054 3.2093613 3.2863353 3.2403703 3.2710854 3.3015148 #> 120 2.6457513 2.8460499 2.5099801 2.6076810 2.5495098 2.5884358 2.6267851 #> 121 2.8982753 3.0822070 2.7748874 2.8635642 2.8809721 2.8460499 2.8809721 #> 122 2.5298221 2.7386128 2.3874673 2.4899799 2.4289916 2.4698178 2.5099801 #> 123 3.2093613 3.3763886 3.0983867 3.1780497 3.1304952 3.1622777 3.1937439 #> 124 2.6457513 2.8460499 2.5099801 2.6076810 2.5495098 2.5884358 2.6267851 #> 125 2.8106939 3.0000000 2.6832816 2.7748874 2.8284271 2.7568098 2.7928480 #> 126 2.9154759 3.0983867 2.7928480 2.8809721 2.8982753 2.8635642 2.8982753 #> 127 2.5884358 2.7928480 2.4494897 2.5495098 2.4899799 2.5298221 2.5690465 #> 128 2.5495098 2.7568098 2.4083189 2.5099801 2.4494897 2.4899799 2.5298221 #> 129 2.8284271 3.0166206 2.7018512 2.7928480 2.7386128 2.7748874 2.8106939 #> 130 2.8809721 3.0659419 2.7568098 2.8460499 2.7928480 2.8284271 2.8635642 #> 131 3.0495901 3.2249031 2.9325757 3.0166206 2.9664794 3.0000000 3.0331502 #> 132 3.0659419 3.2710854 3.0822070 3.1304952 3.2093613 3.1144823 3.1144823 #> 133 2.8460499 3.0331502 2.7202941 2.8106939 2.7568098 2.7928480 2.8284271 #> 134 2.6076810 2.8106939 2.4698178 2.5690465 2.5099801 2.5495098 2.5884358 #> 135 2.6832816 2.8809721 2.5495098 2.6457513 2.5884358 2.6267851 2.6645825 #> 136 3.1304952 3.3015148 3.0166206 3.0983867 3.0495901 3.0822070 3.1144823 #> 137 2.7568098 2.9495762 2.6645825 2.7202941 2.8106939 2.7018512 2.7386128 #> 138 2.7018512 2.8982753 2.5690465 2.6645825 2.6457513 2.6457513 2.6832816 #> 139 2.5099801 2.7202941 2.3664319 2.4698178 2.4083189 2.4494897 2.4899799 #> 140 2.8284271 3.0166206 2.7018512 2.7928480 2.7748874 2.7748874 2.8106939 #> 141 2.8809721 3.0659419 2.7568098 2.8460499 2.8284271 2.8284271 2.8635642 #> 142 2.8106939 3.0000000 2.6832816 2.7748874 2.7568098 2.7568098 2.7928480 #> 143 2.6076810 2.8106939 2.4698178 2.5690465 2.5099801 2.5495098 2.5884358 #> 144 2.9154759 3.0983867 2.7928480 2.8809721 2.8982753 2.8635642 2.8982753 #> 145 2.8809721 3.0659419 2.7568098 2.8460499 2.8982753 2.8284271 2.8635642 #> 146 2.8106939 3.0000000 2.6832816 2.7748874 2.7202941 2.7568098 2.7928480 #> 147 2.7202941 2.9154759 2.5884358 2.6832816 2.6267851 2.6645825 2.7018512 #> 148 2.7202941 2.9154759 2.5884358 2.6832816 2.6267851 2.6645825 2.7018512 #> 149 2.6832816 2.8809721 2.5884358 2.6457513 2.7386128 2.6267851 2.6645825 #> 150 2.5495098 2.7568098 2.4083189 2.5099801 2.4494897 2.4899799 2.5298221 #>            29        30        31        32        33        34        35 #> 2                                                                         #> 3                                                                         #> 4                                                                         #> 5                                                                         #> 6                                                                         #> 7                                                                         #> 8                                                                         #> 9                                                                         #> 10                                                                        #> 11                                                                        #> 12                                                                        #> 13                                                                        #> 14                                                                        #> 15                                                                        #> 16                                                                        #> 17                                                                        #> 18                                                                        #> 19                                                                        #> 20                                                                        #> 21                                                                        #> 22                                                                        #> 23                                                                        #> 24                                                                        #> 25                                                                        #> 26                                                                        #> 27                                                                        #> 28                                                                        #> 29                                                                        #> 30  0.9486833                                                             #> 31  0.9486833 0.4472136                                                   #> 32  0.7071068 1.0954451 1.0954451                                         #> 33  0.9486833 1.2649111 1.2649111 1.0954451                               #> 34  1.0488088 1.4142136 1.4142136 1.0954451 0.7745967                     #> 35  0.8366600 0.6324555 0.4472136 1.0000000 1.1832160 1.3416408           #> 36  0.7745967 0.8366600 0.8366600 1.0488088 1.2247449 1.3038405 0.7071068 #> 37  0.7071068 1.1832160 1.1832160 0.7745967 1.0954451 0.8944272 1.0954451 #> 38  0.7745967 0.9486833 0.9486833 1.0488088 0.9486833 1.1401754 0.8366600 #> 39  1.1401754 0.8944272 0.8944272 1.3416408 1.4832397 1.5491933 0.8944272 #> 40  0.4472136 0.8366600 0.8366600 0.7071068 0.9486833 1.1401754 0.7071068 #> 41  0.7071068 1.0000000 1.0000000 0.8944272 1.0954451 1.1832160 0.8944272 #> 42  1.4142136 1.2247449 1.2247449 1.5165751 1.7029386 1.7606817 1.2247449 #> 43  1.0488088 0.7745967 0.8944272 1.2649111 1.4142136 1.4832397 0.8944272 #> 44  0.9486833 1.0000000 1.0000000 0.8944272 1.1832160 1.3416408 1.0000000 #> 45  1.0954451 1.2247449 1.2247449 1.0488088 1.0488088 1.2247449 1.2247449 #> 46  0.9486833 0.7745967 0.6324555 1.0954451 1.3416408 1.4142136 0.6324555 #> 47  0.8366600 1.0000000 1.0000000 1.0000000 0.7745967 1.0000000 1.0000000 #> 48  0.8944272 0.5477226 0.7071068 1.1401754 1.3038405 1.3784049 0.7071068 #> 49  0.7071068 1.0954451 1.0954451 0.7745967 0.7745967 0.8944272 1.0000000 #> 50  0.5477226 0.7745967 0.7745967 0.8944272 1.0954451 1.1832160 0.6324555 #> 51  2.5495098 2.5690465 2.5690465 2.4494897 2.6832816 2.6457513 2.5690465 #> 52  2.4083189 2.4289916 2.4289916 2.3021729 2.5495098 2.5099801 2.4289916 #> 53  2.6076810 2.6267851 2.5884358 2.5099801 2.7386128 2.7018512 2.5884358 #> 54  2.2583180 2.2803509 2.2360680 2.1447611 2.4083189 2.3664319 2.2360680 #> 55  2.5298221 2.5495098 2.5099801 2.4289916 2.6645825 2.6267851 2.5099801 #> 56  2.3021729 2.3237900 2.2803509 2.1908902 2.4494897 2.4083189 2.2803509 #> 57  2.4289916 2.4899799 2.4899799 2.3237900 2.5690465 2.5298221 2.4899799 #> 58  2.0000000 1.8708287 1.8165902 1.9748418 2.1679483 2.2583180 1.8165902 #> 59  2.4899799 2.5099801 2.4698178 2.3874673 2.6267851 2.5884358 2.4698178 #> 60  2.0976177 2.1213203 2.0736441 2.0736441 2.2583180 2.3452079 2.0736441 #> 61  2.1213203 2.0493902 2.0000000 2.0976177 2.2803509 2.3664319 2.0000000 #> 62  2.2803509 2.3021729 2.2583180 2.1679483 2.4289916 2.3874673 2.2583180 #> 63  2.3237900 2.3452079 2.3021729 2.2135944 2.4698178 2.4289916 2.3021729 #> 64  2.4289916 2.4494897 2.4083189 2.3237900 2.5690465 2.5298221 2.4083189 #> 65  2.0493902 2.0736441 2.0248457 1.9235384 2.2135944 2.1679483 2.0248457 #> 66  2.4494897 2.4698178 2.4289916 2.3452079 2.5884358 2.5495098 2.4289916 #> 67  2.2803509 2.3021729 2.2583180 2.1679483 2.4289916 2.3874673 2.2583180 #> 68  2.1908902 2.2135944 2.1679483 2.0736441 2.3452079 2.3021729 2.1679483 #> 69  2.5690465 2.5884358 2.5495098 2.4698178 2.7018512 2.6645825 2.5495098 #> 70  2.1679483 2.1908902 2.1447611 2.0493902 2.3237900 2.2803509 2.1447611 #> 71  2.4289916 2.4494897 2.4494897 2.3237900 2.5690465 2.5298221 2.4494897 #> 72  2.2803509 2.3021729 2.2583180 2.1679483 2.4289916 2.3874673 2.2583180 #> 73  2.6076810 2.6267851 2.5884358 2.5099801 2.7386128 2.7018512 2.5884358 #> 74  2.4083189 2.4289916 2.3874673 2.3021729 2.5495098 2.5099801 2.3874673 #> 75  2.3874673 2.4083189 2.3664319 2.2803509 2.5298221 2.4899799 2.3664319 #> 76  2.4494897 2.4698178 2.4289916 2.3452079 2.5884358 2.5495098 2.4289916 #> 77  2.6076810 2.6267851 2.5884358 2.5099801 2.7386128 2.7018512 2.5884358 #> 78  2.6457513 2.6645825 2.6267851 2.5495098 2.7748874 2.7386128 2.6267851 #> 79  2.3874673 2.4083189 2.3664319 2.2803509 2.5298221 2.4899799 2.3664319 #> 80  2.0493902 2.0736441 2.0248457 1.9235384 2.2135944 2.1679483 2.0248457 #> 81  2.1447611 2.1679483 2.1213203 2.0248457 2.3021729 2.2583180 2.1213203 #> 82  2.0976177 2.1213203 2.0736441 1.9748418 2.2583180 2.2135944 2.0736441 #> 83  2.1908902 2.2135944 2.1679483 2.0736441 2.3452079 2.3021729 2.1679483 #> 84  2.5690465 2.5884358 2.5495098 2.4698178 2.7018512 2.6645825 2.5495098 #> 85  2.2360680 2.2583180 2.2135944 2.1213203 2.3874673 2.3874673 2.2135944 #> 86  2.3021729 2.4083189 2.4083189 2.1908902 2.4494897 2.4083189 2.4083189 #> 87  2.5298221 2.5495098 2.5099801 2.4289916 2.6645825 2.6267851 2.5099801 #> 88  2.5099801 2.5298221 2.4899799 2.4083189 2.6457513 2.6076810 2.4899799 #> 89  2.1447611 2.1679483 2.1213203 2.0248457 2.3021729 2.2583180 2.1213203 #> 90  2.2135944 2.2360680 2.1908902 2.0976177 2.3664319 2.3237900 2.1908902 #> 91  2.2583180 2.2803509 2.2360680 2.1447611 2.4083189 2.3664319 2.2360680 #> 92  2.3874673 2.4083189 2.3664319 2.2803509 2.5298221 2.4899799 2.3664319 #> 93  2.2360680 2.2583180 2.2135944 2.1213203 2.3874673 2.3452079 2.2135944 #> 94  2.0000000 1.9235384 1.8708287 1.9748418 2.1679483 2.2583180 1.8708287 #> 95  2.2360680 2.2583180 2.2135944 2.1213203 2.3874673 2.3452079 2.2135944 #> 96  2.1679483 2.1908902 2.1447611 2.0493902 2.3237900 2.2803509 2.1447611 #> 97  2.2135944 2.2360680 2.1908902 2.0976177 2.3664319 2.3237900 2.1908902 #> 98  2.3452079 2.3664319 2.3237900 2.2360680 2.4899799 2.4494897 2.3237900 #> 99  1.8708287 1.8439089 1.7888544 1.8439089 2.0493902 2.1447611 1.7888544 #> 100 2.2135944 2.2360680 2.1908902 2.0976177 2.3664319 2.3237900 2.1908902 #> 101 2.8460499 2.8982753 2.8982753 2.7568098 2.9664794 2.9325757 2.8982753 #> 102 2.5884358 2.6076810 2.5690465 2.4899799 2.7202941 2.6832816 2.5690465 #> 103 2.9495762 2.9664794 2.9325757 2.8635642 3.0659419 3.0331502 2.9325757 #> 104 2.7202941 2.7386128 2.7018512 2.6267851 2.8460499 2.8106939 2.7018512 #> 105 2.8460499 2.8635642 2.8284271 2.7568098 2.9664794 2.9325757 2.8284271 #> 106 3.1464265 3.1622777 3.1304952 3.0659419 3.2557641 3.2249031 3.1304952 #> 107 2.4083189 2.3021729 2.2583180 2.3874673 2.5495098 2.6267851 2.2583180 #> 108 3.0166206 3.0331502 3.0000000 2.9325757 3.1304952 3.0983867 3.0000000 #> 109 2.8982753 2.9154759 2.8809721 2.8106939 3.0166206 2.9832868 2.8809721 #> 110 3.0331502 3.1144823 3.1144823 2.9495762 3.0822070 3.0495901 3.1144823 #> 111 2.6457513 2.6645825 2.6645825 2.5495098 2.7748874 2.7386128 2.6645825 #> 112 2.7386128 2.7568098 2.7202941 2.6457513 2.8635642 2.8284271 2.7202941 #> 113 2.8284271 2.8460499 2.8106939 2.7386128 2.9495762 2.9154759 2.8106939 #> 114 2.6076810 2.6267851 2.5884358 2.5099801 2.7386128 2.7018512 2.5884358 #> 115 2.6645825 2.6832816 2.6457513 2.5690465 2.7928480 2.7568098 2.6457513 #> 116 2.7202941 2.7386128 2.7386128 2.6267851 2.8460499 2.8106939 2.7386128 #> 117 2.7202941 2.7386128 2.7018512 2.6267851 2.8460499 2.8106939 2.7018512 #> 118 3.1937439 3.2710854 3.2710854 3.1144823 3.1780497 3.1464265 3.2710854 #> 119 3.3015148 3.3166248 3.2863353 3.2249031 3.4058773 3.3763886 3.2863353 #> 120 2.6267851 2.6457513 2.6076810 2.5298221 2.7568098 2.7202941 2.6076810 #> 121 2.8809721 2.8982753 2.8982753 2.7928480 3.0000000 2.9664794 2.8982753 #> 122 2.5099801 2.5298221 2.4899799 2.4083189 2.6457513 2.6076810 2.4899799 #> 123 3.1937439 3.2093613 3.1780497 3.1144823 3.3015148 3.2710854 3.1780497 #> 124 2.6267851 2.6457513 2.6076810 2.5298221 2.7568098 2.7202941 2.6076810 #> 125 2.7928480 2.8460499 2.8460499 2.7018512 2.9154759 2.8809721 2.8460499 #> 126 2.8982753 2.9154759 2.9154759 2.8106939 3.0166206 2.9832868 2.9154759 #> 127 2.5690465 2.5884358 2.5495098 2.4698178 2.7018512 2.6645825 2.5495098 #> 128 2.5298221 2.5495098 2.5099801 2.4289916 2.6645825 2.6267851 2.5099801 #> 129 2.8106939 2.8284271 2.7928480 2.7202941 2.9325757 2.8982753 2.7928480 #> 130 2.8635642 2.8809721 2.8460499 2.7748874 2.9832868 2.9495762 2.8460499 #> 131 3.0331502 3.0495901 3.0166206 2.9495762 3.1464265 3.1144823 3.0166206 #> 132 3.1464265 3.2249031 3.2249031 3.0659419 3.1304952 3.0983867 3.2249031 #> 133 2.8284271 2.8460499 2.8106939 2.7386128 2.9495762 2.9154759 2.8106939 #> 134 2.5884358 2.6076810 2.5690465 2.4899799 2.7202941 2.6832816 2.5690465 #> 135 2.6645825 2.6832816 2.6457513 2.5690465 2.7928480 2.7568098 2.6457513 #> 136 3.1144823 3.1304952 3.0983867 3.0331502 3.2249031 3.1937439 3.0983867 #> 137 2.7386128 2.8284271 2.8284271 2.6457513 2.8635642 2.8284271 2.8284271 #> 138 2.6832816 2.7018512 2.6645825 2.5884358 2.8106939 2.7748874 2.6645825 #> 139 2.4899799 2.5099801 2.4698178 2.3874673 2.6267851 2.5884358 2.4698178 #> 140 2.8106939 2.8284271 2.7928480 2.7202941 2.9325757 2.8982753 2.7928480 #> 141 2.8635642 2.8809721 2.8460499 2.7748874 2.9832868 2.9495762 2.8460499 #> 142 2.7928480 2.8106939 2.7748874 2.7018512 2.9154759 2.8809721 2.7748874 #> 143 2.5884358 2.6076810 2.5690465 2.4899799 2.7202941 2.6832816 2.5690465 #> 144 2.8982753 2.9154759 2.9154759 2.8106939 3.0166206 2.9832868 2.9154759 #> 145 2.8635642 2.9154759 2.9154759 2.7748874 2.9832868 2.9495762 2.9154759 #> 146 2.7928480 2.8106939 2.7748874 2.7018512 2.9154759 2.8809721 2.7748874 #> 147 2.7018512 2.7202941 2.6832816 2.6076810 2.8284271 2.7928480 2.6832816 #> 148 2.7018512 2.7202941 2.6832816 2.6076810 2.8284271 2.7928480 2.6832816 #> 149 2.6645825 2.7568098 2.7568098 2.5690465 2.7928480 2.7568098 2.7568098 #> 150 2.5298221 2.5495098 2.5099801 2.4289916 2.6645825 2.6267851 2.5099801 #>            36        37        38        39        40        41        42 #> 2                                                                         #> 3                                                                         #> 4                                                                         #> 5                                                                         #> 6                                                                         #> 7                                                                         #> 8                                                                         #> 9                                                                         #> 10                                                                        #> 11                                                                        #> 12                                                                        #> 13                                                                        #> 14                                                                        #> 15                                                                        #> 16                                                                        #> 17                                                                        #> 18                                                                        #> 19                                                                        #> 20                                                                        #> 21                                                                        #> 22                                                                        #> 23                                                                        #> 24                                                                        #> 25                                                                        #> 26                                                                        #> 27                                                                        #> 28                                                                        #> 29                                                                        #> 30                                                                        #> 31                                                                        #> 32                                                                        #> 33                                                                        #> 34                                                                        #> 35                                                                        #> 36                                                                        #> 37  0.9486833                                                             #> 38  0.8944272 0.9486833                                                   #> 39  0.9486833 1.2649111 1.1401754                                         #> 40  0.7745967 0.8366600 0.7745967 1.1401754                               #> 41  0.7071068 0.7745967 0.7071068 1.0954451 0.7071068                     #> 42  1.2649111 1.5165751 1.4142136 0.9486833 1.4142136 1.3038405           #> 43  0.8366600 1.1832160 1.0488088 0.4472136 1.0488088 1.0000000 1.0488088 #> 44  1.0488088 1.0954451 0.9486833 1.3416408 0.8366600 0.7745967 1.5165751 #> 45  1.2649111 1.2247449 1.0954451 1.5165751 1.0000000 1.0488088 1.6733201 #> 46  0.8366600 1.1832160 0.9486833 0.7745967 0.9486833 0.8944272 1.0488088 #> 47  1.0488088 1.0000000 0.8366600 1.3416408 0.7071068 0.8944272 1.5811388 #> 48  0.7745967 1.1401754 0.8944272 0.7071068 0.8944272 0.9486833 1.0954451 #> 49  1.0488088 0.7745967 0.8366600 1.3416408 0.7071068 0.8944272 1.5811388 #> 50  0.5477226 0.8944272 0.7071068 1.0000000 0.5477226 0.6324555 1.3038405 #> 51  2.5884358 2.5298221 2.6645825 2.7202941 2.5495098 2.6076810 2.8106939 #> 52  2.4494897 2.3874673 2.5298221 2.5884358 2.4083189 2.4698178 2.6832816 #> 53  2.6457513 2.5884358 2.7202941 2.7386128 2.6076810 2.6645825 2.8284271 #> 54  2.3021729 2.2360680 2.3874673 2.3664319 2.2583180 2.3237900 2.1679483 #> 55  2.5690465 2.5099801 2.6457513 2.6267851 2.5298221 2.5884358 2.6457513 #> 56  2.3452079 2.2803509 2.4289916 2.4083189 2.3021729 2.3664319 2.4289916 #> 57  2.5099801 2.4083189 2.5495098 2.6457513 2.4289916 2.4899799 2.7386128 #> 58  1.9493589 2.1213203 2.0000000 1.9748418 1.9493589 1.9748418 1.7888544 #> 59  2.5298221 2.4698178 2.6076810 2.5884358 2.4899799 2.5495098 2.6457513 #> 60  2.1447611 2.2135944 2.2360680 2.2135944 2.0976177 2.1679483 2.1908902 #> 61  2.0736441 2.2360680 2.1679483 2.1447611 2.0736441 2.0976177 1.9235384 #> 62  2.3237900 2.2583180 2.4083189 2.3874673 2.2803509 2.3452079 2.4899799 #> 63  2.3664319 2.3021729 2.4494897 2.4289916 2.3237900 2.3874673 2.2360680 #> 64  2.4698178 2.4083189 2.5495098 2.5298221 2.4289916 2.4899799 2.5884358 #> 65  2.0976177 2.0248457 2.1908902 2.1679483 2.0493902 2.1213203 2.2360680 #> 66  2.4899799 2.4289916 2.5690465 2.5884358 2.4494897 2.5099801 2.6832816 #> 67  2.3237900 2.2583180 2.4083189 2.3874673 2.2803509 2.3452079 2.4899799 #> 68  2.2360680 2.1679483 2.3237900 2.3021729 2.1908902 2.2583180 2.2803509 #> 69  2.6076810 2.5495098 2.6832816 2.6645825 2.5690465 2.6267851 2.4899799 #> 70  2.2135944 2.1447611 2.3021729 2.2803509 2.1679483 2.2360680 2.1679483 #> 71  2.4698178 2.4083189 2.5495098 2.6076810 2.4289916 2.4899799 2.7018512 #> 72  2.3237900 2.2583180 2.4083189 2.3874673 2.2803509 2.3452079 2.4083189 #> 73  2.6457513 2.5884358 2.7202941 2.7018512 2.6076810 2.6645825 2.6076810 #> 74  2.4494897 2.3874673 2.5298221 2.5099801 2.4083189 2.4698178 2.5298221 #> 75  2.4289916 2.3664319 2.5099801 2.4899799 2.3874673 2.4494897 2.5495098 #> 76  2.4899799 2.4289916 2.5690465 2.5495098 2.4494897 2.5099801 2.6457513 #> 77  2.6457513 2.5884358 2.7202941 2.7018512 2.6076810 2.6645825 2.7202941 #> 78  2.6832816 2.6267851 2.7568098 2.7386128 2.6457513 2.7018512 2.8284271 #> 79  2.4289916 2.3664319 2.5099801 2.4899799 2.3874673 2.4494897 2.5495098 #> 80  2.0976177 2.0248457 2.1908902 2.1679483 2.0493902 2.1213203 2.0976177 #> 81  2.1908902 2.1213203 2.2803509 2.2583180 2.1447611 2.2135944 2.0976177 #> 82  2.1447611 2.0736441 2.2360680 2.2135944 2.0976177 2.1679483 2.0493902 #> 83  2.2360680 2.1679483 2.3237900 2.3021729 2.1908902 2.2583180 2.2803509 #> 84  2.6076810 2.5495098 2.6832816 2.6645825 2.5690465 2.6267851 2.6457513 #> 85  2.2803509 2.2583180 2.3664319 2.3452079 2.2360680 2.3021729 2.4494897 #> 86  2.4289916 2.2803509 2.4289916 2.5690465 2.3021729 2.3664319 2.6645825 #> 87  2.5690465 2.5099801 2.6457513 2.6645825 2.5298221 2.5884358 2.7568098 #> 88  2.5495098 2.4899799 2.6267851 2.6076810 2.5099801 2.5690465 2.4289916 #> 89  2.1908902 2.1213203 2.2803509 2.2583180 2.1447611 2.2135944 2.3664319 #> 90  2.2583180 2.1908902 2.3452079 2.3237900 2.2135944 2.2803509 2.2135944 #> 91  2.3021729 2.2360680 2.3874673 2.3664319 2.2583180 2.3237900 2.3021729 #> 92  2.4289916 2.3664319 2.5099801 2.4899799 2.3874673 2.4494897 2.5884358 #> 93  2.2803509 2.2135944 2.3664319 2.3452079 2.2360680 2.3021729 2.2803509 #> 94  1.9493589 2.1213203 2.0493902 2.0248457 1.9493589 1.9748418 1.7888544 #> 95  2.2803509 2.2135944 2.3664319 2.3452079 2.2360680 2.3021729 2.3237900 #> 96  2.2135944 2.1447611 2.3021729 2.2803509 2.1679483 2.2360680 2.3874673 #> 97  2.2583180 2.1908902 2.3452079 2.3237900 2.2135944 2.2803509 2.3874673 #> 98  2.3874673 2.3237900 2.4698178 2.4494897 2.3452079 2.4083189 2.5099801 #> 99  1.8708287 2.0000000 1.9748418 1.9493589 1.8165902 1.8973666 1.8165902 #> 100 2.2583180 2.1908902 2.3452079 2.3237900 2.2135944 2.2803509 2.3452079 #> 101 2.9154759 2.8284271 2.9495762 3.0331502 2.8460499 2.8982753 3.1144823 #> 102 2.6267851 2.5690465 2.7018512 2.6832816 2.5884358 2.6457513 2.6645825 #> 103 2.9832868 2.9325757 3.0495901 3.0331502 2.9495762 3.0000000 3.1144823 #> 104 2.7568098 2.7018512 2.8284271 2.8106939 2.7202941 2.7748874 2.8635642 #> 105 2.8809721 2.8284271 2.9495762 2.9325757 2.8460499 2.8982753 3.0166206 #> 106 3.1780497 3.1304952 3.2403703 3.2249031 3.1464265 3.1937439 3.3015148 #> 107 2.3664319 2.5099801 2.4083189 2.3874673 2.3664319 2.3874673 2.2803509 #> 108 3.0495901 3.0000000 3.1144823 3.0983867 3.0166206 3.0659419 3.1464265 #> 109 2.9325757 2.8809721 3.0000000 2.9832868 2.8982753 2.9495762 2.8982753 #> 110 3.1304952 2.9832868 3.0659419 3.2403703 3.0331502 3.0495901 3.3166248 #> 111 2.6832816 2.6267851 2.7568098 2.8106939 2.6457513 2.7018512 2.8982753 #> 112 2.7748874 2.7202941 2.8460499 2.8284271 2.7386128 2.7928480 2.8106939 #> 113 2.8635642 2.8106939 2.9325757 2.9154759 2.8284271 2.8809721 3.0000000 #> 114 2.6457513 2.5884358 2.7202941 2.7018512 2.6076810 2.6645825 2.6076810 #> 115 2.7018512 2.6457513 2.7748874 2.7568098 2.6645825 2.7202941 2.7748874 #> 116 2.7568098 2.7018512 2.8284271 2.8809721 2.7202941 2.7748874 2.9664794 #> 117 2.7568098 2.7018512 2.8284271 2.8106939 2.7202941 2.7748874 2.8982753 #> 118 3.2863353 3.1464265 3.2249031 3.3911650 3.1937439 3.2093613 3.4641016 #> 119 3.3316662 3.2863353 3.3911650 3.3763886 3.3015148 3.3466401 3.3316662 #> 120 2.6645825 2.6076810 2.7386128 2.7202941 2.6267851 2.6832816 2.5495098 #> 121 2.9154759 2.8635642 2.9832868 3.0331502 2.8809721 2.9325757 3.1144823 #> 122 2.5495098 2.4899799 2.6267851 2.6076810 2.5099801 2.5690465 2.6267851 #> 123 3.2249031 3.1780497 3.2863353 3.2710854 3.1937439 3.2403703 3.2863353 #> 124 2.6645825 2.6076810 2.7386128 2.7202941 2.6267851 2.6832816 2.7018512 #> 125 2.8635642 2.7748874 2.8982753 2.9832868 2.7928480 2.8460499 3.0659419 #> 126 2.9325757 2.8809721 3.0000000 3.0495901 2.8982753 2.9495762 3.1304952 #> 127 2.6076810 2.5495098 2.6832816 2.6645825 2.5690465 2.6267851 2.6832816 #> 128 2.5690465 2.5099801 2.6457513 2.6267851 2.5298221 2.5884358 2.7202941 #> 129 2.8460499 2.7928480 2.9154759 2.8982753 2.8106939 2.8635642 2.9154759 #> 130 2.8982753 2.8460499 2.9664794 2.9495762 2.8635642 2.9154759 3.0331502 #> 131 3.0659419 3.0166206 3.1304952 3.1144823 3.0331502 3.0822070 3.1304952 #> 132 3.2403703 3.0983867 3.1780497 3.3466401 3.1464265 3.1622777 3.4205263 #> 133 2.8635642 2.8106939 2.9325757 2.9154759 2.8284271 2.8809721 2.9325757 #> 134 2.6267851 2.5690465 2.7018512 2.6832816 2.5884358 2.6457513 2.7018512 #> 135 2.7018512 2.6457513 2.7748874 2.7568098 2.6645825 2.7202941 2.7018512 #> 136 3.1464265 3.0983867 3.2093613 3.1937439 3.1144823 3.1622777 3.2710854 #> 137 2.8460499 2.7202941 2.8460499 2.9664794 2.7386128 2.7928480 3.0495901 #> 138 2.7202941 2.6645825 2.7928480 2.8106939 2.6832816 2.7386128 2.8982753 #> 139 2.5298221 2.4698178 2.6076810 2.5884358 2.4899799 2.5495098 2.6832816 #> 140 2.8460499 2.7928480 2.9154759 2.9325757 2.8106939 2.8635642 3.0166206 #> 141 2.8982753 2.8460499 2.9664794 2.9832868 2.8635642 2.9154759 3.0659419 #> 142 2.8284271 2.7748874 2.8982753 2.9154759 2.7928480 2.8460499 3.0000000 #> 143 2.6267851 2.5690465 2.7018512 2.6832816 2.5884358 2.6457513 2.6645825 #> 144 2.9325757 2.8809721 3.0000000 3.0495901 2.8982753 2.9495762 3.1304952 #> 145 2.9325757 2.8460499 2.9664794 3.0495901 2.8635642 2.9154759 3.1304952 #> 146 2.8284271 2.7748874 2.8982753 2.8809721 2.7928480 2.8460499 2.9664794 #> 147 2.7386128 2.6832816 2.8106939 2.7928480 2.7018512 2.7568098 2.7018512 #> 148 2.7386128 2.6832816 2.8106939 2.7928480 2.7018512 2.7568098 2.8809721 #> 149 2.7748874 2.6457513 2.7748874 2.8982753 2.6645825 2.7202941 2.9832868 #> 150 2.5690465 2.5099801 2.6457513 2.6267851 2.5298221 2.5884358 2.7202941 #>            43        44        45        46        47        48        49 #> 2                                                                         #> 3                                                                         #> 4                                                                         #> 5                                                                         #> 6                                                                         #> 7                                                                         #> 8                                                                         #> 9                                                                         #> 10                                                                        #> 11                                                                        #> 12                                                                        #> 13                                                                        #> 14                                                                        #> 15                                                                        #> 16                                                                        #> 17                                                                        #> 18                                                                        #> 19                                                                        #> 20                                                                        #> 21                                                                        #> 22                                                                        #> 23                                                                        #> 24                                                                        #> 25                                                                        #> 26                                                                        #> 27                                                                        #> 28                                                                        #> 29                                                                        #> 30                                                                        #> 31                                                                        #> 32                                                                        #> 33                                                                        #> 34                                                                        #> 35                                                                        #> 36                                                                        #> 37                                                                        #> 38                                                                        #> 39                                                                        #> 40                                                                        #> 41                                                                        #> 42                                                                        #> 43                                                                        #> 44  1.2649111                                                             #> 45  1.4491377 0.9486833                                                   #> 46  0.8944272 1.0954451 1.3038405                                         #> 47  1.2649111 0.8944272 0.7071068 1.1832160                               #> 48  0.5477226 1.1401754 1.3416408 0.7071068 1.1401754                     #> 49  1.2649111 1.0000000 0.9486833 1.1832160 0.6324555 1.1401754           #> 50  0.8944272 0.8944272 1.1401754 0.7745967 0.8944272 0.7071068 0.8944272 #> 51  2.6832816 2.4899799 2.5099801 2.6076810 2.6076810 2.6267851 2.5690465 #> 52  2.5495098 2.3452079 2.3664319 2.4698178 2.4698178 2.4899799 2.4289916 #> 53  2.7386128 2.5495098 2.5690465 2.6267851 2.6645825 2.6832816 2.6267851 #> 54  2.4083189 2.1908902 2.2135944 2.2360680 2.3237900 2.3452079 2.2803509 #> 55  2.6645825 2.4698178 2.4899799 2.5099801 2.5884358 2.6076810 2.5495098 #> 56  2.4494897 2.2360680 2.2583180 2.2803509 2.3664319 2.3874673 2.3237900 #> 57  2.6076810 2.3664319 2.3874673 2.5298221 2.4899799 2.5495098 2.4494897 #> 58  2.0248457 1.8165902 1.8973666 1.8165902 2.0248457 1.9493589 2.0736441 #> 59  2.6267851 2.4289916 2.4494897 2.4698178 2.5495098 2.5690465 2.5099801 #> 60  2.2583180 2.0248457 2.0493902 2.0736441 2.1679483 2.1908902 2.1679483 #> 61  2.1908902 1.9493589 2.0248457 2.0000000 2.1447611 2.1213203 2.1908902 #> 62  2.4289916 2.2135944 2.2360680 2.2583180 2.3452079 2.3664319 2.3021729 #> 63  2.4698178 2.2583180 2.2803509 2.3021729 2.3874673 2.4083189 2.3452079 #> 64  2.5690465 2.3664319 2.3874673 2.4083189 2.4899799 2.5099801 2.4494897 #> 65  2.2135944 1.9748418 2.0000000 2.0248457 2.1213203 2.1447611 2.0736441 #> 66  2.5884358 2.3874673 2.4083189 2.4698178 2.5099801 2.5298221 2.4698178 #> 67  2.4289916 2.2135944 2.2360680 2.2583180 2.3452079 2.3664319 2.3021729 #> 68  2.3452079 2.1213203 2.1447611 2.1679483 2.2583180 2.2803509 2.2135944 #> 69  2.7018512 2.5099801 2.5298221 2.5495098 2.6267851 2.6457513 2.5884358 #> 70  2.3237900 2.0976177 2.1213203 2.1447611 2.2360680 2.2583180 2.1908902 #> 71  2.5690465 2.3664319 2.3874673 2.4899799 2.4899799 2.5099801 2.4494897 #> 72  2.4289916 2.2135944 2.2360680 2.2583180 2.3452079 2.3664319 2.3021729 #> 73  2.7386128 2.5495098 2.5690465 2.5884358 2.6645825 2.6832816 2.6267851 #> 74  2.5495098 2.3452079 2.3664319 2.3874673 2.4698178 2.4899799 2.4289916 #> 75  2.5298221 2.3237900 2.3452079 2.3664319 2.4494897 2.4698178 2.4083189 #> 76  2.5884358 2.3874673 2.4083189 2.4289916 2.5099801 2.5298221 2.4698178 #> 77  2.7386128 2.5495098 2.5690465 2.5884358 2.6645825 2.6832816 2.6267851 #> 78  2.7748874 2.5884358 2.6076810 2.6267851 2.7018512 2.7202941 2.6645825 #> 79  2.5298221 2.3237900 2.3452079 2.3664319 2.4494897 2.4698178 2.4083189 #> 80  2.2135944 1.9748418 2.0000000 2.0248457 2.1213203 2.1447611 2.0736441 #> 81  2.3021729 2.0736441 2.0976177 2.1213203 2.2135944 2.2360680 2.1679483 #> 82  2.2583180 2.0248457 2.0493902 2.0736441 2.1679483 2.1908902 2.1213203 #> 83  2.3452079 2.1213203 2.1447611 2.1679483 2.2583180 2.2803509 2.2135944 #> 84  2.7018512 2.5099801 2.5298221 2.5495098 2.6267851 2.6457513 2.5884358 #> 85  2.3874673 2.1679483 2.1908902 2.2135944 2.3021729 2.3237900 2.2583180 #> 86  2.5298221 2.2360680 2.2583180 2.4494897 2.3664319 2.4698178 2.3237900 #> 87  2.6645825 2.4698178 2.4899799 2.5495098 2.5884358 2.6076810 2.5495098 #> 88  2.6457513 2.4494897 2.4698178 2.4899799 2.5690465 2.5884358 2.5298221 #> 89  2.3021729 2.0736441 2.0976177 2.1213203 2.2135944 2.2360680 2.1679483 #> 90  2.3664319 2.1447611 2.1679483 2.1908902 2.2803509 2.3021729 2.2360680 #> 91  2.4083189 2.1908902 2.2135944 2.2360680 2.3237900 2.3452079 2.2803509 #> 92  2.5298221 2.3237900 2.3452079 2.3664319 2.4494897 2.4698178 2.4083189 #> 93  2.3874673 2.1679483 2.1908902 2.2135944 2.3021729 2.3237900 2.2583180 #> 94  2.0736441 1.8165902 1.8973666 1.8708287 2.0248457 2.0000000 2.0736441 #> 95  2.3874673 2.1679483 2.1908902 2.2135944 2.3021729 2.3237900 2.2583180 #> 96  2.3237900 2.0976177 2.1213203 2.1447611 2.2360680 2.2583180 2.1908902 #> 97  2.3664319 2.1447611 2.1679483 2.1908902 2.2803509 2.3021729 2.2360680 #> 98  2.4899799 2.2803509 2.3021729 2.3237900 2.4083189 2.4289916 2.3664319 #> 99  2.0000000 1.7320508 1.7606817 1.7888544 1.8973666 1.9235384 1.9493589 #> 100 2.3664319 2.1447611 2.1679483 2.1908902 2.2803509 2.3021729 2.2360680 #> 101 3.0000000 2.7928480 2.8106939 2.9325757 2.8982753 2.9495762 2.8635642 #> 102 2.7202941 2.5298221 2.5495098 2.5690465 2.6457513 2.6645825 2.6076810 #> 103 3.0659419 2.8982753 2.9154759 2.9325757 3.0000000 3.0166206 2.9664794 #> 104 2.8460499 2.6645825 2.6832816 2.7018512 2.7748874 2.7928480 2.7386128 #> 105 2.9664794 2.7928480 2.8106939 2.8284271 2.8982753 2.9154759 2.8635642 #> 106 3.2557641 3.0983867 3.1144823 3.1304952 3.1937439 3.2093613 3.1622777 #> 107 2.4289916 2.2583180 2.3237900 2.2583180 2.4289916 2.3664319 2.4698178 #> 108 3.1304952 2.9664794 2.9832868 3.0000000 3.0659419 3.0822070 3.0331502 #> 109 3.0166206 2.8460499 2.8635642 2.8809721 2.9495762 2.9664794 2.9154759 #> 110 3.2093613 2.9495762 2.9325757 3.1464265 3.0166206 3.1622777 2.9832868 #> 111 2.7748874 2.5884358 2.6076810 2.7018512 2.7018512 2.7202941 2.6645825 #> 112 2.8635642 2.6832816 2.7018512 2.7202941 2.7928480 2.8106939 2.7568098 #> 113 2.9495762 2.7748874 2.7928480 2.8106939 2.8809721 2.8982753 2.8460499 #> 114 2.7386128 2.5495098 2.5690465 2.5884358 2.6645825 2.6832816 2.6267851 #> 115 2.7928480 2.6076810 2.6267851 2.6457513 2.7202941 2.7386128 2.6832816 #> 116 2.8460499 2.6645825 2.6832816 2.7748874 2.7748874 2.7928480 2.7386128 #> 117 2.8460499 2.6645825 2.6832816 2.7018512 2.7748874 2.7928480 2.7386128 #> 118 3.3615473 3.1144823 3.0331502 3.3015148 3.1144823 3.3166248 3.1144823 #> 119 3.4058773 3.2557641 3.2710854 3.2863353 3.3466401 3.3615473 3.3166248 #> 120 2.7568098 2.5690465 2.5884358 2.6076810 2.6832816 2.7018512 2.6457513 #> 121 3.0000000 2.8284271 2.8460499 2.9325757 2.9325757 2.9495762 2.8982753 #> 122 2.6457513 2.4494897 2.4698178 2.4899799 2.5690465 2.5884358 2.5298221 #> 123 3.3015148 3.1464265 3.1622777 3.1780497 3.2403703 3.2557641 3.2093613 #> 124 2.7568098 2.5690465 2.5884358 2.6076810 2.6832816 2.7018512 2.6457513 #> 125 2.9495762 2.7386128 2.7568098 2.8809721 2.8460499 2.8982753 2.8106939 #> 126 3.0166206 2.8460499 2.8635642 2.9495762 2.9495762 2.9664794 2.9154759 #> 127 2.7018512 2.5099801 2.5298221 2.5495098 2.6267851 2.6457513 2.5884358 #> 128 2.6645825 2.4698178 2.4899799 2.5099801 2.5884358 2.6076810 2.5495098 #> 129 2.9325757 2.7568098 2.7748874 2.7928480 2.8635642 2.8809721 2.8284271 #> 130 2.9832868 2.8106939 2.8284271 2.8460499 2.9154759 2.9325757 2.8809721 #> 131 3.1464265 2.9832868 3.0000000 3.0166206 3.0822070 3.0983867 3.0495901 #> 132 3.3166248 3.0659419 2.9832868 3.2557641 3.0659419 3.2710854 3.0659419 #> 133 2.9495762 2.7748874 2.7928480 2.8106939 2.8809721 2.8982753 2.8460499 #> 134 2.7202941 2.5298221 2.5495098 2.5690465 2.6457513 2.6645825 2.6076810 #> 135 2.7928480 2.6076810 2.6267851 2.6457513 2.7202941 2.7386128 2.6832816 #> 136 3.2249031 3.0659419 3.0822070 3.0983867 3.1622777 3.1780497 3.1304952 #> 137 2.9325757 2.6832816 2.7018512 2.8635642 2.7928480 2.8809721 2.7568098 #> 138 2.8106939 2.6267851 2.6457513 2.7018512 2.7386128 2.7568098 2.7018512 #> 139 2.6267851 2.4289916 2.4494897 2.4698178 2.5495098 2.5690465 2.5099801 #> 140 2.9325757 2.7568098 2.7748874 2.8284271 2.8635642 2.8809721 2.8284271 #> 141 2.9832868 2.8106939 2.8284271 2.8809721 2.9154759 2.9325757 2.8809721 #> 142 2.9154759 2.7386128 2.7568098 2.8106939 2.8460499 2.8635642 2.8106939 #> 143 2.7202941 2.5298221 2.5495098 2.5690465 2.6457513 2.6645825 2.6076810 #> 144 3.0166206 2.8460499 2.8635642 2.9495762 2.9495762 2.9664794 2.9154759 #> 145 3.0166206 2.8106939 2.8284271 2.9495762 2.9154759 2.9664794 2.8809721 #> 146 2.9154759 2.7386128 2.7568098 2.7748874 2.8460499 2.8635642 2.8106939 #> 147 2.8284271 2.6457513 2.6645825 2.6832816 2.7568098 2.7748874 2.7202941 #> 148 2.8284271 2.6457513 2.6645825 2.6832816 2.7568098 2.7748874 2.7202941 #> 149 2.8635642 2.6076810 2.6267851 2.7928480 2.7202941 2.8106939 2.6832816 #> 150 2.6645825 2.4698178 2.4899799 2.5099801 2.5884358 2.6076810 2.5495098 #>            50        51        52        53        54        55        56 #> 2                                                                         #> 3                                                                         #> 4                                                                         #> 5                                                                         #> 6                                                                         #> 7                                                                         #> 8                                                                         #> 9                                                                         #> 10                                                                        #> 11                                                                        #> 12                                                                        #> 13                                                                        #> 14                                                                        #> 15                                                                        #> 16                                                                        #> 17                                                                        #> 18                                                                        #> 19                                                                        #> 20                                                                        #> 21                                                                        #> 22                                                                        #> 23                                                                        #> 24                                                                        #> 25                                                                        #> 26                                                                        #> 27                                                                        #> 28                                                                        #> 29                                                                        #> 30                                                                        #> 31                                                                        #> 32                                                                        #> 33                                                                        #> 34                                                                        #> 35                                                                        #> 36                                                                        #> 37                                                                        #> 38                                                                        #> 39                                                                        #> 40                                                                        #> 41                                                                        #> 42                                                                        #> 43                                                                        #> 44                                                                        #> 45                                                                        #> 46                                                                        #> 47                                                                        #> 48                                                                        #> 49                                                                        #> 50                                                                        #> 51  2.5690465                                                             #> 52  2.4289916 0.9486833                                                   #> 53  2.6267851 0.7071068 1.0000000                                         #> 54  2.2803509 1.7888544 1.5811388 1.8165902                               #> 55  2.5495098 1.0488088 0.7745967 1.0000000 1.5165751                     #> 56  2.3237900 1.4142136 1.1401754 1.4491377 1.0954451 1.0488088           #> 57  2.4494897 1.0000000 0.7071068 1.0488088 1.6733201 0.9486833 1.2649111 #> 58  1.9235384 2.1679483 2.0000000 2.1908902 1.3038405 1.9493589 1.6431677 #> 59  2.5099801 0.9486833 0.8944272 1.0000000 1.5165751 0.6324555 1.0488088 #> 60  2.1213203 1.7606817 1.5491933 1.7888544 0.9486833 1.4832397 1.1401754 #> 61  2.0493902 2.1908902 2.0248457 2.2135944 1.2649111 1.9748418 1.6733201 #> 62  2.3021729 1.3784049 1.0000000 1.3416408 1.2247449 1.0954451 0.9486833 #> 63  2.3452079 1.7606817 1.5491933 1.7888544 0.9486833 1.4832397 1.3038405 #> 64  2.4494897 1.0954451 0.9486833 1.1401754 1.4142136 0.8366600 0.8944272 #> 65  2.0736441 1.7029386 1.4832397 1.7320508 1.0488088 1.4832397 1.0488088 #> 66  2.4698178 0.8366600 0.7745967 0.8944272 1.5811388 0.8944272 1.2247449 #> 67  2.3021729 1.3784049 1.0000000 1.3416408 1.2247449 1.0954451 0.7071068 #> 68  2.2135944 1.6431677 1.4142136 1.6733201 1.0488088 1.3416408 0.9486833 #> 69  2.5884358 1.4491377 1.0954451 1.4142136 1.2247449 1.0000000 1.1401754 #> 70  2.1908902 1.7888544 1.5811388 1.8165902 0.7745967 1.5165751 1.0954451 #> 71  2.4494897 1.2649111 1.0488088 1.2247449 1.6124515 1.2247449 1.1832160 #> 72  2.3021729 1.4491377 1.1832160 1.4832397 1.0488088 1.0954451 0.9486833 #> 73  2.6267851 1.3038405 1.0954451 1.0954451 1.4491377 0.8944272 1.2247449 #> 74  2.4289916 1.2247449 1.0954451 1.2649111 1.3784049 0.8944272 0.8366600 #> 75  2.4083189 1.1832160 0.8366600 1.2247449 1.3416408 0.8366600 1.0000000 #> 76  2.4698178 0.9486833 0.7745967 1.0000000 1.5165751 0.7745967 1.1401754 #> 77  2.6267851 0.8366600 1.0954451 0.7745967 1.6431677 0.7745967 1.2247449 #> 78  2.6645825 1.0488088 1.0954451 0.7745967 1.8165902 1.0000000 1.4491377 #> 79  2.4083189 1.2649111 0.8366600 1.2247449 1.3416408 0.8366600 0.7745967 #> 80  2.0736441 1.8708287 1.6733201 1.8973666 1.1401754 1.6124515 1.2247449 #> 81  2.1679483 1.8708287 1.6733201 1.8973666 0.7071068 1.6124515 1.2247449 #> 82  2.1213203 1.9235384 1.7320508 1.9493589 0.8366600 1.6733201 1.3038405 #> 83  2.2135944 1.6431677 1.4142136 1.6733201 0.9486833 1.3416408 0.9486833 #> 84  2.5884358 1.4491377 1.2649111 1.2649111 1.5165751 1.0954451 1.1401754 #> 85  2.2583180 1.4491377 1.0954451 1.4142136 1.2247449 1.1832160 0.8366600 #> 86  2.3664319 1.2649111 0.8366600 1.3038405 1.5491933 1.1401754 1.0954451 #> 87  2.5495098 0.7071068 0.7745967 0.6324555 1.7029386 0.7745967 1.3038405 #> 88  2.5298221 1.4142136 1.1401754 1.4491377 1.0954451 1.0488088 1.0954451 #> 89  2.1679483 1.5165751 1.2649111 1.5491933 0.9486833 1.3416408 0.8366600 #> 90  2.2360680 1.7320508 1.5165751 1.7606817 0.4472136 1.4491377 1.0000000 #> 91  2.2803509 1.6124515 1.3784049 1.6431677 0.8944272 1.3038405 0.7745967 #> 92  2.4083189 1.0954451 0.8366600 1.1401754 1.4142136 0.8366600 0.8944272 #> 93  2.2583180 1.6431677 1.4142136 1.6733201 0.8366600 1.3416408 0.9486833 #> 94  1.9235384 2.1679483 2.0000000 2.1908902 1.2247449 1.9493589 1.6431677 #> 95  2.2583180 1.5811388 1.3416408 1.6124515 0.8366600 1.2649111 0.7071068 #> 96  2.1908902 1.4832397 1.2247449 1.5165751 1.0954451 1.3038405 0.7745967 #> 97  2.2360680 1.4832397 1.2247449 1.5165751 1.0000000 1.2247449 0.6324555 #> 98  2.3664319 1.2649111 0.9486833 1.3038405 1.2649111 0.9486833 0.8944272 #> 99  1.8439089 2.1447611 1.9748418 2.1679483 1.3416408 1.9235384 1.6124515 #> 100 2.2360680 1.5491933 1.3038405 1.5811388 0.8944272 1.2247449 0.6324555 #> 101 2.8635642 1.7888544 1.6431677 1.7029386 2.2360680 1.7606817 1.9493589 #> 102 2.6076810 1.6124515 1.4491377 1.4491377 1.5491933 1.3038405 1.1832160 #> 103 2.9664794 1.4832397 1.7029386 1.3784049 2.2360680 1.6431677 1.9493589 #> 104 2.7386128 1.5165751 1.3416408 1.3416408 1.8708287 1.2649111 1.5165751 #> 105 2.8635642 1.6124515 1.5165751 1.4491377 2.0976177 1.4491377 1.7888544 #> 106 3.1622777 1.8439089 2.0248457 1.7606817 2.4899799 1.9748418 2.2360680 #> 107 2.3452079 1.8165902 1.5491933 1.7888544 1.3038405 1.4832397 1.2247449 #> 108 3.0331502 1.6124515 1.8165902 1.5165751 2.2803509 1.7029386 2.0000000 #> 109 2.9154759 1.5811388 1.6124515 1.4142136 1.9235384 1.4142136 1.7606817 #> 110 3.0822070 1.7606817 1.9493589 1.7320508 2.5099801 2.0000000 2.2583180 #> 111 2.6645825 1.2247449 1.0954451 1.0954451 1.9235384 1.1832160 1.5811388 #> 112 2.7568098 1.4832397 1.3038405 1.3038405 1.7888544 1.1401754 1.4832397 #> 113 2.8460499 1.3784049 1.4832397 1.1832160 2.0736441 1.4142136 1.7606817 #> 114 2.6267851 1.7029386 1.5491933 1.5491933 1.4491377 1.4142136 1.2247449 #> 115 2.6832816 1.7320508 1.5811388 1.5811388 1.7320508 1.4491377 1.3416408 #> 116 2.7386128 1.4491377 1.2649111 1.3416408 2.0248457 1.4142136 1.7029386 #> 117 2.7386128 1.3784049 1.2649111 1.1832160 1.9235384 1.1832160 1.5811388 #> 118 3.2403703 2.0248457 2.1908902 2.0000000 2.7018512 2.2360680 2.4698178 #> 119 3.3166248 2.0976177 2.2583180 2.0248457 2.5298221 2.1213203 2.3664319 #> 120 2.6457513 1.5491933 1.3784049 1.3784049 1.3416408 1.2247449 1.2649111 #> 121 2.8982753 1.4142136 1.5811388 1.3038405 2.2360680 1.6431677 1.9493589 #> 122 2.5298221 1.6124515 1.4491377 1.4491377 1.4832397 1.3038405 1.0954451 #> 123 3.2093613 1.9235384 2.0976177 1.8439089 2.4698178 1.9493589 2.2135944 #> 124 2.6457513 1.3416408 1.1401754 1.1401754 1.6124515 0.9486833 1.2649111 #> 125 2.8106939 1.4491377 1.4832397 1.3416408 2.1679483 1.5491933 1.8708287 #> 126 2.9154759 1.3784049 1.6124515 1.3416408 2.2583180 1.6733201 1.9748418 #> 127 2.5884358 1.3038405 1.0954451 1.1832160 1.5811388 0.8944272 1.1401754 #> 128 2.5495098 1.3038405 1.0954451 1.0954451 1.6431677 1.0954451 1.2247449 #> 129 2.8284271 1.6124515 1.4491377 1.4491377 1.9493589 1.3038405 1.6124515 #> 130 2.8809721 1.3038405 1.5491933 1.1832160 2.1213203 1.4832397 1.8165902 #> 131 3.0495901 1.6431677 1.8439089 1.5491933 2.2583180 1.6733201 1.9748418 #> 132 3.1937439 1.9493589 2.1213203 1.9235384 2.6457513 2.1679483 2.4083189 #> 133 2.8460499 1.6431677 1.4832397 1.4832397 1.9748418 1.3416408 1.6431677 #> 134 2.6076810 1.2649111 1.0488088 1.0488088 1.6124515 0.8366600 1.1832160 #> 135 2.6832816 1.5491933 1.4491377 1.4491377 1.6124515 1.3038405 1.3416408 #> 136 3.1304952 1.7888544 1.9748418 1.7029386 2.4494897 1.9235384 2.1908902 #> 137 2.7928480 1.6733201 1.5165751 1.5811388 2.1447611 1.6431677 1.8439089 #> 138 2.7018512 1.3784049 1.1832160 1.1832160 1.9235384 1.2649111 1.5811388 #> 139 2.5099801 1.3038405 1.0954451 1.1832160 1.5811388 1.0954451 1.1401754 #> 140 2.8284271 1.2649111 1.4491377 1.0488088 2.0976177 1.4491377 1.7888544 #> 141 2.8809721 1.5165751 1.5491933 1.3416408 2.1679483 1.5491933 1.8708287 #> 142 2.8106939 1.2247449 1.4142136 1.0000000 2.0736441 1.4142136 1.7606817 #> 143 2.6076810 1.6124515 1.4491377 1.4491377 1.5491933 1.3038405 1.1832160 #> 144 2.9154759 1.5165751 1.6124515 1.4142136 2.2583180 1.6733201 1.9748418 #> 145 2.8809721 1.5811388 1.6124515 1.4832397 2.2583180 1.6733201 1.9748418 #> 146 2.8106939 1.3784049 1.4142136 1.1832160 2.0248457 1.3416408 1.7029386 #> 147 2.7202941 1.4832397 1.3038405 1.3038405 1.6124515 1.1401754 1.4142136 #> 148 2.7202941 1.3416408 1.2247449 1.1401754 1.8973666 1.1401754 1.5491933 #> 149 2.7202941 1.6124515 1.4491377 1.5165751 2.0493902 1.5811388 1.7320508 #> 150 2.5495098 1.4491377 1.2649111 1.2649111 1.6431677 1.2649111 1.2247449 #>            57        58        59        60        61        62        63 #> 2                                                                         #> 3                                                                         #> 4                                                                         #> 5                                                                         #> 6                                                                         #> 7                                                                         #> 8                                                                         #> 9                                                                         #> 10                                                                        #> 11                                                                        #> 12                                                                        #> 13                                                                        #> 14                                                                        #> 15                                                                        #> 16                                                                        #> 17                                                                        #> 18                                                                        #> 19                                                                        #> 20                                                                        #> 21                                                                        #> 22                                                                        #> 23                                                                        #> 24                                                                        #> 25                                                                        #> 26                                                                        #> 27                                                                        #> 28                                                                        #> 29                                                                        #> 30                                                                        #> 31                                                                        #> 32                                                                        #> 33                                                                        #> 34                                                                        #> 35                                                                        #> 36                                                                        #> 37                                                                        #> 38                                                                        #> 39                                                                        #> 40                                                                        #> 41                                                                        #> 42                                                                        #> 43                                                                        #> 44                                                                        #> 45                                                                        #> 46                                                                        #> 47                                                                        #> 48                                                                        #> 49                                                                        #> 50                                                                        #> 51                                                                        #> 52                                                                        #> 53                                                                        #> 54                                                                        #> 55                                                                        #> 56                                                                        #> 57                                                                        #> 58  2.0736441                                                             #> 59  1.0488088 1.9493589                                                   #> 60  1.6431677 1.2649111 1.5491933                                         #> 61  2.0976177 0.8366600 1.9748418 1.3038405                               #> 62  1.1401754 1.7320508 1.1832160 1.1832160 1.7606817                     #> 63  1.6431677 1.4142136 1.4832397 1.3416408 1.3038405 1.2649111           #> 64  0.8944272 1.8708287 0.8366600 1.3784049 1.8973666 0.9486833 1.3784049 #> 65  1.5811388 1.3416408 1.4142136 1.0000000 1.3784049 1.0954451 1.3416408 #> 66  1.0488088 2.0000000 0.7745967 1.5491933 2.0248457 1.0954451 1.5491933 #> 67  1.1401754 1.7320508 1.1832160 1.1832160 1.7606817 0.7745967 1.4832397 #> 68  1.5165751 1.4142136 1.3416408 1.0954451 1.4491377 1.0000000 0.8944272 #> 69  1.2247449 1.7888544 1.1832160 1.4832397 1.7029386 1.1832160 1.0954451 #> 70  1.6733201 1.2247449 1.5165751 0.9486833 1.2649111 1.2247449 0.9486833 #> 71  0.8944272 2.0248457 1.3038405 1.5811388 2.0493902 1.0488088 1.6431677 #> 72  1.3038405 1.6124515 1.0954451 1.0954451 1.6431677 0.8944272 1.0000000 #> 73  1.0488088 1.8973666 1.0954451 1.5491933 1.9235384 1.2649111 1.4142136 #> 74  1.0488088 1.7888544 0.8944272 1.4142136 1.8165902 1.0954451 1.2649111 #> 75  1.0954451 1.8165902 0.7071068 1.3784049 1.8439089 0.9486833 1.3038405 #> 76  1.0488088 1.9493589 0.6324555 1.4832397 1.9748418 1.0000000 1.4832397 #> 77  1.1401754 2.0493902 0.7745967 1.6124515 2.0736441 1.3416408 1.6124515 #> 78  1.0488088 2.1908902 1.0000000 1.7888544 2.2135944 1.3416408 1.7888544 #> 79  1.0000000 1.8165902 0.9486833 1.3038405 1.8439089 0.7071068 1.3038405 #> 80  1.7606817 1.0954451 1.6124515 1.1832160 1.1401754 1.3416408 1.0954451 #> 81  1.7606817 1.0954451 1.6124515 1.0000000 1.1401754 1.3416408 1.0000000 #> 82  1.8165902 1.0000000 1.6733201 1.0954451 1.0488088 1.4142136 1.0000000 #> 83  1.5165751 1.4142136 1.3416408 0.8944272 1.4491377 1.0000000 1.0000000 #> 84  1.1401754 1.9493589 1.2649111 1.4832397 1.9748418 1.1832160 1.4832397 #> 85  1.2247449 1.6733201 1.2649111 1.0954451 1.7029386 0.8944272 1.5491933 #> 86  0.7745967 1.9748418 1.2247449 1.5165751 2.0000000 0.9486833 1.5165751 #> 87  0.8366600 2.0976177 0.7745967 1.6733201 2.1213203 1.1832160 1.6733201 #> 88  1.2649111 1.7029386 1.0488088 1.4491377 1.6733201 1.2247449 1.0488088 #> 89  1.3784049 1.5491933 1.2649111 1.0000000 1.5811388 0.7745967 1.2649111 #> 90  1.6124515 1.3038405 1.4491377 0.8366600 1.3416408 1.1401754 1.0488088 #> 91  1.4832397 1.4491377 1.3038405 1.0488088 1.4832397 1.1401754 1.2247449 #> 92  0.8944272 1.8708287 0.8366600 1.3784049 1.8973666 0.8366600 1.3784049 #> 93  1.5165751 1.4142136 1.3416408 1.0000000 1.4491377 1.0000000 0.8944272 #> 94  2.0736441 0.4472136 1.9493589 1.2649111 0.7071068 1.7320508 1.3416408 #> 95  1.4491377 1.4832397 1.2649111 0.8944272 1.5165751 0.8944272 1.1832160 #> 96  1.3416408 1.5811388 1.2247449 1.1401754 1.6124515 0.7071068 1.2247449 #> 97  1.3416408 1.5811388 1.1401754 1.0488088 1.6124515 0.7071068 1.2247449 #> 98  1.0954451 1.7606817 0.8366600 1.3038405 1.7888544 0.8366600 1.2247449 #> 99  2.0493902 0.8366600 1.9235384 1.2247449 1.0954451 1.7029386 1.5165751 #> 100 1.4142136 1.5165751 1.2247449 0.9486833 1.5491933 0.8366600 1.1401754 #> 101 1.4832397 2.5495098 1.8165902 2.2135944 2.5690465 1.8708287 2.2135944 #> 102 1.3416408 1.9748418 1.4491377 1.5165751 2.0000000 1.3038405 1.6431677 #> 103 1.6733201 2.5495098 1.6431677 2.2135944 2.5690465 1.8708287 2.2135944 #> 104 1.2247449 2.2360680 1.3416408 1.8439089 2.2583180 1.4832397 1.8439089 #> 105 1.4832397 2.4289916 1.5165751 2.0736441 2.4494897 1.7029386 2.0736441 #> 106 2.0000000 2.7748874 1.9748418 2.4698178 2.7928480 2.1679483 2.4698178 #> 107 1.5811388 1.4142136 1.6124515 1.1832160 1.5165751 1.4142136 1.6124515 #> 108 1.7888544 2.5884358 1.7029386 2.2583180 2.6076810 1.9748418 2.2583180 #> 109 1.5811388 2.2803509 1.4832397 2.0000000 2.3021729 1.7888544 1.8973666 #> 110 1.8708287 2.7928480 2.0000000 2.4899799 2.8106939 2.1908902 2.4899799 #> 111 1.0488088 2.2803509 1.2649111 1.8973666 2.3021729 1.4832397 1.8973666 #> 112 1.2649111 2.1679483 1.3038405 1.7606817 2.1908902 1.5165751 1.7606817 #> 113 1.4491377 2.4083189 1.4142136 2.0493902 2.4289916 1.6733201 2.0493902 #> 114 1.4491377 1.8973666 1.5491933 1.5491933 1.9235384 1.4142136 1.6124515 #> 115 1.4832397 2.1213203 1.5811388 1.7029386 2.1447611 1.4491377 1.8165902 #> 116 1.2247449 2.3664319 1.4832397 2.0000000 2.3874673 1.6124515 2.0000000 #> 117 1.2247449 2.2803509 1.2649111 1.8973666 2.3021729 1.4832397 1.8973666 #> 118 2.1213203 2.9664794 2.2360680 2.6832816 2.9832868 2.4083189 2.6832816 #> 119 2.2360680 2.8106939 2.1679483 2.5495098 2.8284271 2.3874673 2.5099801 #> 120 1.3416408 1.8708287 1.3784049 1.5811388 1.7888544 1.3038405 1.2247449 #> 121 1.5491933 2.5495098 1.6431677 2.2135944 2.5690465 1.8708287 2.2135944 #> 122 1.3416408 1.9235384 1.4491377 1.4491377 1.9493589 1.3038405 1.7029386 #> 123 2.0736441 2.7568098 2.0000000 2.4494897 2.7748874 2.2360680 2.4494897 #> 124 1.0000000 2.0248457 1.1401754 1.5811388 2.0493902 1.3038405 1.5811388 #> 125 1.3784049 2.4899799 1.5491933 2.1447611 2.5099801 1.7888544 2.1447611 #> 126 1.5811388 2.5690465 1.6733201 2.2360680 2.5884358 1.8973666 2.2360680 #> 127 0.9486833 2.0000000 1.0954451 1.5491933 2.0248457 1.1832160 1.5491933 #> 128 0.9486833 2.0493902 1.1832160 1.6124515 2.0736441 1.0954451 1.6124515 #> 129 1.4142136 2.3021729 1.4491377 1.9235384 2.3237900 1.6431677 1.9235384 #> 130 1.5165751 2.4494897 1.4832397 2.0976177 2.4698178 1.7320508 2.0976177 #> 131 1.8165902 2.5690465 1.7320508 2.2360680 2.5884358 2.0000000 2.2360680 #> 132 2.0493902 2.9154759 2.1679483 2.6267851 2.9325757 2.3452079 2.6267851 #> 133 1.4491377 2.3237900 1.4832397 1.9493589 2.3452079 1.6733201 1.9493589 #> 134 1.0000000 2.0248457 1.0488088 1.5811388 2.0493902 1.2247449 1.5811388 #> 135 1.4142136 2.0248457 1.3784049 1.6431677 2.0493902 1.4491377 1.5811388 #> 136 1.9493589 2.7386128 1.9235384 2.4289916 2.7568098 2.1213203 2.4289916 #> 137 1.3416408 2.4698178 1.7029386 2.1213203 2.4899799 1.7606817 2.1213203 #> 138 1.1401754 2.2803509 1.3416408 1.8973666 2.3021729 1.4832397 1.8973666 #> 139 0.9486833 2.0000000 1.1832160 1.5491933 2.0248457 1.0000000 1.5491933 #> 140 1.4142136 2.4289916 1.4491377 2.0736441 2.4494897 1.7029386 2.0736441 #> 141 1.5165751 2.4899799 1.5491933 2.1447611 2.5099801 1.7888544 2.1447611 #> 142 1.3784049 2.4083189 1.4142136 2.0493902 2.4289916 1.6733201 2.0493902 #> 143 1.3416408 1.9748418 1.4491377 1.5165751 2.0000000 1.3038405 1.6431677 #> 144 1.5811388 2.5690465 1.6733201 2.2360680 2.5884358 1.8973666 2.2360680 #> 145 1.5165751 2.5690465 1.6733201 2.2360680 2.5884358 1.8973666 2.2360680 #> 146 1.3784049 2.3664319 1.3416408 2.0000000 2.3874673 1.6124515 2.0000000 #> 147 1.1832160 2.0248457 1.3038405 1.7029386 2.0493902 1.4491377 1.5811388 #> 148 1.1832160 2.2583180 1.2247449 1.8708287 2.2803509 1.4491377 1.8708287 #> 149 1.2649111 2.3874673 1.6431677 2.0248457 2.4083189 1.6431677 2.0248457 #> 150 1.1401754 2.0493902 1.3416408 1.6124515 2.0736441 1.0954451 1.6733201 #>            64        65        66        67        68        69        70 #> 2                                                                         #> 3                                                                         #> 4                                                                         #> 5                                                                         #> 6                                                                         #> 7                                                                         #> 8                                                                         #> 9                                                                         #> 10                                                                        #> 11                                                                        #> 12                                                                        #> 13                                                                        #> 14                                                                        #> 15                                                                        #> 16                                                                        #> 17                                                                        #> 18                                                                        #> 19                                                                        #> 20                                                                        #> 21                                                                        #> 22                                                                        #> 23                                                                        #> 24                                                                        #> 25                                                                        #> 26                                                                        #> 27                                                                        #> 28                                                                        #> 29                                                                        #> 30                                                                        #> 31                                                                        #> 32                                                                        #> 33                                                                        #> 34                                                                        #> 35                                                                        #> 36                                                                        #> 37                                                                        #> 38                                                                        #> 39                                                                        #> 40                                                                        #> 41                                                                        #> 42                                                                        #> 43                                                                        #> 44                                                                        #> 45                                                                        #> 46                                                                        #> 47                                                                        #> 48                                                                        #> 49                                                                        #> 50                                                                        #> 51                                                                        #> 52                                                                        #> 53                                                                        #> 54                                                                        #> 55                                                                        #> 56                                                                        #> 57                                                                        #> 58                                                                        #> 59                                                                        #> 60                                                                        #> 61                                                                        #> 62                                                                        #> 63                                                                        #> 64                                                                        #> 65  1.3038405                                                             #> 66  1.0488088 1.4832397                                                   #> 67  0.9486833 1.0954451 1.1832160                                         #> 68  1.2247449 1.0954451 1.4142136 1.1832160                               #> 69  1.0488088 1.5491933 1.2649111 1.1832160 1.3416408                     #> 70  1.4142136 0.9486833 1.5811388 1.2247449 0.8366600 1.3784049           #> 71  1.0000000 1.5165751 1.3038405 1.0488088 1.4491377 1.3784049 1.6124515 #> 72  0.9486833 1.0000000 1.1832160 1.1832160 0.8944272 1.1832160 1.0488088 #> 73  0.9486833 1.6124515 1.2649111 1.2649111 1.4142136 0.8944272 1.4491377 #> 74  0.5477226 1.3416408 1.1832160 1.0954451 1.0954451 1.0954451 1.3038405 #> 75  0.8944272 1.2247449 0.8366600 1.1401754 1.1401754 1.1401754 1.3416408 #> 76  0.9486833 1.4142136 0.4472136 1.0954451 1.3416408 1.1832160 1.5165751 #> 77  0.9486833 1.6124515 0.8944272 1.3416408 1.4832397 1.2649111 1.6431677 #> 78  1.1401754 1.7320508 1.0000000 1.3416408 1.6733201 1.4142136 1.8165902 #> 79  0.6324555 1.2247449 1.0488088 0.7071068 1.1401754 0.9486833 1.3416408 #> 80  1.5165751 0.8944272 1.6733201 1.4142136 0.8944272 1.5491933 0.8366600 #> 81  1.5165751 1.0000000 1.6733201 1.3416408 1.0000000 1.4142136 0.5477226 #> 82  1.5811388 1.0000000 1.7320508 1.4142136 1.0000000 1.4832397 0.7071068 #> 83  1.2247449 0.8944272 1.4142136 1.1832160 0.6324555 1.3416408 0.7071068 #> 84  0.9486833 1.5491933 1.4142136 1.1832160 1.3416408 1.1832160 1.5165751 #> 85  1.0488088 1.1832160 1.2649111 0.4472136 1.2649111 1.2649111 1.3038405 #> 86  1.0000000 1.4491377 1.1401754 0.9486833 1.3784049 1.2247449 1.5491933 #> 87  0.9486833 1.6124515 0.6324555 1.1832160 1.5491933 1.2649111 1.7029386 #> 88  1.0954451 1.4491377 1.1401754 1.3038405 1.2247449 0.7071068 1.2649111 #> 89  1.1401754 0.7745967 1.2649111 0.7745967 0.8944272 1.4142136 0.9486833 #> 90  1.3416408 0.9486833 1.5165751 1.1401754 0.9486833 1.3038405 0.6324555 #> 91  1.1832160 1.1401754 1.3784049 0.9486833 0.9486833 1.2247449 0.8944272 #> 92  0.4472136 1.3038405 0.9486833 0.8366600 1.2247449 1.0488088 1.4142136 #> 93  1.2247449 1.0000000 1.4142136 1.1832160 0.6324555 1.2649111 0.7071068 #> 94  1.8708287 1.3416408 2.0000000 1.7320508 1.4142136 1.7320508 1.2247449 #> 95  1.1401754 0.8944272 1.3416408 0.8944272 0.7745967 1.2649111 0.8366600 #> 96  1.0954451 0.9486833 1.2247449 0.8366600 0.8366600 1.3784049 1.0000000 #> 97  1.0000000 0.8366600 1.2247449 0.8366600 0.8366600 1.3038405 1.0000000 #> 98  0.7745967 1.1401754 0.9486833 1.0488088 1.0488088 1.0488088 1.2649111 #> 99  1.8439089 1.3038405 1.9748418 1.7029386 1.4491377 1.8165902 1.1832160 #> 100 1.0954451 0.8366600 1.3038405 0.9486833 0.7071068 1.3038405 0.8944272 #> 101 1.7320508 2.1679483 1.8165902 1.8708287 2.1213203 1.9235384 2.2360680 #> 102 1.1832160 1.5811388 1.5811388 1.2247449 1.3784049 1.3784049 1.5491933 #> 103 1.7320508 2.1679483 1.6431677 1.8708287 2.1213203 1.9235384 2.2360680 #> 104 1.2247449 1.7888544 1.4832397 1.4832397 1.7320508 1.4832397 1.8708287 #> 105 1.5491933 2.0248457 1.5811388 1.7029386 1.9748418 1.7606817 2.0976177 #> 106 2.0493902 2.4289916 1.9748418 2.1679483 2.3874673 2.2135944 2.4899799 #> 107 1.4491377 1.5491933 1.6733201 1.1832160 1.4832397 1.3416408 1.3784049 #> 108 1.7888544 2.2135944 1.7606817 1.9748418 2.1679483 1.9748418 2.2803509 #> 109 1.5811388 2.0493902 1.5491933 1.7888544 1.8973666 1.5491933 1.9235384 #> 110 2.0736441 2.4494897 1.9493589 2.1908902 2.4083189 2.2360680 2.5099801 #> 111 1.3038405 1.8439089 1.2649111 1.4832397 1.7888544 1.5491933 1.9235384 #> 112 1.2649111 1.8165902 1.4491377 1.5165751 1.6431677 1.3784049 1.7888544 #> 113 1.5165751 2.0000000 1.4142136 1.6733201 1.9493589 1.7320508 2.0736441 #> 114 1.3038405 1.6124515 1.6733201 1.2649111 1.4832397 1.3416408 1.4491377 #> 115 1.3416408 1.7029386 1.7029386 1.3784049 1.5811388 1.5811388 1.7320508 #> 116 1.4491377 1.9493589 1.4832397 1.6124515 1.8973666 1.6733201 2.0248457 #> 117 1.3038405 1.8439089 1.3416408 1.4832397 1.7888544 1.5491933 1.9235384 #> 118 2.3021729 2.6457513 2.1908902 2.4083189 2.6076810 2.4494897 2.7018512 #> 119 2.2360680 2.5884358 2.2135944 2.3874673 2.4698178 2.2583180 2.5298221 #> 120 1.0954451 1.6431677 1.5165751 1.3038405 1.4491377 0.8366600 1.4832397 #> 121 1.7320508 2.1679483 1.5811388 1.8708287 2.1213203 1.9235384 2.2360680 #> 122 1.1832160 1.4491377 1.5811388 1.0488088 1.4491377 1.4491377 1.4832397 #> 123 2.0736441 2.4494897 2.0493902 2.2360680 2.3664319 2.1908902 2.4698178 #> 124 1.0000000 1.6431677 1.3038405 1.3038405 1.4491377 1.1401754 1.6124515 #> 125 1.6431677 2.0976177 1.4832397 1.7888544 2.0493902 1.8439089 2.1679483 #> 126 1.7606817 2.1908902 1.6124515 1.8973666 2.1447611 1.9493589 2.2583180 #> 127 0.8366600 1.5491933 1.2649111 1.1832160 1.4142136 1.0954451 1.5811388 #> 128 0.8366600 1.5491933 1.2649111 1.0954451 1.4832397 1.2649111 1.6431677 #> 129 1.4142136 1.9235384 1.5811388 1.6431677 1.8165902 1.5811388 1.9493589 #> 130 1.5811388 2.0493902 1.4832397 1.7320508 2.0000000 1.7888544 2.1213203 #> 131 1.8165902 2.2360680 1.7888544 2.0000000 2.1447611 1.9493589 2.2583180 #> 132 2.2360680 2.5884358 2.1213203 2.3452079 2.5495098 2.3874673 2.6457513 #> 133 1.4491377 1.9493589 1.6124515 1.6733201 1.8439089 1.6124515 1.9748418 #> 134 0.8944272 1.5811388 1.2247449 1.2247449 1.4491377 1.1401754 1.6124515 #> 135 1.0954451 1.7029386 1.5165751 1.4491377 1.5165751 1.3038405 1.6124515 #> 136 2.0000000 2.3874673 1.9235384 2.1213203 2.3452079 2.1679483 2.4494897 #> 137 1.6124515 2.0736441 1.7029386 1.7606817 2.0248457 1.8165902 2.1447611 #> 138 1.3038405 1.8439089 1.3416408 1.4832397 1.7888544 1.5491933 1.9235384 #> 139 0.8366600 1.4832397 1.2649111 1.0000000 1.4142136 1.2649111 1.5811388 #> 140 1.5491933 2.0248457 1.3784049 1.7029386 1.9748418 1.7606817 2.0976177 #> 141 1.6431677 2.0976177 1.4832397 1.7888544 2.0493902 1.8439089 2.1679483 #> 142 1.5165751 2.0000000 1.3416408 1.6733201 1.9493589 1.7320508 2.0736441 #> 143 1.1832160 1.5811388 1.5811388 1.2247449 1.3784049 1.3784049 1.5491933 #> 144 1.7606817 2.1908902 1.6124515 1.8973666 2.1447611 1.9493589 2.2583180 #> 145 1.7606817 2.1908902 1.6124515 1.8973666 2.1447611 1.9493589 2.2583180 #> 146 1.4491377 1.9493589 1.3416408 1.6124515 1.8973666 1.6733201 2.0248457 #> 147 1.1832160 1.7606817 1.4491377 1.4491377 1.5811388 1.1401754 1.6124515 #> 148 1.2649111 1.8165902 1.3038405 1.4491377 1.7606817 1.5165751 1.8973666 #> 149 1.4832397 1.9748418 1.6431677 1.6431677 1.9235384 1.7029386 2.0493902 #> 150 1.0488088 1.5491933 1.4142136 1.0954451 1.4832397 1.4142136 1.6431677 #>            71        72        73        74        75        76        77 #> 2                                                                         #> 3                                                                         #> 4                                                                         #> 5                                                                         #> 6                                                                         #> 7                                                                         #> 8                                                                         #> 9                                                                         #> 10                                                                        #> 11                                                                        #> 12                                                                        #> 13                                                                        #> 14                                                                        #> 15                                                                        #> 16                                                                        #> 17                                                                        #> 18                                                                        #> 19                                                                        #> 20                                                                        #> 21                                                                        #> 22                                                                        #> 23                                                                        #> 24                                                                        #> 25                                                                        #> 26                                                                        #> 27                                                                        #> 28                                                                        #> 29                                                                        #> 30                                                                        #> 31                                                                        #> 32                                                                        #> 33                                                                        #> 34                                                                        #> 35                                                                        #> 36                                                                        #> 37                                                                        #> 38                                                                        #> 39                                                                        #> 40                                                                        #> 41                                                                        #> 42                                                                        #> 43                                                                        #> 44                                                                        #> 45                                                                        #> 46                                                                        #> 47                                                                        #> 48                                                                        #> 49                                                                        #> 50                                                                        #> 51                                                                        #> 52                                                                        #> 53                                                                        #> 54                                                                        #> 55                                                                        #> 56                                                                        #> 57                                                                        #> 58                                                                        #> 59                                                                        #> 60                                                                        #> 61                                                                        #> 62                                                                        #> 63                                                                        #> 64                                                                        #> 65                                                                        #> 66                                                                        #> 67                                                                        #> 68                                                                        #> 69                                                                        #> 70                                                                        #> 71                                                                        #> 72  1.3784049                                                             #> 73  1.2247449 1.2649111                                                   #> 74  1.1401754 0.8944272 1.0000000                                         #> 75  1.3416408 0.8366600 1.1401754 0.9486833                               #> 76  1.3038405 1.0954451 1.1832160 1.0954451 0.7071068                     #> 77  1.3038405 1.2649111 1.0000000 1.0000000 1.0488088 0.8944272           #> 78  1.1401754 1.4832397 1.0954451 1.2649111 1.2247449 1.0000000 0.8944272 #> 79  1.0000000 0.9486833 1.0488088 0.8366600 0.8944272 0.9486833 1.1401754 #> 80  1.7029386 1.1832160 1.6124515 1.4142136 1.4491377 1.6124515 1.7320508 #> 81  1.7029386 1.1832160 1.5491933 1.4142136 1.4491377 1.6124515 1.7320508 #> 82  1.7606817 1.2649111 1.6124515 1.4832397 1.5165751 1.6733201 1.7888544 #> 83  1.4491377 0.7745967 1.4142136 1.0954451 1.1401754 1.3416408 1.4832397 #> 84  1.0488088 1.2649111 0.8944272 1.0000000 1.3038405 1.3416408 1.1832160 #> 85  1.1401754 1.2649111 1.3416408 1.1832160 1.2247449 1.1832160 1.4142136 #> 86  0.8944272 1.2247449 1.3038405 1.1401754 1.1832160 1.1401754 1.3784049 #> 87  1.1401754 1.3416408 1.0954451 1.0954451 1.0488088 0.7745967 0.7745967 #> 88  1.4832397 1.0488088 0.9486833 1.0488088 0.8944272 1.0488088 1.2247449 #> 89  1.3038405 0.8944272 1.4832397 1.1832160 1.0488088 1.1832160 1.4832397 #> 90  1.5491933 0.9486833 1.3784049 1.3038405 1.2649111 1.4491377 1.5811388 #> 91  1.4142136 1.1401754 1.3038405 1.0488088 1.1832160 1.3038405 1.4491377 #> 92  1.0000000 0.9486833 1.0488088 0.7071068 0.8944272 0.8366600 1.0488088 #> 93  1.4491377 0.7745967 1.3416408 1.0954451 1.1401754 1.3416408 1.4832397 #> 94  2.0248457 1.6124515 1.8973666 1.7888544 1.8165902 1.9493589 2.0493902 #> 95  1.3784049 0.8944272 1.3416408 1.0954451 1.0488088 1.2649111 1.4142136 #> 96  1.2649111 0.9486833 1.4491377 1.0488088 1.0000000 1.1401754 1.4491377 #> 97  1.2649111 0.8366600 1.3784049 1.0488088 0.8944272 1.1401754 1.3784049 #> 98  1.2649111 0.7071068 1.1401754 0.8366600 0.4472136 0.8366600 1.1401754 #> 99  2.0000000 1.5811388 1.8708287 1.7606817 1.7888544 1.9235384 2.0248457 #> 100 1.3416408 0.7071068 1.3784049 1.0488088 1.0000000 1.2247449 1.3784049 #> 101 1.5491933 1.9748418 1.7029386 1.8165902 1.8439089 1.8165902 1.8165902 #> 102 1.0000000 1.4491377 1.1401754 1.2247449 1.4832397 1.5165751 1.3784049 #> 103 1.6733201 1.9748418 1.7029386 1.8165902 1.7888544 1.6431677 1.5165751 #> 104 1.2247449 1.5491933 1.1832160 1.3416408 1.3784049 1.4142136 1.3416408 #> 105 1.4832397 1.8165902 1.5165751 1.6431677 1.6124515 1.5165751 1.5165751 #> 106 2.0000000 2.2583180 2.0248457 2.1213203 2.0976177 1.9748418 1.8708287 #> 107 1.4491377 1.5491933 1.4142136 1.4832397 1.5811388 1.6124515 1.6733201 #> 108 1.7888544 2.0248457 1.7606817 1.8708287 1.8439089 1.7606817 1.5811388 #> 109 1.5811388 1.7888544 1.2649111 1.6124515 1.6431677 1.5491933 1.3416408 #> 110 1.9235384 2.2803509 2.0493902 2.1447611 2.1213203 2.0000000 1.8973666 #> 111 1.0488088 1.6124515 1.2649111 1.4142136 1.3784049 1.2649111 1.2649111 #> 112 1.2649111 1.5165751 1.0488088 1.3038405 1.3416408 1.3784049 1.2247449 #> 113 1.4491377 1.7888544 1.4832397 1.6124515 1.5811388 1.4142136 1.2649111 #> 114 1.1401754 1.5491933 1.0954451 1.3416408 1.5811388 1.6124515 1.4832397 #> 115 1.1832160 1.5811388 1.3784049 1.3784049 1.6124515 1.6431677 1.5165751 #> 116 1.2247449 1.7320508 1.4142136 1.5491933 1.5165751 1.4832397 1.4832397 #> 117 1.2247449 1.6124515 1.2649111 1.4142136 1.3784049 1.2649111 1.2649111 #> 118 2.1679483 2.4899799 2.2803509 2.3664319 2.3452079 2.2360680 2.1447611 #> 119 2.2360680 2.3874673 2.0736441 2.2583180 2.2803509 2.2135944 2.0248457 #> 120 1.2649111 1.3784049 0.8366600 1.1401754 1.4142136 1.4491377 1.3038405 #> 121 1.5491933 1.9748418 1.7029386 1.8165902 1.7888544 1.6431677 1.5165751 #> 122 1.0000000 1.4491377 1.2247449 1.2247449 1.4832397 1.5165751 1.3784049 #> 123 2.0736441 2.2360680 2.0000000 2.0976177 2.1213203 2.0493902 1.8439089 #> 124 1.0000000 1.3038405 0.7071068 1.0488088 1.1832160 1.2247449 1.0488088 #> 125 1.4491377 1.8973666 1.6124515 1.7320508 1.7029386 1.5491933 1.4832397 #> 126 1.5811388 2.0000000 1.7320508 1.8439089 1.8165902 1.6733201 1.5491933 #> 127 0.8366600 1.1832160 0.8944272 0.8944272 1.1401754 1.1832160 1.0000000 #> 128 0.7071068 1.2649111 1.0000000 1.0000000 1.2247449 1.1832160 1.1832160 #> 129 1.4142136 1.6431677 1.3038405 1.4491377 1.4832397 1.5165751 1.3784049 #> 130 1.6431677 1.8439089 1.5491933 1.6733201 1.6431677 1.4832397 1.3416408 #> 131 1.8165902 2.0000000 1.7320508 1.8439089 1.8708287 1.7888544 1.5491933 #> 132 2.0976177 2.4289916 2.2135944 2.3021729 2.2803509 2.1679483 2.0736441 #> 133 1.4491377 1.6733201 1.3416408 1.4832397 1.5165751 1.5491933 1.4142136 #> 134 1.1832160 1.2247449 0.7071068 0.9486833 1.0954451 1.1401754 0.9486833 #> 135 1.4142136 1.3784049 1.0488088 1.1401754 1.4142136 1.4491377 1.3038405 #> 136 1.9493589 2.2135944 1.9748418 2.0736441 2.0493902 1.9235384 1.8165902 #> 137 1.4142136 1.8708287 1.5811388 1.7029386 1.7320508 1.7029386 1.7029386 #> 138 1.1401754 1.6124515 1.2649111 1.4142136 1.3784049 1.3416408 1.3416408 #> 139 0.5477226 1.2649111 1.0954451 1.0000000 1.2247449 1.1832160 1.1832160 #> 140 1.4142136 1.8165902 1.5165751 1.6431677 1.6124515 1.4491377 1.3038405 #> 141 1.5165751 1.8973666 1.6124515 1.7320508 1.7029386 1.5491933 1.4832397 #> 142 1.3784049 1.7888544 1.4832397 1.6124515 1.5811388 1.4142136 1.2649111 #> 143 1.0000000 1.4491377 1.1401754 1.2247449 1.4832397 1.5165751 1.3784049 #> 144 1.5811388 2.0000000 1.7320508 1.8439089 1.8165902 1.6733201 1.5491933 #> 145 1.5811388 2.0000000 1.7320508 1.8439089 1.8165902 1.6733201 1.6124515 #> 146 1.3784049 1.7320508 1.4142136 1.5491933 1.5165751 1.3416408 1.2649111 #> 147 1.1832160 1.4491377 0.7071068 1.2247449 1.3416408 1.3784049 1.2247449 #> 148 1.1832160 1.5811388 1.2247449 1.3784049 1.3416408 1.2247449 1.2247449 #> 149 1.2649111 1.7606817 1.5165751 1.5811388 1.6733201 1.6431677 1.6431677 #> 150 0.7071068 1.4142136 1.1832160 1.1832160 1.3784049 1.3416408 1.3416408 #>            78        79        80        81        82        83        84 #> 2                                                                         #> 3                                                                         #> 4                                                                         #> 5                                                                         #> 6                                                                         #> 7                                                                         #> 8                                                                         #> 9                                                                         #> 10                                                                        #> 11                                                                        #> 12                                                                        #> 13                                                                        #> 14                                                                        #> 15                                                                        #> 16                                                                        #> 17                                                                        #> 18                                                                        #> 19                                                                        #> 20                                                                        #> 21                                                                        #> 22                                                                        #> 23                                                                        #> 24                                                                        #> 25                                                                        #> 26                                                                        #> 27                                                                        #> 28                                                                        #> 29                                                                        #> 30                                                                        #> 31                                                                        #> 32                                                                        #> 33                                                                        #> 34                                                                        #> 35                                                                        #> 36                                                                        #> 37                                                                        #> 38                                                                        #> 39                                                                        #> 40                                                                        #> 41                                                                        #> 42                                                                        #> 43                                                                        #> 44                                                                        #> 45                                                                        #> 46                                                                        #> 47                                                                        #> 48                                                                        #> 49                                                                        #> 50                                                                        #> 51                                                                        #> 52                                                                        #> 53                                                                        #> 54                                                                        #> 55                                                                        #> 56                                                                        #> 57                                                                        #> 58                                                                        #> 59                                                                        #> 60                                                                        #> 61                                                                        #> 62                                                                        #> 63                                                                        #> 64                                                                        #> 65                                                                        #> 66                                                                        #> 67                                                                        #> 68                                                                        #> 69                                                                        #> 70                                                                        #> 71                                                                        #> 72                                                                        #> 73                                                                        #> 74                                                                        #> 75                                                                        #> 76                                                                        #> 77                                                                        #> 78                                                                        #> 79  1.2247449                                                             #> 80  1.8973666 1.4491377                                                   #> 81  1.8973666 1.4491377 0.8944272                                         #> 82  1.9493589 1.5165751 0.7745967 0.4472136                               #> 83  1.6733201 1.1401754 0.8944272 0.8944272 1.0000000                     #> 84  1.0954451 0.9486833 1.6124515 1.6124515 1.6733201 1.3416408           #> 85  1.4142136 0.8366600 1.4832397 1.3416408 1.4142136 1.2649111 1.2649111 #> 86  1.3038405 0.7745967 1.6431677 1.6431677 1.7029386 1.3784049 1.1401754 #> 87  0.7745967 1.0488088 1.7888544 1.7888544 1.8439089 1.5491933 1.2649111 #> 88  1.4491377 1.0954451 1.4491377 1.3038405 1.3784049 1.2247449 1.3038405 #> 89  1.5491933 1.0488088 1.1832160 1.0954451 1.1832160 0.8944272 1.4142136 #> 90  1.7606817 1.2649111 1.0488088 0.7071068 0.8366600 0.8366600 1.4491377 #> 91  1.6431677 1.0954451 1.1401754 0.9486833 1.0488088 0.9486833 1.3038405 #> 92  1.1401754 0.6324555 1.5165751 1.5165751 1.5811388 1.2247449 1.0488088 #> 93  1.6733201 1.1401754 0.8944272 0.8944272 1.0000000 0.4472136 1.3416408 #> 94  2.1908902 1.8165902 1.0954451 1.0954451 1.0000000 1.4142136 1.9493589 #> 95  1.6124515 1.0488088 1.0954451 1.0000000 1.0954451 0.7745967 1.2649111 #> 96  1.5165751 1.0000000 1.1401754 1.1401754 1.2247449 0.8366600 1.3784049 #> 97  1.5165751 0.8944272 1.1401754 1.1401754 1.2247449 0.8366600 1.3038405 #> 98  1.3038405 0.7745967 1.3784049 1.3784049 1.4491377 1.0488088 1.2247449 #> 99  2.1679483 1.7888544 1.1401754 1.1401754 1.1401754 1.3784049 1.9235384 #> 100 1.5811388 1.0000000 1.0488088 1.0488088 1.1401754 0.7071068 1.3038405 #> 101 1.5811388 1.7888544 2.3021729 2.3021729 2.3452079 2.1213203 1.6431677 #> 102 1.2247449 1.1832160 1.6431677 1.6431677 1.7029386 1.3784049 0.7071068 #> 103 1.3038405 1.7888544 2.3021729 2.3021729 2.3452079 2.1213203 1.6431677 #> 104 1.0954451 1.3038405 1.9493589 1.9493589 2.0000000 1.7320508 1.0954451 #> 105 1.2247449 1.6124515 2.1679483 2.1679483 2.2135944 1.9748418 1.4491377 #> 106 1.7029386 2.0976177 2.5495098 2.5495098 2.5884358 2.3874673 1.9748418 #> 107 1.6733201 1.3038405 1.6124515 1.4142136 1.4832397 1.4832397 1.4142136 #> 108 1.4491377 1.8439089 2.3452079 2.3452079 2.3874673 2.1679483 1.7029386 #> 109 1.1832160 1.6431677 2.0493902 2.0000000 2.0493902 1.8973666 1.3416408 #> 110 1.7320508 2.1213203 2.5690465 2.5690465 2.6076810 2.4083189 2.0000000 #> 111 0.8944272 1.3784049 2.0000000 2.0000000 2.0493902 1.7888544 1.1832160 #> 112 1.0488088 1.3416408 1.8708287 1.8708287 1.9235384 1.6431677 0.9486833 #> 113 1.0000000 1.5811388 2.1447611 2.1447611 2.1908902 1.9493589 1.4142136 #> 114 1.3416408 1.3038405 1.6124515 1.5491933 1.6124515 1.4832397 1.0000000 #> 115 1.3784049 1.3416408 1.8165902 1.8165902 1.8708287 1.5811388 1.0488088 #> 116 1.1832160 1.5165751 2.0976177 2.0976177 2.1447611 1.8973666 1.3416408 #> 117 0.8944272 1.3784049 2.0000000 2.0000000 2.0493902 1.7888544 1.1832160 #> 118 2.0000000 2.3452079 2.7568098 2.7568098 2.7928480 2.6076810 2.2360680 #> 119 1.9748418 2.2803509 2.5884358 2.5884358 2.6267851 2.4698178 2.0736441 #> 120 1.3038405 1.0954451 1.6431677 1.5165751 1.5811388 1.4491377 0.8366600 #> 121 1.3038405 1.7888544 2.3021729 2.3021729 2.3452079 2.1213203 1.6431677 #> 122 1.3038405 1.1832160 1.6431677 1.5811388 1.6431677 1.4491377 1.0488088 #> 123 1.7888544 2.1213203 2.5298221 2.5298221 2.5690465 2.3664319 1.9493589 #> 124 0.9486833 1.0954451 1.7029386 1.7029386 1.7606817 1.4491377 0.8366600 #> 125 1.1832160 1.7029386 2.2360680 2.2360680 2.2803509 2.0493902 1.5491933 #> 126 1.3416408 1.8165902 2.3237900 2.3237900 2.3664319 2.1447611 1.6733201 #> 127 1.0000000 0.9486833 1.6733201 1.6733201 1.7320508 1.4142136 0.8944272 #> 128 0.8944272 0.9486833 1.7320508 1.7320508 1.7888544 1.4832397 0.8944272 #> 129 1.2247449 1.4832397 2.0248457 2.0248457 2.0736441 1.8165902 1.2247449 #> 130 1.1832160 1.6431677 2.1908902 2.1908902 2.2360680 2.0000000 1.4832397 #> 131 1.4832397 1.8708287 2.3237900 2.3237900 2.3664319 2.1447611 1.6733201 #> 132 1.9235384 2.2803509 2.7018512 2.7018512 2.7386128 2.5495098 2.1679483 #> 133 1.2649111 1.5165751 2.0493902 2.0493902 2.0976177 1.8439089 1.2649111 #> 134 0.9486833 1.0000000 1.7029386 1.7029386 1.7606817 1.4491377 0.7071068 #> 135 1.3784049 1.2649111 1.7029386 1.7029386 1.7606817 1.5165751 0.9486833 #> 136 1.6431677 2.0493902 2.5099801 2.5099801 2.5495098 2.3452079 1.9235384 #> 137 1.4491377 1.6733201 2.2135944 2.2135944 2.2583180 2.0248457 1.5165751 #> 138 1.0000000 1.3784049 2.0000000 2.0000000 2.0493902 1.7888544 1.1832160 #> 139 1.0000000 0.8366600 1.6733201 1.6733201 1.7320508 1.4142136 0.8944272 #> 140 1.0488088 1.6124515 2.1679483 2.1679483 2.2135944 1.9748418 1.4491377 #> 141 1.1832160 1.7029386 2.2360680 2.2360680 2.2803509 2.0493902 1.5491933 #> 142 1.0000000 1.5811388 2.1447611 2.1447611 2.1908902 1.9493589 1.4142136 #> 143 1.2247449 1.1832160 1.6431677 1.6431677 1.7029386 1.3784049 0.7071068 #> 144 1.3416408 1.8165902 2.3237900 2.3237900 2.3664319 2.1447611 1.6733201 #> 145 1.3416408 1.8165902 2.3237900 2.3237900 2.3664319 2.1447611 1.6733201 #> 146 0.8944272 1.5165751 2.0976177 2.0976177 2.1447611 1.8973666 1.3416408 #> 147 1.0488088 1.2649111 1.7606817 1.7029386 1.7606817 1.5811388 0.9486833 #> 148 0.8366600 1.3416408 1.9748418 1.9748418 2.0248457 1.7606817 1.1401754 #> 149 1.3784049 1.5491933 2.1213203 2.1213203 2.1679483 1.9235384 1.3784049 #> 150 1.0000000 1.0488088 1.7320508 1.7320508 1.7888544 1.4832397 0.7745967 #>            85        86        87        88        89        90        91 #> 2                                                                         #> 3                                                                         #> 4                                                                         #> 5                                                                         #> 6                                                                         #> 7                                                                         #> 8                                                                         #> 9                                                                         #> 10                                                                        #> 11                                                                        #> 12                                                                        #> 13                                                                        #> 14                                                                        #> 15                                                                        #> 16                                                                        #> 17                                                                        #> 18                                                                        #> 19                                                                        #> 20                                                                        #> 21                                                                        #> 22                                                                        #> 23                                                                        #> 24                                                                        #> 25                                                                        #> 26                                                                        #> 27                                                                        #> 28                                                                        #> 29                                                                        #> 30                                                                        #> 31                                                                        #> 32                                                                        #> 33                                                                        #> 34                                                                        #> 35                                                                        #> 36                                                                        #> 37                                                                        #> 38                                                                        #> 39                                                                        #> 40                                                                        #> 41                                                                        #> 42                                                                        #> 43                                                                        #> 44                                                                        #> 45                                                                        #> 46                                                                        #> 47                                                                        #> 48                                                                        #> 49                                                                        #> 50                                                                        #> 51                                                                        #> 52                                                                        #> 53                                                                        #> 54                                                                        #> 55                                                                        #> 56                                                                        #> 57                                                                        #> 58                                                                        #> 59                                                                        #> 60                                                                        #> 61                                                                        #> 62                                                                        #> 63                                                                        #> 64                                                                        #> 65                                                                        #> 66                                                                        #> 67                                                                        #> 68                                                                        #> 69                                                                        #> 70                                                                        #> 71                                                                        #> 72                                                                        #> 73                                                                        #> 74                                                                        #> 75                                                                        #> 76                                                                        #> 77                                                                        #> 78                                                                        #> 79                                                                        #> 80                                                                        #> 81                                                                        #> 82                                                                        #> 83                                                                        #> 84                                                                        #> 85                                                                        #> 86  1.0488088                                                             #> 87  1.2649111 1.1401754                                                   #> 88  1.3784049 1.3416408 1.3038405                                         #> 89  0.8944272 1.2247449 1.4142136 1.3038405                               #> 90  1.1401754 1.4832397 1.6431677 1.1832160 0.8366600                     #> 91  0.9486833 1.3416408 1.5165751 1.0954451 0.9486833 0.7745967           #> 92  0.9486833 0.8944272 0.9486833 1.0954451 1.0488088 1.3416408 1.1832160 #> 93  1.2649111 1.3784049 1.5491933 1.1401754 0.8944272 0.7071068 0.8366600 #> 94  1.6733201 1.9748418 2.0976177 1.6431677 1.5491933 1.3038405 1.4491377 #> 95  1.0000000 1.3038405 1.4832397 1.1401754 0.6324555 0.7071068 0.7071068 #> 96  0.9486833 1.1832160 1.3784049 1.2649111 0.5477226 1.0000000 0.8944272 #> 97  0.9486833 1.1832160 1.3784049 1.1832160 0.5477226 0.8944272 0.8944272 #> 98  1.1401754 1.0954451 1.1401754 0.8944272 0.9486833 1.1832160 1.0954451 #> 99  1.6431677 1.9493589 2.0736441 1.7320508 1.5165751 1.2649111 1.4142136 #> 100 1.0488088 1.2649111 1.4491377 1.1832160 0.5477226 0.7745967 0.8944272 #> 101 1.9235384 1.6733201 1.7029386 1.9493589 2.0248457 2.1908902 2.0976177 #> 102 1.3038405 1.3416408 1.4491377 1.4832397 1.4491377 1.4832397 1.3416408 #> 103 1.9235384 1.8439089 1.5165751 1.9493589 2.0248457 2.1908902 2.0976177 #> 104 1.5491933 1.4491377 1.3416408 1.5165751 1.6733201 1.8165902 1.7029386 #> 105 1.7606817 1.6733201 1.4491377 1.7888544 1.8708287 2.0493902 1.9493589 #> 106 2.2135944 2.1447611 1.8708287 2.2360680 2.3021729 2.4494897 2.3664319 #> 107 1.0954451 1.4491377 1.6733201 1.4491377 1.4142136 1.2247449 1.1401754 #> 108 2.0248457 1.9493589 1.6431677 2.0000000 2.1213203 2.2360680 2.1447611 #> 109 1.8439089 1.7606817 1.4142136 1.5811388 1.9493589 1.8708287 1.8165902 #> 110 2.2360680 1.9748418 1.8439089 2.2583180 2.3237900 2.4698178 2.3874673 #> 111 1.5491933 1.3038405 1.0954451 1.5811388 1.6733201 1.8708287 1.7606817 #> 112 1.5811388 1.4832397 1.3038405 1.4142136 1.7029386 1.7320508 1.6124515 #> 113 1.7320508 1.6431677 1.2649111 1.7606817 1.8439089 2.0248457 1.9235384 #> 114 1.3416408 1.4491377 1.5491933 1.4491377 1.4832397 1.3784049 1.3038405 #> 115 1.4491377 1.4832397 1.5811388 1.6733201 1.5811388 1.6733201 1.5491933 #> 116 1.6733201 1.4491377 1.3416408 1.7029386 1.7888544 1.9748418 1.8708287 #> 117 1.5491933 1.4491377 1.1832160 1.5811388 1.6733201 1.8708287 1.7606817 #> 118 2.4494897 2.2135944 2.0976177 2.4698178 2.5298221 2.6645825 2.5884358 #> 119 2.4289916 2.3664319 2.1213203 2.2803509 2.5099801 2.4899799 2.4083189 #> 120 1.3784049 1.3416408 1.3784049 1.0954451 1.5165751 1.4142136 1.3416408 #> 121 1.9235384 1.7320508 1.4491377 1.9493589 2.0248457 2.1908902 2.0976177 #> 122 1.1401754 1.3416408 1.4491377 1.5491933 1.3038405 1.4142136 1.2649111 #> 123 2.2803509 2.2135944 1.9493589 2.2135944 2.3664319 2.4289916 2.3452079 #> 124 1.3784049 1.2649111 1.1401754 1.1832160 1.5165751 1.5491933 1.4142136 #> 125 1.8439089 1.5811388 1.3416408 1.8708287 1.9493589 2.1213203 2.0248457 #> 126 1.9493589 1.7606817 1.4832397 1.9748418 2.0493902 2.2135944 2.1213203 #> 127 1.2649111 1.1401754 1.0954451 1.2247449 1.4142136 1.5165751 1.3784049 #> 128 1.1832160 1.0488088 1.0954451 1.3784049 1.3416408 1.5811388 1.4491377 #> 129 1.7029386 1.6124515 1.4491377 1.6124515 1.8165902 1.8973666 1.7888544 #> 130 1.7888544 1.7029386 1.3416408 1.8165902 1.8973666 2.0736441 1.9748418 #> 131 2.0493902 1.9748418 1.6733201 1.9748418 2.1447611 2.2135944 2.1213203 #> 132 2.3874673 2.1447611 2.0248457 2.4083189 2.4698178 2.6076810 2.5298221 #> 133 1.7320508 1.6431677 1.4832397 1.6431677 1.8439089 1.9235384 1.8165902 #> 134 1.3038405 1.2649111 1.0488088 1.1832160 1.4491377 1.5491933 1.4142136 #> 135 1.5165751 1.4832397 1.4491377 1.3416408 1.5811388 1.5491933 1.4142136 #> 136 2.1679483 2.0976177 1.8165902 2.1908902 2.2583180 2.4083189 2.3237900 #> 137 1.8165902 1.4832397 1.5811388 1.8439089 1.9235384 2.0976177 2.0000000 #> 138 1.5491933 1.3784049 1.1832160 1.5811388 1.6733201 1.8708287 1.7606817 #> 139 1.0954451 0.9486833 1.0954451 1.3784049 1.2649111 1.5165751 1.3784049 #> 140 1.7606817 1.6124515 1.2247449 1.7888544 1.8708287 2.0493902 1.9493589 #> 141 1.8439089 1.7029386 1.3416408 1.8708287 1.9493589 2.1213203 2.0248457 #> 142 1.7320508 1.5811388 1.1832160 1.7606817 1.8439089 2.0248457 1.9235384 #> 143 1.3038405 1.3416408 1.4491377 1.4832397 1.4491377 1.4832397 1.3416408 #> 144 1.9493589 1.7606817 1.4832397 1.9748418 2.0493902 2.2135944 2.1213203 #> 145 1.9493589 1.7029386 1.4832397 1.9748418 2.0493902 2.2135944 2.1213203 #> 146 1.6733201 1.5811388 1.1832160 1.7029386 1.7888544 1.9748418 1.8708287 #> 147 1.5165751 1.4142136 1.3038405 1.1832160 1.6431677 1.5491933 1.4832397 #> 148 1.5165751 1.4142136 1.1401754 1.5491933 1.6431677 1.8439089 1.7320508 #> 149 1.7029386 1.3416408 1.5165751 1.7888544 1.8165902 2.0000000 1.8973666 #> 150 1.1832160 1.1401754 1.2649111 1.5165751 1.3416408 1.5811388 1.4491377 #>            92        93        94        95        96        97        98 #> 2                                                                         #> 3                                                                         #> 4                                                                         #> 5                                                                         #> 6                                                                         #> 7                                                                         #> 8                                                                         #> 9                                                                         #> 10                                                                        #> 11                                                                        #> 12                                                                        #> 13                                                                        #> 14                                                                        #> 15                                                                        #> 16                                                                        #> 17                                                                        #> 18                                                                        #> 19                                                                        #> 20                                                                        #> 21                                                                        #> 22                                                                        #> 23                                                                        #> 24                                                                        #> 25                                                                        #> 26                                                                        #> 27                                                                        #> 28                                                                        #> 29                                                                        #> 30                                                                        #> 31                                                                        #> 32                                                                        #> 33                                                                        #> 34                                                                        #> 35                                                                        #> 36                                                                        #> 37                                                                        #> 38                                                                        #> 39                                                                        #> 40                                                                        #> 41                                                                        #> 42                                                                        #> 43                                                                        #> 44                                                                        #> 45                                                                        #> 46                                                                        #> 47                                                                        #> 48                                                                        #> 49                                                                        #> 50                                                                        #> 51                                                                        #> 52                                                                        #> 53                                                                        #> 54                                                                        #> 55                                                                        #> 56                                                                        #> 57                                                                        #> 58                                                                        #> 59                                                                        #> 60                                                                        #> 61                                                                        #> 62                                                                        #> 63                                                                        #> 64                                                                        #> 65                                                                        #> 66                                                                        #> 67                                                                        #> 68                                                                        #> 69                                                                        #> 70                                                                        #> 71                                                                        #> 72                                                                        #> 73                                                                        #> 74                                                                        #> 75                                                                        #> 76                                                                        #> 77                                                                        #> 78                                                                        #> 79                                                                        #> 80                                                                        #> 81                                                                        #> 82                                                                        #> 83                                                                        #> 84                                                                        #> 85                                                                        #> 86                                                                        #> 87                                                                        #> 88                                                                        #> 89                                                                        #> 90                                                                        #> 91                                                                        #> 92                                                                        #> 93  1.2247449                                                             #> 94  1.8708287 1.4142136                                                   #> 95  1.1401754 0.7745967 1.4832397                                         #> 96  1.0000000 0.8366600 1.5811388 0.7071068                               #> 97  1.0000000 0.8366600 1.5811388 0.5477226 0.4472136                     #> 98  0.7745967 1.0488088 1.7606817 0.9486833 0.8944272 0.7745967           #> 99  1.8439089 1.3784049 0.8366600 1.4491377 1.5491933 1.5491933 1.7320508 #> 100 1.0954451 0.7071068 1.5165751 0.5477226 0.6324555 0.4472136 0.8944272 #> 101 1.7320508 2.1213203 2.5495098 2.0736441 2.0000000 2.0000000 1.8439089 #> 102 1.2649111 1.3784049 1.9748418 1.3038405 1.4142136 1.3416408 1.4142136 #> 103 1.7320508 2.1213203 2.5495098 2.0736441 2.0000000 2.0000000 1.8439089 #> 104 1.3038405 1.7320508 2.2360680 1.6733201 1.6431677 1.5811388 1.3784049 #> 105 1.5491933 1.9748418 2.4289916 1.9235384 1.8439089 1.8439089 1.6733201 #> 106 2.0493902 2.3874673 2.7748874 2.3452079 2.2803509 2.2803509 2.1447611 #> 107 1.4491377 1.4142136 1.4832397 1.2649111 1.4491377 1.3784049 1.5165751 #> 108 1.8439089 2.1679483 2.5884358 2.1213203 2.0976177 2.0493902 1.8973666 #> 109 1.6431677 1.8439089 2.2803509 1.8439089 1.9235384 1.8708287 1.7029386 #> 110 2.0736441 2.4083189 2.7928480 2.3664319 2.3021729 2.3021729 2.1679483 #> 111 1.3038405 1.7888544 2.2803509 1.7320508 1.6431677 1.6431677 1.4491377 #> 112 1.3416408 1.6431677 2.1679483 1.5811388 1.6733201 1.6124515 1.4142136 #> 113 1.5165751 1.9493589 2.4083189 1.8973666 1.8165902 1.8165902 1.6431677 #> 114 1.3784049 1.4142136 1.8973666 1.3416408 1.4491377 1.3784049 1.5165751 #> 115 1.4142136 1.5811388 2.1213203 1.5165751 1.5491933 1.4832397 1.5491933 #> 116 1.4491377 1.8973666 2.3664319 1.8439089 1.7606817 1.7606817 1.5811388 #> 117 1.3038405 1.7888544 2.2803509 1.7320508 1.6431677 1.6431677 1.4491377 #> 118 2.3021729 2.6076810 2.9664794 2.5690465 2.5099801 2.5099801 2.3874673 #> 119 2.2803509 2.4289916 2.8106939 2.4289916 2.4899799 2.4494897 2.3237900 #> 120 1.1832160 1.3784049 1.8165902 1.3784049 1.4832397 1.4142136 1.3416408 #> 121 1.7320508 2.1213203 2.5495098 2.0736441 2.0000000 2.0000000 1.8439089 #> 122 1.2649111 1.4491377 1.9235384 1.2247449 1.3416408 1.2649111 1.4142136 #> 123 2.1213203 2.3664319 2.7568098 2.3237900 2.3452079 2.3021729 2.1679483 #> 124 1.0954451 1.4491377 2.0248457 1.3784049 1.4832397 1.4142136 1.1832160 #> 125 1.6431677 2.0493902 2.4899799 2.0000000 1.9235384 1.9235384 1.7606817 #> 126 1.7606817 2.1447611 2.5690465 2.0976177 2.0248457 2.0248457 1.8708287 #> 127 0.9486833 1.4142136 2.0000000 1.3416408 1.3784049 1.3038405 1.0488088 #> 128 0.8366600 1.4832397 2.0493902 1.4142136 1.3038405 1.3038405 1.1401754 #> 129 1.4832397 1.8165902 2.3021729 1.7606817 1.7888544 1.7320508 1.5491933 #> 130 1.5811388 2.0000000 2.4494897 1.9493589 1.8708287 1.8708287 1.7029386 #> 131 1.8708287 2.1447611 2.5690465 2.0976177 2.1213203 2.0736441 1.9235384 #> 132 2.2360680 2.5495098 2.9154759 2.5099801 2.4494897 2.4494897 2.3237900 #> 133 1.5165751 1.8439089 2.3237900 1.7888544 1.8165902 1.7606817 1.5811388 #> 134 1.0000000 1.4491377 2.0248457 1.3784049 1.4142136 1.3416408 1.0954451 #> 135 1.1832160 1.4491377 2.0248457 1.4491377 1.5491933 1.4832397 1.3416408 #> 136 2.0000000 2.3452079 2.7386128 2.3021729 2.2360680 2.2360680 2.0976177 #> 137 1.6124515 2.0248457 2.4698178 1.9748418 1.8973666 1.8973666 1.7320508 #> 138 1.3038405 1.7888544 2.2803509 1.7320508 1.6431677 1.6431677 1.4491377 #> 139 0.8366600 1.4142136 2.0000000 1.3416408 1.2247449 1.2247449 1.1401754 #> 140 1.5491933 1.9748418 2.4289916 1.9235384 1.8439089 1.8439089 1.6733201 #> 141 1.6431677 2.0493902 2.4899799 2.0000000 1.9235384 1.9235384 1.7606817 #> 142 1.5165751 1.9493589 2.4083189 1.8973666 1.8165902 1.8165902 1.6431677 #> 143 1.2649111 1.3784049 1.9748418 1.3038405 1.4142136 1.3416408 1.4142136 #> 144 1.7606817 2.1447611 2.5690465 2.0976177 2.0248457 2.0248457 1.8708287 #> 145 1.7606817 2.1447611 2.5690465 2.0976177 2.0248457 2.0248457 1.8708287 #> 146 1.4491377 1.8973666 2.3664319 1.8439089 1.7606817 1.7606817 1.5811388 #> 147 1.2649111 1.5165751 2.0248457 1.5165751 1.6124515 1.5491933 1.3416408 #> 148 1.2649111 1.7606817 2.2583180 1.7029386 1.6124515 1.6124515 1.4142136 #> 149 1.4832397 1.9235384 2.3874673 1.8708287 1.7888544 1.7888544 1.6124515 #> 150 1.0488088 1.4832397 2.0493902 1.4142136 1.3038405 1.3038405 1.3038405 #>            99       100       101       102       103       104       105 #> 2                                                                         #> 3                                                                         #> 4                                                                         #> 5                                                                         #> 6                                                                         #> 7                                                                         #> 8                                                                         #> 9                                                                         #> 10                                                                        #> 11                                                                        #> 12                                                                        #> 13                                                                        #> 14                                                                        #> 15                                                                        #> 16                                                                        #> 17                                                                        #> 18                                                                        #> 19                                                                        #> 20                                                                        #> 21                                                                        #> 22                                                                        #> 23                                                                        #> 24                                                                        #> 25                                                                        #> 26                                                                        #> 27                                                                        #> 28                                                                        #> 29                                                                        #> 30                                                                        #> 31                                                                        #> 32                                                                        #> 33                                                                        #> 34                                                                        #> 35                                                                        #> 36                                                                        #> 37                                                                        #> 38                                                                        #> 39                                                                        #> 40                                                                        #> 41                                                                        #> 42                                                                        #> 43                                                                        #> 44                                                                        #> 45                                                                        #> 46                                                                        #> 47                                                                        #> 48                                                                        #> 49                                                                        #> 50                                                                        #> 51                                                                        #> 52                                                                        #> 53                                                                        #> 54                                                                        #> 55                                                                        #> 56                                                                        #> 57                                                                        #> 58                                                                        #> 59                                                                        #> 60                                                                        #> 61                                                                        #> 62                                                                        #> 63                                                                        #> 64                                                                        #> 65                                                                        #> 66                                                                        #> 67                                                                        #> 68                                                                        #> 69                                                                        #> 70                                                                        #> 71                                                                        #> 72                                                                        #> 73                                                                        #> 74                                                                        #> 75                                                                        #> 76                                                                        #> 77                                                                        #> 78                                                                        #> 79                                                                        #> 80                                                                        #> 81                                                                        #> 82                                                                        #> 83                                                                        #> 84                                                                        #> 85                                                                        #> 86                                                                        #> 87                                                                        #> 88                                                                        #> 89                                                                        #> 90                                                                        #> 91                                                                        #> 92                                                                        #> 93                                                                        #> 94                                                                        #> 95                                                                        #> 96                                                                        #> 97                                                                        #> 98                                                                        #> 99                                                                        #> 100 1.4832397                                                             #> 101 2.5298221 2.0493902                                                   #> 102 1.9493589 1.3416408 1.6124515                                         #> 103 2.5298221 2.0493902 1.2649111 1.6124515                               #> 104 2.2135944 1.6431677 1.2247449 1.1401754 1.2247449                     #> 105 2.4083189 1.8973666 1.0000000 1.4142136 0.8944272 0.9486833           #> 106 2.7568098 2.3237900 1.6124515 1.9493589 1.0954451 1.6431677 1.4142136 #> 107 1.5165751 1.3784049 2.1213203 1.3784049 2.1213203 1.7320508 1.9748418 #> 108 2.5690465 2.0976177 1.5491933 1.7320508 1.0000000 1.3038405 1.3416408 #> 109 2.2583180 1.8708287 1.4491377 1.3784049 1.1401754 1.0000000 1.0488088 #> 110 2.7748874 2.3452079 1.1401754 1.9748418 1.1401754 1.6733201 1.3784049 #> 111 2.2583180 1.7029386 1.3038405 1.1401754 1.3038405 1.0954451 1.0488088 #> 112 2.1447611 1.6124515 1.4142136 0.8944272 1.3416408 0.8366600 1.0954451 #> 113 2.3874673 1.8708287 1.3038405 1.3784049 0.8366600 1.0000000 0.8366600 #> 114 1.8708287 1.3784049 1.7029386 0.7071068 1.7029386 1.3416408 1.5165751 #> 115 2.0976177 1.4832397 1.4142136 0.7745967 1.6124515 1.3038405 1.3416408 #> 116 2.3452079 1.8165902 1.0488088 1.3038405 1.3038405 1.0954451 0.9486833 #> 117 2.2583180 1.7029386 1.3038405 1.2247449 1.1401754 0.6324555 0.8366600 #> 118 2.9495762 2.5495098 1.7029386 2.2135944 1.5165751 1.9493589 1.7029386 #> 119 2.7928480 2.4494897 1.7888544 2.0493902 1.4832397 1.8708287 1.6733201 #> 120 1.8973666 1.4142136 1.8439089 1.0954451 1.8439089 1.3784049 1.6733201 #> 121 2.5298221 2.0493902 1.0954451 1.6124515 0.8944272 1.2247449 0.8944272 #> 122 1.8973666 1.2649111 1.6733201 0.7745967 1.6733201 1.3038405 1.4832397 #> 123 2.7386128 2.3021729 1.7606817 1.9235384 1.3038405 1.6733201 1.5811388 #> 124 2.0000000 1.4142136 1.5491933 0.8944272 1.5491933 0.9486833 1.3416408 #> 125 2.4698178 1.9748418 1.0488088 1.5165751 0.9486833 1.0954451 0.8366600 #> 126 2.5495098 2.0736441 1.3038405 1.7029386 0.8366600 1.2649111 1.2247449 #> 127 1.9748418 1.3038405 1.5811388 0.9486833 1.5811388 1.0000000 1.3784049 #> 128 2.0248457 1.3784049 1.5165751 0.9486833 1.5165751 1.0000000 1.3038405 #> 129 2.2803509 1.7320508 1.1832160 1.1832160 1.0954451 0.7071068 0.7745967 #> 130 2.4289916 1.9235384 1.5165751 1.6431677 0.8366600 1.1832160 1.1401754 #> 131 2.5495098 2.0736441 1.5165751 1.6431677 0.9486833 1.3416408 1.3038405 #> 132 2.8982753 2.4899799 1.7320508 2.1447611 1.4832397 1.8708287 1.7320508 #> 133 2.3021729 1.7606817 1.1401754 1.2247449 1.1401754 0.7745967 0.7071068 #> 134 2.0000000 1.3416408 1.5491933 1.0000000 1.5491933 0.9486833 1.3416408 #> 135 2.0000000 1.4832397 1.5491933 1.1832160 1.5491933 0.9486833 1.3416408 #> 136 2.7202941 2.2803509 1.4142136 1.8973666 1.0000000 1.5811388 1.2649111 #> 137 2.4494897 1.9493589 0.7745967 1.4832397 1.3416408 1.0488088 1.0000000 #> 138 2.2583180 1.7029386 1.2247449 1.2247449 1.2247449 0.6324555 0.9486833 #> 139 1.9748418 1.3038405 1.5811388 0.9486833 1.5811388 1.0954451 1.3784049 #> 140 2.4083189 1.8973666 1.3416408 1.4142136 0.8944272 1.1401754 1.0000000 #> 141 2.4698178 1.9748418 1.0488088 1.5165751 1.0488088 1.0954451 0.8366600 #> 142 2.3874673 1.8708287 1.3784049 1.3784049 1.1401754 1.3416408 1.1401754 #> 143 1.9493589 1.3416408 1.6124515 0.0000000 1.6124515 1.1401754 1.4142136 #> 144 2.5495098 2.0736441 0.9486833 1.6431677 0.8366600 1.2649111 0.8366600 #> 145 2.5495098 2.0736441 0.8366600 1.6431677 1.1401754 1.2649111 0.9486833 #> 146 2.3452079 1.8165902 1.3038405 1.3038405 1.1401754 1.1832160 0.9486833 #> 147 2.0000000 1.5491933 1.5491933 0.8944272 1.5491933 1.0488088 1.3416408 #> 148 2.2360680 1.6733201 1.3416408 1.0954451 1.1832160 0.9486833 0.8944272 #> 149 2.3664319 1.8439089 1.0000000 1.3416408 1.4142136 1.1401754 1.0954451 #> 150 2.0248457 1.3784049 1.5165751 0.7071068 1.5165751 1.0000000 1.3038405 #>           106       107       108       109       110       111       112 #> 2                                                                         #> 3                                                                         #> 4                                                                         #> 5                                                                         #> 6                                                                         #> 7                                                                         #> 8                                                                         #> 9                                                                         #> 10                                                                        #> 11                                                                        #> 12                                                                        #> 13                                                                        #> 14                                                                        #> 15                                                                        #> 16                                                                        #> 17                                                                        #> 18                                                                        #> 19                                                                        #> 20                                                                        #> 21                                                                        #> 22                                                                        #> 23                                                                        #> 24                                                                        #> 25                                                                        #> 26                                                                        #> 27                                                                        #> 28                                                                        #> 29                                                                        #> 30                                                                        #> 31                                                                        #> 32                                                                        #> 33                                                                        #> 34                                                                        #> 35                                                                        #> 36                                                                        #> 37                                                                        #> 38                                                                        #> 39                                                                        #> 40                                                                        #> 41                                                                        #> 42                                                                        #> 43                                                                        #> 44                                                                        #> 45                                                                        #> 46                                                                        #> 47                                                                        #> 48                                                                        #> 49                                                                        #> 50                                                                        #> 51                                                                        #> 52                                                                        #> 53                                                                        #> 54                                                                        #> 55                                                                        #> 56                                                                        #> 57                                                                        #> 58                                                                        #> 59                                                                        #> 60                                                                        #> 61                                                                        #> 62                                                                        #> 63                                                                        #> 64                                                                        #> 65                                                                        #> 66                                                                        #> 67                                                                        #> 68                                                                        #> 69                                                                        #> 70                                                                        #> 71                                                                        #> 72                                                                        #> 73                                                                        #> 74                                                                        #> 75                                                                        #> 76                                                                        #> 77                                                                        #> 78                                                                        #> 79                                                                        #> 80                                                                        #> 81                                                                        #> 82                                                                        #> 83                                                                        #> 84                                                                        #> 85                                                                        #> 86                                                                        #> 87                                                                        #> 88                                                                        #> 89                                                                        #> 90                                                                        #> 91                                                                        #> 92                                                                        #> 93                                                                        #> 94                                                                        #> 95                                                                        #> 96                                                                        #> 97                                                                        #> 98                                                                        #> 99                                                                        #> 100                                                                       #> 101                                                                       #> 102                                                                       #> 103                                                                       #> 104                                                                       #> 105                                                                       #> 106                                                                       #> 107 2.3874673                                                             #> 108 1.0000000 2.1679483                                                   #> 109 1.5811388 1.7888544 1.2247449                                         #> 110 1.3784049 2.4083189 1.3038405 1.6124515                               #> 111 1.7029386 1.7888544 1.5811388 1.3416408 1.6124515                     #> 112 1.7320508 1.6431677 1.4832397 1.0488088 1.7606817 0.9486833           #> 113 1.3784049 1.9493589 1.3038405 1.0954451 1.4142136 1.0000000 1.0488088 #> 114 2.0248457 1.2649111 1.8708287 1.4142136 2.0493902 1.2649111 1.1401754 #> 115 1.9493589 1.5811388 1.8439089 1.5811388 1.8165902 1.2247449 1.1832160 #> 116 1.7029386 1.8973666 1.6431677 1.4142136 1.4832397 0.7745967 0.9486833 #> 117 1.5811388 1.7888544 1.3038405 1.0000000 1.6124515 0.8944272 0.8366600 #> 118 1.0488088 2.6076810 1.4491377 1.8973666 1.2649111 1.8973666 2.0248457 #> 119 1.0000000 2.4289916 1.3416408 1.6431677 1.5811388 1.9748418 1.8439089 #> 120 2.1447611 1.4491377 1.8973666 1.4491377 2.1679483 1.4491377 1.2649111 #> 121 1.4142136 2.1213203 1.3416408 1.2247449 1.1401754 1.1401754 1.3416408 #> 122 2.0000000 1.3038405 1.8439089 1.5811388 2.0248457 1.2247449 1.1832160 #> 123 0.7071068 2.3664319 1.0488088 1.5491933 1.5491933 1.7888544 1.7029386 #> 124 1.8973666 1.4491377 1.6124515 1.2247449 1.9235384 1.0488088 0.7745967 #> 125 1.4491377 2.0493902 1.3784049 1.0954451 1.2649111 1.0000000 1.2247449 #> 126 1.2247449 2.1447611 0.8366600 1.1832160 1.0954451 1.3416408 1.4491377 #> 127 1.9235384 1.4142136 1.6431677 1.3416408 1.9493589 1.0954451 0.9486833 #> 128 1.8708287 1.4832397 1.6431677 1.4142136 1.8973666 1.0000000 1.0488088 #> 129 1.5491933 1.8165902 1.4142136 1.0488088 1.5811388 1.0488088 0.7745967 #> 130 1.3038405 2.0493902 0.9486833 1.0954451 1.3416408 1.4142136 1.3784049 #> 131 1.0488088 2.1447611 0.7071068 1.1832160 1.2649111 1.5491933 1.3784049 #> 132 1.1832160 2.5495098 1.3416408 1.8165902 1.3038405 1.8165902 1.9493589 #> 133 1.5811388 1.8439089 1.4491377 1.0954451 1.5491933 1.0954451 0.8366600 #> 134 1.8973666 1.5811388 1.6124515 1.3038405 1.9235384 1.0488088 0.8944272 #> 135 1.8973666 1.6431677 1.6124515 1.1401754 1.9235384 1.4491377 1.0954451 #> 136 0.8944272 2.3452079 1.0954451 1.5165751 1.1401754 1.6431677 1.6733201 #> 137 1.7320508 2.0248457 1.6733201 1.4491377 1.3038405 1.1401754 1.2649111 #> 138 1.6431677 1.7888544 1.3784049 1.0954451 1.6124515 0.8944272 0.8366600 #> 139 1.9235384 1.4142136 1.7029386 1.4832397 1.9493589 1.0954451 1.1401754 #> 140 1.4142136 1.9748418 1.3416408 1.2247449 1.3784049 0.9486833 1.0954451 #> 141 1.5165751 2.0493902 1.4491377 1.1832160 1.2649111 1.0954451 1.2247449 #> 142 1.5811388 1.9493589 1.5165751 1.4142136 1.4142136 0.8944272 1.2247449 #> 143 1.9493589 1.3784049 1.7320508 1.3784049 1.9748418 1.1401754 0.8944272 #> 144 1.3784049 2.1447611 1.3038405 1.1832160 1.0954451 1.1832160 1.3784049 #> 145 1.5811388 2.1447611 1.5165751 1.2649111 1.0954451 1.1832160 1.3784049 #> 146 1.5811388 1.8973666 1.5165751 1.2649111 1.4832397 0.8944272 1.0488088 #> 147 1.8973666 1.4491377 1.6733201 1.1401754 1.9235384 1.0488088 0.7745967 #> 148 1.6124515 1.7606817 1.4832397 1.2247449 1.6431677 0.5477226 0.7745967 #> 149 1.7888544 1.9235384 1.7320508 1.5165751 1.4491377 1.0488088 1.1832160 #> 150 1.8708287 1.4832397 1.6431677 1.4142136 1.8973666 1.0000000 1.0488088 #>           113       114       115       116       117       118       119 #> 2                                                                         #> 3                                                                         #> 4                                                                         #> 5                                                                         #> 6                                                                         #> 7                                                                         #> 8                                                                         #> 9                                                                         #> 10                                                                        #> 11                                                                        #> 12                                                                        #> 13                                                                        #> 14                                                                        #> 15                                                                        #> 16                                                                        #> 17                                                                        #> 18                                                                        #> 19                                                                        #> 20                                                                        #> 21                                                                        #> 22                                                                        #> 23                                                                        #> 24                                                                        #> 25                                                                        #> 26                                                                        #> 27                                                                        #> 28                                                                        #> 29                                                                        #> 30                                                                        #> 31                                                                        #> 32                                                                        #> 33                                                                        #> 34                                                                        #> 35                                                                        #> 36                                                                        #> 37                                                                        #> 38                                                                        #> 39                                                                        #> 40                                                                        #> 41                                                                        #> 42                                                                        #> 43                                                                        #> 44                                                                        #> 45                                                                        #> 46                                                                        #> 47                                                                        #> 48                                                                        #> 49                                                                        #> 50                                                                        #> 51                                                                        #> 52                                                                        #> 53                                                                        #> 54                                                                        #> 55                                                                        #> 56                                                                        #> 57                                                                        #> 58                                                                        #> 59                                                                        #> 60                                                                        #> 61                                                                        #> 62                                                                        #> 63                                                                        #> 64                                                                        #> 65                                                                        #> 66                                                                        #> 67                                                                        #> 68                                                                        #> 69                                                                        #> 70                                                                        #> 71                                                                        #> 72                                                                        #> 73                                                                        #> 74                                                                        #> 75                                                                        #> 76                                                                        #> 77                                                                        #> 78                                                                        #> 79                                                                        #> 80                                                                        #> 81                                                                        #> 82                                                                        #> 83                                                                        #> 84                                                                        #> 85                                                                        #> 86                                                                        #> 87                                                                        #> 88                                                                        #> 89                                                                        #> 90                                                                        #> 91                                                                        #> 92                                                                        #> 93                                                                        #> 94                                                                        #> 95                                                                        #> 96                                                                        #> 97                                                                        #> 98                                                                        #> 99                                                                        #> 100                                                                       #> 101                                                                       #> 102                                                                       #> 103                                                                       #> 104                                                                       #> 105                                                                       #> 106                                                                       #> 107                                                                       #> 108                                                                       #> 109                                                                       #> 110                                                                       #> 111                                                                       #> 112                                                                       #> 113                                                                       #> 114 1.4832397                                                             #> 115 1.3784049 0.9486833                                                   #> 116 1.0000000 1.4142136 1.1401754                                         #> 117 0.7745967 1.4142136 1.3784049 1.0000000                               #> 118 1.7320508 2.2803509 2.1679483 1.8439089 1.8973666                     #> 119 1.7029386 2.0736441 2.0000000 1.8708287 1.8708287 1.2247449           #> 120 1.6431677 1.0488088 1.3416408 1.5811388 1.4491377 2.3874673 2.1908902 #> 121 0.8366600 1.7029386 1.4832397 0.9486833 1.1401754 1.5811388 1.6124515 #> 122 1.4491377 0.7071068 0.8944272 1.3784049 1.3784049 2.2583180 2.1447611 #> 123 1.5491933 2.0000000 1.9748418 1.8439089 1.6733201 1.0954451 0.8366600 #> 124 1.3038405 1.0488088 1.1832160 1.2247449 1.0488088 2.1679483 2.0000000 #> 125 0.7745967 1.6124515 1.5165751 1.0000000 1.0000000 1.6124515 1.7606817 #> 126 1.1832160 1.8439089 1.8165902 1.4142136 1.1832160 1.4832397 1.5811388 #> 127 1.3416408 1.0954451 1.1401754 1.2649111 1.0954451 2.1908902 2.0736441 #> 128 1.2649111 1.0954451 1.1401754 1.1832160 1.0000000 2.1447611 2.1213203 #> 129 0.8366600 1.3038405 1.1832160 0.9486833 0.8366600 1.8708287 1.7320508 #> 130 1.0954451 1.7888544 1.7606817 1.4832397 1.0954451 1.6733201 1.6431677 #> 131 1.2649111 1.7888544 1.7606817 1.6124515 1.3416408 1.4832397 1.3038405 #> 132 1.7029386 2.2135944 2.1908902 1.8708287 1.8165902 0.8366600 1.4832397 #> 133 0.8944272 1.3416408 1.1401754 0.8944272 0.8944272 1.8439089 1.7029386 #> 134 1.3038405 1.2247449 1.1832160 1.2247449 1.0488088 2.1679483 2.0493902 #> 135 1.3784049 1.3038405 1.4142136 1.4491377 1.1401754 2.1679483 1.9493589 #> 136 1.3038405 1.9748418 1.7888544 1.5165751 1.5165751 1.2247449 1.0954451 #> 137 1.1401754 1.5811388 1.2649111 0.8366600 1.1401754 1.7606817 1.8973666 #> 138 0.8944272 1.4142136 1.3784049 0.8944272 0.4472136 1.8973666 1.9235384 #> 139 1.3416408 1.0954451 1.1401754 1.2649111 1.0954451 2.1908902 2.1679483 #> 140 0.5477226 1.5165751 1.4142136 0.9486833 0.9486833 1.7029386 1.7320508 #> 141 0.7745967 1.6124515 1.3038405 0.8944272 1.0000000 1.7320508 1.7029386 #> 142 0.8944272 1.4832397 1.2247449 0.8944272 1.1832160 1.7888544 1.7606817 #> 143 1.3784049 0.7071068 0.7745967 1.3038405 1.2247449 2.2135944 2.0493902 #> 144 0.8944272 1.7320508 1.5165751 1.0000000 1.1832160 1.5491933 1.5811388 #> 145 1.0000000 1.7320508 1.4491377 1.0000000 1.1832160 1.6733201 1.7606817 #> 146 0.7745967 1.4142136 1.1401754 0.7745967 1.0000000 1.8439089 1.7606817 #> 147 1.3038405 0.8366600 1.1832160 1.2247449 1.1401754 2.1679483 1.9493589 #> 148 0.8366600 1.2247449 1.1832160 0.8366600 0.7071068 1.9235384 1.8973666 #> 149 1.1401754 1.4491377 1.1832160 0.7071068 1.1401754 1.8165902 1.9493589 #> 150 1.2649111 1.0000000 0.9486833 1.1832160 1.0000000 2.1447611 2.1213203 #>           120       121       122       123       124       125       126 #> 2                                                                         #> 3                                                                         #> 4                                                                         #> 5                                                                         #> 6                                                                         #> 7                                                                         #> 8                                                                         #> 9                                                                         #> 10                                                                        #> 11                                                                        #> 12                                                                        #> 13                                                                        #> 14                                                                        #> 15                                                                        #> 16                                                                        #> 17                                                                        #> 18                                                                        #> 19                                                                        #> 20                                                                        #> 21                                                                        #> 22                                                                        #> 23                                                                        #> 24                                                                        #> 25                                                                        #> 26                                                                        #> 27                                                                        #> 28                                                                        #> 29                                                                        #> 30                                                                        #> 31                                                                        #> 32                                                                        #> 33                                                                        #> 34                                                                        #> 35                                                                        #> 36                                                                        #> 37                                                                        #> 38                                                                        #> 39                                                                        #> 40                                                                        #> 41                                                                        #> 42                                                                        #> 43                                                                        #> 44                                                                        #> 45                                                                        #> 46                                                                        #> 47                                                                        #> 48                                                                        #> 49                                                                        #> 50                                                                        #> 51                                                                        #> 52                                                                        #> 53                                                                        #> 54                                                                        #> 55                                                                        #> 56                                                                        #> 57                                                                        #> 58                                                                        #> 59                                                                        #> 60                                                                        #> 61                                                                        #> 62                                                                        #> 63                                                                        #> 64                                                                        #> 65                                                                        #> 66                                                                        #> 67                                                                        #> 68                                                                        #> 69                                                                        #> 70                                                                        #> 71                                                                        #> 72                                                                        #> 73                                                                        #> 74                                                                        #> 75                                                                        #> 76                                                                        #> 77                                                                        #> 78                                                                        #> 79                                                                        #> 80                                                                        #> 81                                                                        #> 82                                                                        #> 83                                                                        #> 84                                                                        #> 85                                                                        #> 86                                                                        #> 87                                                                        #> 88                                                                        #> 89                                                                        #> 90                                                                        #> 91                                                                        #> 92                                                                        #> 93                                                                        #> 94                                                                        #> 95                                                                        #> 96                                                                        #> 97                                                                        #> 98                                                                        #> 99                                                                        #> 100                                                                       #> 101                                                                       #> 102                                                                       #> 103                                                                       #> 104                                                                       #> 105                                                                       #> 106                                                                       #> 107                                                                       #> 108                                                                       #> 109                                                                       #> 110                                                                       #> 111                                                                       #> 112                                                                       #> 113                                                                       #> 114                                                                       #> 115                                                                       #> 116                                                                       #> 117                                                                       #> 118                                                                       #> 119                                                                       #> 120                                                                       #> 121 1.8439089                                                             #> 122 1.2649111 1.6733201                                                   #> 123 2.1213203 1.5811388 1.9748418                                         #> 124 1.0954451 1.5491933 1.0000000 1.8708287                               #> 125 1.7606817 0.7071068 1.5811388 1.6124515 1.4491377                     #> 126 1.8708287 1.0488088 1.8165902 1.3416408 1.5811388 1.0954451           #> 127 1.1401754 1.5811388 0.9486833 1.8973666 0.5477226 1.4832397 1.6124515 #> 128 1.1401754 1.5165751 0.9486833 1.9493589 0.7071068 1.4142136 1.5491933 #> 129 1.4832397 1.0954451 1.2649111 1.5811388 1.0954451 0.9486833 1.3784049 #> 130 1.7029386 1.1401754 1.7606817 1.4142136 1.5165751 1.1832160 0.7745967 #> 131 1.8708287 1.3038405 1.7606817 1.0000000 1.5811388 1.3416408 0.8944272 #> 132 2.3237900 1.6124515 2.1908902 1.2247449 2.0976177 1.5811388 1.3784049 #> 133 1.5165751 1.0488088 1.3038405 1.6124515 1.1401754 1.0000000 1.4142136 #> 134 1.0000000 1.5491933 1.1832160 1.8708287 0.7745967 1.4491377 1.5811388 #> 135 1.0954451 1.5491933 1.4142136 1.8708287 1.1832160 1.4491377 1.5811388 #> 136 2.0976177 1.1832160 1.9493589 1.0488088 1.8439089 1.3784049 1.1401754 #> 137 1.7320508 1.0000000 1.5491933 1.8708287 1.4142136 0.9486833 1.4491377 #> 138 1.4491377 1.1401754 1.3784049 1.7320508 1.0488088 1.0000000 1.1832160 #> 139 1.1401754 1.5811388 0.9486833 2.0000000 0.8366600 1.4832397 1.6124515 #> 140 1.6733201 0.7745967 1.4832397 1.5811388 1.3416408 0.8366600 1.1401754 #> 141 1.7606817 0.7071068 1.5811388 1.6733201 1.4491377 0.7745967 1.2649111 #> 142 1.6431677 0.8366600 1.4491377 1.7320508 1.3038405 1.0954451 1.3416408 #> 143 1.0954451 1.6124515 0.7745967 1.9235384 0.8944272 1.5165751 1.7029386 #> 144 1.8708287 0.5477226 1.7029386 1.5491933 1.5811388 0.7745967 1.0000000 #> 145 1.8708287 0.7071068 1.7029386 1.7320508 1.5811388 0.6324555 1.2649111 #> 146 1.5811388 0.9486833 1.3784049 1.7320508 1.2247449 1.0000000 1.4142136 #> 147 1.0000000 1.5491933 1.0954451 1.8708287 0.6324555 1.4491377 1.6431677 #> 148 1.4142136 1.1832160 1.1832160 1.7029386 1.0000000 1.0488088 1.3784049 #> 149 1.6124515 1.0954451 1.4142136 1.9235384 1.3416408 1.0488088 1.5165751 #> 150 1.1401754 1.5165751 0.9486833 1.9493589 0.9486833 1.4142136 1.5491933 #>           127       128       129       130       131       132       133 #> 2                                                                         #> 3                                                                         #> 4                                                                         #> 5                                                                         #> 6                                                                         #> 7                                                                         #> 8                                                                         #> 9                                                                         #> 10                                                                        #> 11                                                                        #> 12                                                                        #> 13                                                                        #> 14                                                                        #> 15                                                                        #> 16                                                                        #> 17                                                                        #> 18                                                                        #> 19                                                                        #> 20                                                                        #> 21                                                                        #> 22                                                                        #> 23                                                                        #> 24                                                                        #> 25                                                                        #> 26                                                                        #> 27                                                                        #> 28                                                                        #> 29                                                                        #> 30                                                                        #> 31                                                                        #> 32                                                                        #> 33                                                                        #> 34                                                                        #> 35                                                                        #> 36                                                                        #> 37                                                                        #> 38                                                                        #> 39                                                                        #> 40                                                                        #> 41                                                                        #> 42                                                                        #> 43                                                                        #> 44                                                                        #> 45                                                                        #> 46                                                                        #> 47                                                                        #> 48                                                                        #> 49                                                                        #> 50                                                                        #> 51                                                                        #> 52                                                                        #> 53                                                                        #> 54                                                                        #> 55                                                                        #> 56                                                                        #> 57                                                                        #> 58                                                                        #> 59                                                                        #> 60                                                                        #> 61                                                                        #> 62                                                                        #> 63                                                                        #> 64                                                                        #> 65                                                                        #> 66                                                                        #> 67                                                                        #> 68                                                                        #> 69                                                                        #> 70                                                                        #> 71                                                                        #> 72                                                                        #> 73                                                                        #> 74                                                                        #> 75                                                                        #> 76                                                                        #> 77                                                                        #> 78                                                                        #> 79                                                                        #> 80                                                                        #> 81                                                                        #> 82                                                                        #> 83                                                                        #> 84                                                                        #> 85                                                                        #> 86                                                                        #> 87                                                                        #> 88                                                                        #> 89                                                                        #> 90                                                                        #> 91                                                                        #> 92                                                                        #> 93                                                                        #> 94                                                                        #> 95                                                                        #> 96                                                                        #> 97                                                                        #> 98                                                                        #> 99                                                                        #> 100                                                                       #> 101                                                                       #> 102                                                                       #> 103                                                                       #> 104                                                                       #> 105                                                                       #> 106                                                                       #> 107                                                                       #> 108                                                                       #> 109                                                                       #> 110                                                                       #> 111                                                                       #> 112                                                                       #> 113                                                                       #> 114                                                                       #> 115                                                                       #> 116                                                                       #> 117                                                                       #> 118                                                                       #> 119                                                                       #> 120                                                                       #> 121                                                                       #> 122                                                                       #> 123                                                                       #> 124                                                                       #> 125                                                                       #> 126                                                                       #> 127                                                                       #> 128 0.6324555                                                             #> 129 1.1401754 1.2247449                                                   #> 130 1.5491933 1.4832397 1.3038405                                         #> 131 1.6124515 1.6733201 1.3038405 1.0000000                               #> 132 2.1213203 2.0736441 1.8439089 1.5811388 1.3784049                     #> 133 1.1832160 1.2649111 0.3162278 1.3416408 1.3416408 1.8708287           #> 134 0.8366600 0.9486833 1.0954451 1.3784049 1.5811388 2.0976177 1.1401754 #> 135 1.2247449 1.2247449 1.0954451 1.3784049 1.5811388 2.0976177 1.1401754 #> 136 1.8708287 1.8165902 1.4832397 1.2247449 0.9486833 1.2649111 1.4491377 #> 137 1.4491377 1.3784049 1.0000000 1.5165751 1.6431677 1.7888544 0.9486833 #> 138 1.0954451 1.0000000 0.8366600 1.1832160 1.4142136 1.8165902 0.8944272 #> 139 0.6324555 0.4472136 1.3038405 1.5491933 1.7320508 2.1213203 1.3416408 #> 140 1.3784049 1.3038405 1.0000000 1.1401754 1.3038405 1.6733201 1.0488088 #> 141 1.4832397 1.4142136 0.9486833 1.2649111 1.4142136 1.7606817 0.8944272 #> 142 1.3416408 1.2649111 1.2247449 1.3416408 1.4832397 1.8165902 1.1832160 #> 143 0.9486833 0.9486833 1.1832160 1.6431677 1.6431677 2.1447611 1.2247449 #> 144 1.6124515 1.5491933 1.1401754 1.1832160 1.2649111 1.5811388 1.0954451 #> 145 1.6124515 1.5491933 1.1401754 1.3416408 1.4832397 1.7029386 1.0954451 #> 146 1.2649111 1.1832160 1.0488088 1.3416408 1.4832397 1.8708287 1.0000000 #> 147 0.8366600 0.9486833 1.0954451 1.5811388 1.5811388 2.0976177 1.1401754 #> 148 1.0488088 0.9486833 0.8944272 1.3038405 1.4491377 1.8439089 0.9486833 #> 149 1.3038405 1.2247449 1.0954451 1.5811388 1.7029386 1.8439089 1.0488088 #> 150 0.8944272 0.6324555 1.2247449 1.4832397 1.6733201 2.0736441 1.2649111 #>           134       135       136       137       138       139       140 #> 2                                                                         #> 3                                                                         #> 4                                                                         #> 5                                                                         #> 6                                                                         #> 7                                                                         #> 8                                                                         #> 9                                                                         #> 10                                                                        #> 11                                                                        #> 12                                                                        #> 13                                                                        #> 14                                                                        #> 15                                                                        #> 16                                                                        #> 17                                                                        #> 18                                                                        #> 19                                                                        #> 20                                                                        #> 21                                                                        #> 22                                                                        #> 23                                                                        #> 24                                                                        #> 25                                                                        #> 26                                                                        #> 27                                                                        #> 28                                                                        #> 29                                                                        #> 30                                                                        #> 31                                                                        #> 32                                                                        #> 33                                                                        #> 34                                                                        #> 35                                                                        #> 36                                                                        #> 37                                                                        #> 38                                                                        #> 39                                                                        #> 40                                                                        #> 41                                                                        #> 42                                                                        #> 43                                                                        #> 44                                                                        #> 45                                                                        #> 46                                                                        #> 47                                                                        #> 48                                                                        #> 49                                                                        #> 50                                                                        #> 51                                                                        #> 52                                                                        #> 53                                                                        #> 54                                                                        #> 55                                                                        #> 56                                                                        #> 57                                                                        #> 58                                                                        #> 59                                                                        #> 60                                                                        #> 61                                                                        #> 62                                                                        #> 63                                                                        #> 64                                                                        #> 65                                                                        #> 66                                                                        #> 67                                                                        #> 68                                                                        #> 69                                                                        #> 70                                                                        #> 71                                                                        #> 72                                                                        #> 73                                                                        #> 74                                                                        #> 75                                                                        #> 76                                                                        #> 77                                                                        #> 78                                                                        #> 79                                                                        #> 80                                                                        #> 81                                                                        #> 82                                                                        #> 83                                                                        #> 84                                                                        #> 85                                                                        #> 86                                                                        #> 87                                                                        #> 88                                                                        #> 89                                                                        #> 90                                                                        #> 91                                                                        #> 92                                                                        #> 93                                                                        #> 94                                                                        #> 95                                                                        #> 96                                                                        #> 97                                                                        #> 98                                                                        #> 99                                                                        #> 100                                                                       #> 101                                                                       #> 102                                                                       #> 103                                                                       #> 104                                                                       #> 105                                                                       #> 106                                                                       #> 107                                                                       #> 108                                                                       #> 109                                                                       #> 110                                                                       #> 111                                                                       #> 112                                                                       #> 113                                                                       #> 114                                                                       #> 115                                                                       #> 116                                                                       #> 117                                                                       #> 118                                                                       #> 119                                                                       #> 120                                                                       #> 121                                                                       #> 122                                                                       #> 123                                                                       #> 124                                                                       #> 125                                                                       #> 126                                                                       #> 127                                                                       #> 128                                                                       #> 129                                                                       #> 130                                                                       #> 131                                                                       #> 132                                                                       #> 133                                                                       #> 134                                                                       #> 135 1.0000000                                                             #> 136 1.8439089 1.8439089                                                   #> 137 1.4142136 1.4142136 1.5491933                                         #> 138 1.0488088 1.1401754 1.5811388 1.0488088                               #> 139 1.0488088 1.3038405 1.8708287 1.4491377 1.0954451                     #> 140 1.3416408 1.4832397 1.3416408 1.1832160 0.9486833 1.3784049           #> 141 1.4491377 1.4491377 1.3038405 0.8366600 1.0000000 1.4832397 0.8366600 #> 142 1.3038405 1.6431677 1.3784049 1.2247449 1.1832160 1.3416408 0.7071068 #> 143 1.0000000 1.1832160 1.8973666 1.4832397 1.2247449 0.9486833 1.4142136 #> 144 1.5811388 1.5811388 1.1401754 1.0488088 1.1832160 1.6124515 0.9486833 #> 145 1.5811388 1.5811388 1.3784049 0.8366600 1.1832160 1.6124515 1.0488088 #> 146 1.2247449 1.5165751 1.3784049 1.1401754 1.0954451 1.2649111 0.8366600 #> 147 0.8944272 1.1832160 1.8439089 1.4142136 1.1401754 1.0488088 1.3416408 #> 148 1.0000000 1.3416408 1.5491933 1.1832160 0.8366600 1.0488088 0.8944272 #> 149 1.3416408 1.4142136 1.6124515 0.6324555 1.0488088 1.3038405 1.0954451 #> 150 0.9486833 1.2247449 1.8165902 1.3784049 1.0000000 0.6324555 1.3038405 #>           141       142       143       144       145       146       147 #> 2                                                                         #> 3                                                                         #> 4                                                                         #> 5                                                                         #> 6                                                                         #> 7                                                                         #> 8                                                                         #> 9                                                                         #> 10                                                                        #> 11                                                                        #> 12                                                                        #> 13                                                                        #> 14                                                                        #> 15                                                                        #> 16                                                                        #> 17                                                                        #> 18                                                                        #> 19                                                                        #> 20                                                                        #> 21                                                                        #> 22                                                                        #> 23                                                                        #> 24                                                                        #> 25                                                                        #> 26                                                                        #> 27                                                                        #> 28                                                                        #> 29                                                                        #> 30                                                                        #> 31                                                                        #> 32                                                                        #> 33                                                                        #> 34                                                                        #> 35                                                                        #> 36                                                                        #> 37                                                                        #> 38                                                                        #> 39                                                                        #> 40                                                                        #> 41                                                                        #> 42                                                                        #> 43                                                                        #> 44                                                                        #> 45                                                                        #> 46                                                                        #> 47                                                                        #> 48                                                                        #> 49                                                                        #> 50                                                                        #> 51                                                                        #> 52                                                                        #> 53                                                                        #> 54                                                                        #> 55                                                                        #> 56                                                                        #> 57                                                                        #> 58                                                                        #> 59                                                                        #> 60                                                                        #> 61                                                                        #> 62                                                                        #> 63                                                                        #> 64                                                                        #> 65                                                                        #> 66                                                                        #> 67                                                                        #> 68                                                                        #> 69                                                                        #> 70                                                                        #> 71                                                                        #> 72                                                                        #> 73                                                                        #> 74                                                                        #> 75                                                                        #> 76                                                                        #> 77                                                                        #> 78                                                                        #> 79                                                                        #> 80                                                                        #> 81                                                                        #> 82                                                                        #> 83                                                                        #> 84                                                                        #> 85                                                                        #> 86                                                                        #> 87                                                                        #> 88                                                                        #> 89                                                                        #> 90                                                                        #> 91                                                                        #> 92                                                                        #> 93                                                                        #> 94                                                                        #> 95                                                                        #> 96                                                                        #> 97                                                                        #> 98                                                                        #> 99                                                                        #> 100                                                                       #> 101                                                                       #> 102                                                                       #> 103                                                                       #> 104                                                                       #> 105                                                                       #> 106                                                                       #> 107                                                                       #> 108                                                                       #> 109                                                                       #> 110                                                                       #> 111                                                                       #> 112                                                                       #> 113                                                                       #> 114                                                                       #> 115                                                                       #> 116                                                                       #> 117                                                                       #> 118                                                                       #> 119                                                                       #> 120                                                                       #> 121                                                                       #> 122                                                                       #> 123                                                                       #> 124                                                                       #> 125                                                                       #> 126                                                                       #> 127                                                                       #> 128                                                                       #> 129                                                                       #> 130                                                                       #> 131                                                                       #> 132                                                                       #> 133                                                                       #> 134                                                                       #> 135                                                                       #> 136                                                                       #> 137                                                                       #> 138                                                                       #> 139                                                                       #> 140                                                                       #> 141                                                                       #> 142 0.8944272                                                             #> 143 1.5165751 1.3784049                                                   #> 144 0.7745967 1.0000000 1.6431677                                         #> 145 0.6324555 1.0954451 1.6431677 0.7745967                               #> 146 0.7745967 0.6324555 1.3038405 1.0000000 1.0000000                     #> 147 1.4491377 1.3038405 0.8944272 1.5811388 1.5811388 1.2247449           #> 148 1.0488088 0.9486833 1.0954451 1.2247449 1.2247449 0.7071068 1.0000000 #> 149 1.0488088 1.1401754 1.3416408 1.1401754 1.0488088 1.0488088 1.3416408 #> 150 1.4142136 1.2649111 0.7071068 1.5491933 1.5491933 1.1832160 1.0488088 #>           148       149 #> 2                       #> 3                       #> 4                       #> 5                       #> 6                       #> 7                       #> 8                       #> 9                       #> 10                      #> 11                      #> 12                      #> 13                      #> 14                      #> 15                      #> 16                      #> 17                      #> 18                      #> 19                      #> 20                      #> 21                      #> 22                      #> 23                      #> 24                      #> 25                      #> 26                      #> 27                      #> 28                      #> 29                      #> 30                      #> 31                      #> 32                      #> 33                      #> 34                      #> 35                      #> 36                      #> 37                      #> 38                      #> 39                      #> 40                      #> 41                      #> 42                      #> 43                      #> 44                      #> 45                      #> 46                      #> 47                      #> 48                      #> 49                      #> 50                      #> 51                      #> 52                      #> 53                      #> 54                      #> 55                      #> 56                      #> 57                      #> 58                      #> 59                      #> 60                      #> 61                      #> 62                      #> 63                      #> 64                      #> 65                      #> 66                      #> 67                      #> 68                      #> 69                      #> 70                      #> 71                      #> 72                      #> 73                      #> 74                      #> 75                      #> 76                      #> 77                      #> 78                      #> 79                      #> 80                      #> 81                      #> 82                      #> 83                      #> 84                      #> 85                      #> 86                      #> 87                      #> 88                      #> 89                      #> 90                      #> 91                      #> 92                      #> 93                      #> 94                      #> 95                      #> 96                      #> 97                      #> 98                      #> 99                      #> 100                     #> 101                     #> 102                     #> 103                     #> 104                     #> 105                     #> 106                     #> 107                     #> 108                     #> 109                     #> 110                     #> 111                     #> 112                     #> 113                     #> 114                     #> 115                     #> 116                     #> 117                     #> 118                     #> 119                     #> 120                     #> 121                     #> 122                     #> 123                     #> 124                     #> 125                     #> 126                     #> 127                     #> 128                     #> 129                     #> 130                     #> 131                     #> 132                     #> 133                     #> 134                     #> 135                     #> 136                     #> 137                     #> 138                     #> 139                     #> 140                     #> 141                     #> 142                     #> 143                     #> 144                     #> 145                     #> 146                     #> 147                     #> 148                     #> 149 1.0954451           #> 150 0.9486833 1.2247449"},{"path":"/reference/summary.biplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic summary function for objects of class biplot — summary.biplot","title":"Generic summary function for objects of class biplot — summary.biplot","text":"function used print summary output biplot. summary outputs related measures fit.","code":""},{"path":"/reference/summary.biplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic summary function for objects of class biplot — summary.biplot","text":"","code":"# S3 method for class 'biplot' summary(   object,   adequacy = TRUE,   axis.predictivity = TRUE,   sample.predictivity = TRUE,   class.predictivity = TRUE,   within.class.axis.predictivity = TRUE,   within.class.sample.predictivity = TRUE,   ... )"},{"path":"/reference/summary.biplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic summary function for objects of class biplot — summary.biplot","text":"object object class biplot. adequacy logical value indicating whether variable adequacies reported, default TRUE. axis.predictivity logical value indicating whether axis predictivities reported, default TRUE. sample.predictivity logical value indicating whether sample predictivities reported, default TRUE. class.predictivity logical value indicating whether class predictivities reported, default TRUE (applicable objects class CVA). within.class.axis.predictivity logical value indicating whether within class axis predictivity reported, default TRUE (applicable objects class CVA). within.class.sample.predictivity logical value indicating whether within class sample predictivity reported, default TRUE (applicable objects class CVA). ... additional arguments.","code":""},{"path":"/reference/summary.biplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic summary function for objects of class biplot — summary.biplot","text":"function produce return value, called side effects.","code":""},{"path":"/reference/summary.biplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic summary function for objects of class biplot — summary.biplot","text":"","code":"out <- biplot (iris[,1:4]) |> PCA() |> fit.measures() summary(out) #> Object of class biplot, based on 150 samples and 4 variables. #> 4 numeric variables. #>  #> Quality of fit in 2 dimension(s) = 97.8%  #> Adequacy of variables in 2 dimension(s): #> Sepal.Length  Sepal.Width Petal.Length  Petal.Width  #>    0.5617091    0.5402798    0.7639426    0.1340685  #> Axis predictivity in 2 dimension(s): #> Sepal.Length  Sepal.Width Petal.Length  Petal.Width  #>    0.9579017    0.8400028    0.9980931    0.9365937  #> Sample predictivity in 2 dimension(s): #>         1         2         3         4         5         6         7         8  #> 0.9998927 0.9927400 0.9999141 0.9991226 0.9984312 0.9949770 0.9914313 0.9996346  #>         9        10        11        12        13        14        15        16  #> 0.9998677 0.9941340 0.9991205 0.9949153 0.9945491 0.9996034 0.9942676 0.9897890  #>        17        18        19        20        21        22        23        24  #> 0.9937752 0.9990534 0.9972926 0.9928624 0.9896250 0.9932656 0.9918132 0.9955885  #>        25        26        27        28        29        30        31        32  #> 0.9812917 0.9897303 0.9979903 0.9990514 0.9963870 0.9975607 0.9985741 0.9876345  #>        33        34        35        36        37        38        39        40  #> 0.9833383 0.9957412 0.9970200 0.9935405 0.9859750 0.9953399 0.9994047 0.9990244  #>        41        42        43        44        45        46        47        48  #> 0.9980903 0.9756895 0.9953372 0.9830035 0.9763861 0.9959863 0.9905695 0.9987006  #>        49        50        51        52        53        54        55        56  #> 0.9996383 0.9987482 0.9275369 0.9996655 0.9544488 0.9460515 0.9172857 0.9061058  #>        57        58        59        60        61        62        63        64  #> 0.9727694 0.9996996 0.8677939 0.8686502 0.9613130 0.9328852 0.4345132 0.9679973  #>        65        66        67        68        69        70        71        72  #> 0.7995848 0.9083037 0.7968614 0.5835260 0.7900027 0.8575646 0.8524748 0.6615410  #>        73        74        75        76        77        78        79        80  #> 0.9367709 0.8661203 0.8350955 0.8929908 0.8702600 0.9873164 0.9969031 0.6815512  #>        81        82        83        84        85        86        87        88  #> 0.8937189 0.8409681 0.7829405 0.9848354 0.6901625 0.8073582 0.9666041 0.6665514  #>        89        90        91        92        93        94        95        96  #> 0.6993846 0.9909923 0.9008345 0.9710941 0.8037223 0.9913632 0.9744493 0.7089660  #>        97        98        99       100       101       102       103       104  #> 0.9071738 0.9064541 0.9625371 0.9872279 0.9171603 0.9636413 0.9976224 0.9829885  #>       105       106       107       108       109       110       111       112  #> 0.9854704 0.9888092 0.8464463 0.9729353 0.9771293 0.9794313 0.9746239 0.9977302  #>       113       114       115       116       117       118       119       120  #> 0.9941859 0.9605563 0.8476794 0.9289985 0.9929982 0.9916850 0.9818957 0.9493751  #>       121       122       123       124       125       126       127       128  #> 0.9865358 0.8716778 0.9728177 0.9846364 0.9840890 0.9861783 0.9854516 0.9691512  #>       129       130       131       132       133       134       135       136  #> 0.9942007 0.9585884 0.9705389 0.9937852 0.9874192 0.9723192 0.9230503 0.9794405  #>       137       138       139       140       141       142       143       144  #> 0.8947527 0.9797055 0.9458421 0.9902488 0.9674660 0.9350646 0.9636413 0.9867931  #>       145       146       147       148       149       150  #> 0.9500265 0.9470544 0.9688318 0.9886543 0.8735433 0.9281727"},{"path":"/reference/translate_axes.html","id":null,"dir":"Reference","previous_headings":"","what":"Translate biplot axes — translate_axes","title":"Translate biplot axes — translate_axes","text":"Automatically manually translate axes away center plot","code":""},{"path":"/reference/translate_axes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Translate biplot axes — translate_axes","text":"","code":"translate_axes(bp, delta = 0, swop = FALSE, distances = NULL)"},{"path":"/reference/translate_axes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Translate biplot axes — translate_axes","text":"bp object class biplot delta numeric value indicating distance axes swop logical. Change direction axes translated distances numeric vector distances. Used manually parallel translate axes.","code":""},{"path":"/reference/translate_axes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Translate biplot axes — translate_axes","text":"object class biplot translated distances appended bp$axes","code":""},{"path":"/reference/translate_axes.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Translate biplot axes — translate_axes","text":"function uses algorithm implemented TDAbiplot bipl5 package. translates axes center plot. Correlated axes generally gets translated direction. function calculates orthogx orthogy paramaters axes()","code":""},{"path":"/reference/translate_axes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Translate biplot axes — translate_axes","text":"","code":"#Translate the axes out of the plot center  bp <- biplot(state.x77,scaled = TRUE)|>        CVA(state.region) |>        translate_axes(swop=TRUE,delta =0.2)|>       plot(exp.factor=3)   #adjust the distance of an axis  dist <- bp$axes$translate_distance dist[7] <- 0.4 bp |> translate_axes(delta = 0.2, distances=dist) |> plot()"}]
